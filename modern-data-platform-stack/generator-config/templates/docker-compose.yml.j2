# =======================================================================
# Platform Name            {{platys['platform-name']}}
# Platform Stack:          {{platys['platform-stack']}}
# Platform Stack Version:  {{platys['platform-stack-version']}}
# =======================================================================
version: "{{ DOCKER_COMPOSE_VERSION |default(3.5) }}"

networks:
  default:
    name: {{platys['platform-name']}}

{% set __CONFLUENT_PLATFORM_version = CONFLUENT_PLATFORM_version | default('latest') -%}
{% set __APICURIO_REGISTRY_version = APICURIO_REGISTRY_version | default('latest') -%}
{% set __ZOONAVIGATOR_version = ZOONAVIGATOR_version | default('latest') -%}
{% set __ZOONAVIGATOR_API_version = ZOONAVIGATOR_API_version | default('latest') -%}
{% set __KAFKA_KSQLDB_version = KAFKA_KSQLDB_version | default('latest') -%}
{% set __AZKARRA_version = AZKARRA_version | default('latest') -%}

{% set __SCHEMA_REGISTRY_UI_version = SCHEMA_REGISTRY_UI_version | default('latest') -%}

{% set __KAFKACAT_version = KAFKACAT_version | default('1.5.0') -%}

{% set __KAFKA_TOPICS_UI_version = KAFKA_TOPICS_UI_version | default('latest') -%}
{% set __KAFKA_CONNECT_UI_version = KAFKA_CONNECT_UI_version | default('latest') -%}
{% set __KAFKA_CMAK_version = KAFKA_CMAK_version | default('latest') -%}
{% set __KAFKA_KAFDROP_version = KAFKA_KAFDROP_version | default('latest') -%}
{% set __KAFKA_KADMIN_version = KAFKA_KADMIN_version | default('latest') -%}
{% set __KAFKA_AKHQ_version = KAFKA_AKHQ_version | default('latest') -%}
{% set __KAFKA_UI_version = KAFKA_UI_version | default('latest') -%}
{% set __KAFKA_BURROW_version = KAFKA_BURROW_version | default('latest') -%}
{% set __KAFKA_BURROW_UI_version = KAFKA_BURROW_UI_version | default('latest') -%}
{% set __KAFKA_BURROW_DASHBOARD_version = KAFKA_BURROW_DASHBOARD_version | default('latest') -%}

{% set __KAFKACAT_version = KAFKACAT_version | default('latest') -%}

{% set __HADOOP_image_version = HADOOP_image_version | default('latest') -%}
{% set __HADOOP_version = HADOOP_version | default('latest') -%}
{% set __SQOOP_version = SQOOP_version | default('latest') -%}

{% if (SPARK_major_version | lower) == '2'  %}
  {% set __SPARK_version = SPARK2_version ~ "-hadoop2.8"  -%}
  {% set __LIVY_version = LIVY_version ~ "-spark" ~ "2.4"  -%}
  {% set __ZEPPELIN_version = ZEPPELIN_version ~ "-spark" ~ "2.4" ~ "-hadoop2.8" -%}
{% elif (SPARK_major_version | lower) == '3'  %}
  {% set __SPARK_version = SPARK3_version ~ "-hadoop3.2" -%}
  {% set __LIVY_version = LIVY_version ~ "-spark" ~ "3.0"  -%}
  {% set __ZEPPELIN_version = ZEPPELIN_version ~ "-spark" ~ "3.0" ~ "-hadoop3.2" -%}
{% else -%}
  {% set __SPARK_version = SPARK2_version ~ "-hadoop2.8" -%}
  {% set __LIVY_version = LIVY_version ~ "-spark" ~ "2.4"  -%}
  {% set __ZEPPELIN_version = ZEPPELIN_version ~ "-spark" ~ "2.4" ~ "-hadoop2.8" -%}
{% endif -%}

{% set __HIVE_version = HIVE_version | default('latest') -%}
{% set __HIVE_version_suffix = HIVE_version_suffix | default('postgresql-metastore-s3') -%}
{% set __HIVE_METASTORE_DB_version = HIVE_METASTORE_DB_version | default('latest') -%}

{% set __RANGER_version = RANGER_version | default('latest') -%}
{% set __RANGER_postgresql_version = RANGER_postgresql_version | default('latest') -%}

{% set __ATLAS_version = ATLAS_version | default('latest') -%}

{% set __DATAHUB_version = DATAHUB_version | default('latest') -%}

{% set __AMUNDSEN_FRONTEND_version = AMUNDSEN_FRONTEND_version | default('latest') -%}
{% set __AMUNDSEN_SEARCH_version = AMUNDSEN_SEARCH_version | default('latest') -%}
{% set __AMUNDSEN_METADATA_version = AMUNDSEN_METADATA_version | default('latest') -%}

{% set __MARQUEZ_version = MARQUEZ_version | default('latest') -%}
{% set __MARQUEZ_WEB_version = MARQUEZ_WEB_version | default('latest') -%}

{% set __CASSANDRA_version = CASSANDRA_version | default('latest') -%}

{% set __DATASTAX_version = DATASTAX_version | default('latest') -%}

{% set __ELASTICSEARCH_version = ELASTICSEARCH_version | default('latest') -%}
{% set __DEJAVU_version = DEJAVU_version | default('latest') -%}
{% set __CEREBRO_version = CEREBRO_version | default('latest') -%}
{% set __ELASTICSEARCHHQ_version = ELASTICSEARCHHQ_version | default('latest') -%}

{% set __HUE_version = HUE_version | default('latest') -%}
{% set __HUE_POSTGRES_version = HUE_POSTGRES_version | default('latest') -%}

{% set __STREAMSETS_version = STREAMSETS_version | default('latest') -%}
{% set __STREAMSETS_TRANSFORMER_version = STREAMSETS_TRANSFORMER_version | default('latest') -%}
{% set __STREAMSETS_EDGE_version = STREAMSETS_EDGE_version | default('3.12.0') -%}

{% set __NIFI_version = NIFI_version | default('latest') -%}
{% set __NIFI_REGISTRY_version = NIFI_REGISTRY_version | default('latest') -%}

{% set __NODERED_version = NODERED_version | default('latest') -%}

{% set __STREAMSHEETS_version = STREAMSHEETS_version | default('latest') -%}

{% set __SPRING_DATAFLOW_version = SPRING_DATAFLOW_version | default('latest') -%}
{% set __SPRING_SKIPPER_version = SPRING_SKIPPER_version | default('latest') -%}

{% set __AIRFLOW_version = AIRFLOW_version | default('latest') -%}

{%if (JUPYTER_edition | lower) == 'minimal' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_MINIMAL_version | default('latest') -%}
{%elif (JUPYTER_edition | lower) == 'r' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_R_version | default('latest') -%}
{%elif (JUPYTER_edition | lower) == 'scipy' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_SCIPY_version | default('latest') -%}
{%elif (JUPYTER_edition | lower) == 'datascience' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_DATASCIENCE_version | default('latest') -%}
{%elif (JUPYTER_edition | lower) == 'tensorflow' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_TENSORFLOW_version | default('latest') -%}
{%elif (JUPYTER_edition | lower) == 'all-spark' | default(false) %}
  {% set __JUPYTER_version = JUPYTER_ALL_SPARK_version | default('latest') -%}
{% endif -%}

{% set __GRAFANA_version = GRAFANA_version | default('latest') -%}

{% set __KIBANA_version = KIBANA_version | default('latest') -%}

{% set __SUPERSET_version = SUPERSET_version | default('latest') -%}
{% set __REDASH_version = REDASH_version | default('latest') -%}
{% set __SMASHING_version = SMASHING_version | default('latest') -%}
{% set __TIPBOARD_version = TIPBOARD_version | default('latest') -%}
{% set __CHARTBOARD_version = CHARTBOARD_version | default('latest') -%}

{% set __MEMCACHED_version = MEMCACHED_version | default('latest') -%}

{% set __REDIS_version = REDIS_version | default('latest') -%}
{% set __REDIS_INSIGHT_version = REDIS_INSIGHT_version | default('latest') -%}
{% set __REDIS_COMMANDER_version = REDIS_COMMANDER_version | default('latest') -%}

{% set __MONGO_version = MONGO_version | default('latest') -%}
{% set __MONGO_EXPRESS_version = MONGO_EXPRESS_version | default('latest') -%}
{% set __MONGO_ADMIN_version = MONGO_ADMIN_version | default('latest') -%}

{% set __SOLR_version = SOLR_version | default('latest') -%}

{% set __NEO4J_version = NEO4J_version | default('latest') -%}

{% set __DGRAPH_version = DGRAPH_version | default('latest') -%}

{% set __STARDOG_version = STARDOG_version | default('latest') -%}
{% set __STARDOG_STUDIO_version = STARDOG_STUDIO_version | default('latest') -%}

{% set __INFLUXDB_version = INFLUXDB_version | default('latest') -%}
{% set __TELEGRAF_version = TELEGRAF_version | default('latest') -%}
{% set __CHRONOGRAF_version = CHRONOGRAF_version | default('latest') -%}
{% set __KAPACITOR_version = KAPACITOR_version | default('latest') -%}
{% set __INFLUXDB2_version = INFLUXDB2_version | default('2.2.0-alpha') -%}
{% set __INFLUXDB_UI_version = INFLUXDB_UI_version | default('latest') -%}

{% set __KUDU_version = KUDU_version | default('latest') -%}

{% set __DRUID_version = DRUID_version | default('latest') -%}

{% set __PROMETHEUS_version = PROMETHEUS_version | default('latest') -%}
{% set __PROMETHEUS_PUSHGATEWAY_version = PROMETHEUS_PUSHGATEWAY_version | default('latest') -%}

{% set __TILE38_version = TILE38_version | default('latest') -%}

{% set __ORACLE_XE_version = ORACLE_XE_version | default('latest') -%}
{% set __ORACLE_EE_version = ORACLE_EE_version | default('latest') -%}
{% set __ORACLE_REST_DATA_SERVICE_version = ORACLE_REST_DATA_SERVICE_version | default('latest') -%}
{% set __MYSQL_version = MYSQL_version | default('latest') -%}
{% set __POSTGRESQL_version = POSTGRESQL_version | default('latest') -%}
{% set __TIMESCALEDB_version = TIMESCALEDB_version | default('latest') -%}
{% set __SQLSERVER_version = SQLSERVER_version | default('latest') -%}
{% set __YUGABYTE_version = YUGABYTE_version | default('latest') -%}

{% set __ADMINER_version = ADMINER_version | default('latest') -%}
{% set __CLOUDBEAVER_version = CLOUDBEAVER_version | default('latest') -%}
{% set __SQLPAD_version = SQLPAD_version | default('latest') -%}
{% set __QUIX_version = QUIX_version | default('latest') -%}

{% set __AXON_version = AXON_version | default('latest') -%}

{% set __PRESTO_version = PRESTO_version | default('latest') -%}
{% set __PRESTO_CLI_version = PRESTO_CLI_version | default('latest') -%}
{% set __DREMIO_version = DREMIO_version | default('latest') -%}
{% set __DRILL_version = DRILL_version | default('latest') -%}

{% set __HASURA_version = HASURA_version | default('latest') -%}

{% set __MOSQUITTO_version = MOSQUITTO_version | default('latest') -%}
{% set __HIVEMQ3_version = HIVEMQ3_version | default('latest') -%}
{% set __HIVEMQ4_version = HIVEMQ4_version | default('latest') -%}
{% set __HIVEMQ_MQTT_WEB_CLIENT_version = HIVEMQ_MQTT_WEB_CLIENT_version | default('latest') -%}
{% set __CEDALO_MANAGEMENT_CENTER_version = CEDALO_MANAGEMENT_CENTER_version | default('latest') -%}

{% set __ACTIVEMQ_version = ACTIVEMQ_version | default('latest') -%}
{% set __RABBITMQ_version = RABBITMQ_version | default('latest') -%}

{% set __FTP_PUREFTPD_version = FTP_PUREFTPD_version | default('latest') -%}
{% set __FTP_FILEZILLA_version = FTP_FILEZILLA_version | default('latest') -%}

{% set __PENTHAO_version = PENTHAO_version | default('latest') -%}

{% set __MINIO_version = MINIO_version | default('latest') -%}
{% set __MINIO_MC_version = MINIO_MC_version | default('latest') -%}
{% set __MINIO_CONSOLE_version = MINIO_CONSOLE_version | default('latest') -%}
{% set __ADMINIO_UI_version = ADMINIO_UI_version | default('latest') -%}
{% set __ADMINIO_API_version = ADMINIO_API_version | default('latest') -%}
{% set __S3MANAGER_version = S3MANAGER_version | default('latest') -%}
{% set __FILESTASH_version = FILESTASH_version | default('latest') -%}
{% set __AWSCLI_version = AWSCLI_version | default('latest') -%}
{% set __CODE_SERVER_version = CODE_SERVER_version | default('latest') -%}
{% set __FILE_BROWSER_version = FILE_BROWSER_version | default('latest') -%}
{% set __VAULT_version = VAULT_version | default('latest') -%}
{% set __PORTAINER_version = PORTAINER_version | default('latest') -%}
{% set __CADVISOR_version = CADVISOR_version | default('latest') -%}
{% set __HAWTIO_version = HAWTIO_version | default('latest') -%}
{% set __WETTY_version = WETTY_version | default('latest') -%}

{% set __MARKDOWN_VIEWER_VERSION = MARKDOWN_VIEWER_VERSION | default('latest') -%}

{% set __WATCHTOWER_VERSION = WATCHTOWER_VERSION | default('latest') -%}

{% set __SWAGGER_EDITOR_version = SWAGGER_EDITOR_version | default('latest') -%}
{% set __SWAGGER_UI_version = SWAGGER_UI_version | default('latest') -%}

{% set __hw_arch = hw_arch | default('x86-64') -%}
{% set __PYTHON_VERSION = PYTHON_version | default('3') -%}

{% if DATAHUB_enable -%}
# enforce some dependencies
  {% set KAFKA_enable = true -%}
  {% set KAFKA_SCHEMA_REGISTRY_enable = true -%}
{% endif -%}   {# DATAHUB_enable  #}

{% if AZKARRA_enable -%}
# enforce some dependencies
  {% set KAFKA_enable = true -%}
{% endif -%}   {# DATAHUB_enable  #}

{% if KAFKA_enable or ATLAS_enable or DRILL_enable -%}
# enforce some dependencies
  {% set ZOOKEEPER_enable = true -%}
{% endif -%}   {# KAFKA_enable or ATLAS_enable or DATAHUB_enable #}

{% if KAFKA_TOPICS_UI_enable -%}
# enforce some dependencies
  {% set KAFKA_RESTPROXY_enable = true -%}
{% endif -%}   {# KAFKA_TOPICS_UI_enable #}

{% if KAFKA_KSQLDB_enable -%}
# enforce some dependencies
  {% set KAFKA_SCHEMA_REGISTRY_enable = true -%}
{% endif -%}   {# KAFKA_KSQLDB_enable #}

{% if HUE_enable -%}
# enforce some dependencies
  {% set SOLR_enable = true -%}
{% endif -%}   {# PLATFORM_ARM_enable #}

{% if SUPERSET_enable -%}
# enforce some dependencies
  {% set REDIS_enable = true -%}
  {% set POSTGRESQL_enable = true -%}
{% endif -%}   {# SUPERSET_enable #}

{% if TIPBOARD_enable -%}
# enforce some dependencies
  {% set REDIS_enable = true -%}
{% endif -%}   {# TIPBOARD_enable #}

{% if HASURA_enable -%}
# enforce some dependencies
  {% set POSTGRESQL_enable = true -%}
{% endif -%}   {# HASURA_enable #}

{% if (__hw_arch | upper) == 'ARM' -%}
# if we use stack type ARM, then disable some containers which do not support ARM
  {% set ZOOKEEPER_enable = false -%}
  {% set KAFKA_enable = false -%}
  {% set APICURIO_REGISTRY_enable = false -%}
  {% set KAFKA_REPLICATOR_enable = false -%}
  {% set KAFKACAT_enable = false -%}
  {% set HADOOP_enable = false -%}
  {% set SPARK_enable = false -%}
  {% set HIVE_enable = false -%}
  {% set RANGER_enable = false -%}
  {% set RANGER_POSTGRES_enable = false -%}
  {% set ATLAS_enable = false -%}
  {% set DATAHUB_enable = false -%}
  {% set AMUNDSEN_enable = false -%}
  {% set MARQUEZ_enable = false -%}
  {% set HUE_enable = false -%}
  {% set STREAMSETS_enable = false -%}
  {% set STREAMSETS_TRANSFORMER_enable = false -%}
  {% set NIFI_enable = false -%}
  {% set NIFI_REGISTRY_enable = false -%}
  {% set STREAMSHEETS_enable = false -%}
  {% set SPRING_DATAFLOW_enable = false -%}
  {% set AIRFLOW_enable = false -%}
  {% set ZEPPELIN_enable = false -%}
  {% set JUPYTER_enable = false -%}
  {% set SUPERSET_enable = false -%}
  {% set REDASH_enable = false -%}
  {% set SMASHING_enable = false -%}
  {% set TIPBOARD_enable = false -%}
  {% set REDIS_INSIGHT_enable = false -%}
  {% set REDIS_COMMANDER_enable = false -%}
  {% set MONGO_enable = false -%}
  {% set ELASTICSEARCH_enable = false -%}
  {% set DEJAVU_enable = false -%}
  {% set CEREBRO_enable = false -%}
  {% set ELASTICHQ_enable = false -%}
  {% set KIBANA_enable = false -%}
  {% set INFLUXDB2_enable = false -%}
  {% set NEO4J_enable = false -%}
  {% set DGRAPH_enable = false -%}
  {% set STARDOG_enable = false -%}
  {% set STARDOG_STUDIO_enable = false -%}
  {% set TILE38_enable = false -%}
  {% set ORACLE_enable = false -%}
  {% set ORACLE_REST_DATA_SERVICE_enable = false -%}
  {% set MYSQL_enable = false -%}
  {% set SQLSERVER_enable = false -%}
  {% set TIMESCALEDB_enable = false -%}
  {% set ADMINER_enable = false -%}
  {% set CLOUDBEAVER_enable = false -%}
  {% set SQLPAD_enable = false -%}
  {% set QUIX_enable = false -%}
  {% set AXON_enable = false -%}
  {% set PRESTO_enable = false -%}
  {% set PRESTO_CLI_enable = false -%}
  {% set DREMIO_enable = false -%}
  {% set DRILL_enable = false -%}
  {% set HASURA_enable = false -%}
  {% set HIVEMQ3_enable = false -%}
  {% set HIVEMQ4_enable = false -%}
  {% set MQTT_UI_enable = false -%}
  {% set ACTIVEMQ_enable = false -%}
  {% set FTP_enable = false -%}
  {% set PENTHAO_enable = false -%}
  {% set MINIO_enable = false -%}
  {% set MINIO_MC_enable = false -%}
  {% set MINIO_CONSOLE_enable = false -%}
  {% set ADMINIO_UI_enable = false -%}
  {% set ADMINIO_API_enable = false -%}
  {% set FILESTASH_enable = false -%}
  {% set S3MANAGER_enable = false -%}
  {% set AWSCLI_enable = false -%}
  {% set CODE_SERVER_enable = false -%}
  {% set FILE_BROWSER_enable = false -%}
  {% set CADVISOR_enable = false -%}
  {% set HAWTIO_enable = false -%}
  {% set WETTY_enable = false -%}
  {% set MARKDOWN_VIEWER_enable = false -%}
  {% set SWAGGER_EDITOR_enable = false -%}
  {% set SWAGGER_UI_enable = false -%}
{% endif %}   {# PLATFORM_ARM_enable #}

{#  ================================== Handling external services ========================================== #}

{% set ns = namespace(bootstrapServers='') %}
{% if (external['KAFKA_enable']) | default(false) %}
    {% set ns.bootstrapServers = external['KAFKA_bootstrap_servers'] %}
{% else %}
    {% for num in range(KAFKA_datacenters | default(1) ) %}
      {% set dcName = "dc" ~ loop.index%}
      {% set basePort = 9091 + (loop.index-1) * KAFKA_broker_nodes %}
      {% if loop.length > 1 %}
        {% set serviceBaseName = "kafka-" ~ dcName ~ "-" %}
      {% else %}
        {% set serviceBaseName = "kafka-" %}
      {% endif -%}
      {% for num in range(KAFKA_broker_nodes | default(1) ) %}
        {% set port = basePort + loop.index %}
        {% set serviceName = serviceBaseName ~ loop.index %}
        {% if loop.first %}
           {% set ns.bootstrapServers = serviceName ~ ":1" ~ port %}
        {% else %}
           {% set ns.bootstrapServers = ns.bootstrapServers ~ ',' ~ serviceName ~ ":1" ~ port %}
        {% endif %}
      {% endfor %}
    {% endfor %}
{% endif %}   {# external['KAFKA_enable'] #}

{% if (external['S3_enable']) | default(false) %}
  {% if (external['S3_endpoint'] != None) | default(false) %}
    {% set s3Endpoint = external['S3_endpoint'] %}
  {% endif %}
    {% set s3Endpoint = 's3.amazonaws.com' %}
    {% set s3PathStyleAccess = external['S3_path_style_access'] %}
    {% set s3AccessKey = '${PLATYS_AWS_ACCESS_KEY:?PLATYS_AWS_ACCESS_KEY must be set either in .env or as an environment variable}' %}
    {% set s3SecretAccessKey = '${PLATYS_AWS_SECRET_ACCESS_KEY:?PLATYS_AWS_SECRET_ACCESS_KEY must be set either in .env or as an environment variable}' %}
    {% set s3DefaultRegion = external['S3_default_region'] %}
{% else %}
    {% set s3Endpoint = 'http://minio-1:9000' %}
    {% set s3PathStyleAccess = 'true' %}
    {% set s3AccessKey = MINIO_access_key %}
    {% set s3SecretAccessKey = MINIO_secret_key %}
    {% set s3DefaultRegion = 'us-east-1' %}
{% endif %}   {# external['s3Endpoint'] #}

{#  ================================== Services ========================================== #}

services:

{% if ZOOKEEPER_enable | default(false) %}
  #  ================================== Zookeeper ========================================== #
  {% for num in range(ZOOKEEPER_nodes | default('1') ) %}
  {% set port = 2180 + loop.index %}
  zookeeper-{{loop.index}}:
    image: confluentinc/cp-zookeeper:{{__CONFLUENT_PLATFORM_version}}
    container_name: zookeeper-{{loop.index}}
    hostname: zookeeper-{{loop.index}}
    ports:
      - "{{port}}:{{port}}"
    environment:
      ZOOKEEPER_SERVER_ID: {{loop.index}}
      ZOOKEEPER_CLIENT_PORT: {{port}}
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    {% if ZOOKEEPER_nodes == 3 %}
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888
    {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if ZOOKEEPER_volume_map_data %}
      - "./container-volume/zookeeper-{{loop.index}}/data:/var/lib/zookeeper/data"
      - "./container-volume/zookeeper-{{loop.index}}/log:/var/lib/zookeeper/log"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endfor %}

  {% if ZOOKEEPER_NAVIGATOR_enable | default(false) %}
  zoonavigator:
    image: elkozmon/zoonavigator-web:{{__ZOONAVIGATOR_version}}
    container_name: zoonavigator
    hostname: zoonavigator
    labels:
      com.platys.webui.title: 'Zoonavigator UI'
      com.platys.webui.url: http://${PUBLIC_IP}:28100
    ports:
     - "28100:8010"
    depends_on:
     - zoonavigator-api
    environment:
      WEB_HTTP_PORT: 8010
      API_HOST: "zoonavigator-api"
      API_PORT: 9010
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  zoonavigator-api:
    image: elkozmon/zoonavigator-api:{{__ZOONAVIGATOR_API_version}}
    container_name: zoonavigator-api
    labels:
      com.platys.restapi.title: 'Zoonavigator REST API'
      com.platys.restapi.url: 'http://${PUBLIC_IP}:28101'
    ports:
     - "28101:9010"
    environment:
      API_HTTP_PORT: 9010
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {# ZOOKEEPER_NAVIGATOR_enable #}

{% endif %}   {# zookeeper_enable or KAFKA_enable or ATLAS_enable #}

{% if (KAFKA_enable) | default(false) %}
  {# make sure that internal replication factor is not larger than the number of Kafka nodes #}
  {% if KAFKA_internal_replication_factor > KAFKA_broker_nodes -%}
    {% set KAFKA_internal_replication_factor = KAFKA_broker_nodes -%}
  {% endif -%}
  #  ================================== Kafka ========================================== #
    {% for num in range(KAFKA_datacenters | default(1) ) %}
      {% set dcName = "dc" ~ loop.index%}
      {% set basePort = 9091 + (loop.index-1) * KAFKA_broker_nodes %}
      {% set basePortJMX = 9991 + (loop.index-1) * KAFKA_broker_nodes %}
      {% if loop.length > 1 %}
        {% set serviceBaseName = "kafka-" ~ dcName ~ "-" %}
      {% else %}
        {% set serviceBaseName = "kafka-" %}
      {% endif -%}
      {% for num in range(KAFKA_broker_nodes | default(1) ) %}
        {% set port = basePort + loop.index %}
        {% set portJMX = basePortJMX + loop.index %}
        {% set serviceName = serviceBaseName ~ loop.index %}

  {{serviceName}}:
    image: confluentinc/{{ 'cp-enterprise-kafka' if (KAFKA_edition | lower) == 'enterprise' else 'cp-kafka' }}:{{__CONFLUENT_PLATFORM_version}}
    container_name: {{serviceName}}
    hostname: {{serviceName}}
    depends_on:
      - zookeeper-1
    ports:
      - "{{port}}:{{port}}"
      - "1{{port}}:1{{port}}"
      - "2{{port}}:2{{port}}"
      - "{{portJMX}}:{{portJMX}}"
    environment:
      KAFKA_BROKER_ID: {{loop.index}}
      KAFKA_BROKER_RACK: '{{dcName}}'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-1:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'LISTENER_INTERNAL:PLAINTEXT,LISTENER_DOCKERHOST:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'LISTENER_INTERNAL://{{serviceName}}:1{{port}},LISTENER_DOCKERHOST://{{serviceName}}:2{{port}},LISTENER_EXTERNAL://{{serviceName}}:{{port}}'
      KAFKA_ADVERTISED_LISTENERS: 'LISTENER_INTERNAL://{{serviceName}}:1{{port}},LISTENER_DOCKERHOST://localhost:2{{port}},LISTENER_EXTERNAL://${PUBLIC_IP:-127.0.0.1}:{{port}}'
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      KAFKA_REPLICA_SELECTOR_CLASS: {{KAFKA_replica_selector_class | default(omit)}}
      {% if KAFKA_CCC_enable and (KAFKA_edition | lower) == 'enterprise' | default(false) %}
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      {% endif %}
      {% if (KAFKA_edition | lower) == 'enterprise' | default(false) %}
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      KAFKA_CONFLUENT_LOG_PLACEMENT_CONSTRAINTS: '{{KAFKA_confluent_log_placement_constraints}}'
      {%if KAFKA_confluent_tier_enable | default(false) %}
      KAFKA_CONFLUENT_TIER_ENABLE: '{{KAFKA_confluent_tier_enable | default(omit) }}'
      KAFKA_CONFLUENT_TIER_FEATURE: '{{KAFKA_confluent_tier_feature | default(omit) }}'
      KAFKA_CONFLUENT_TIER_BACKEND: {{KAFKA_confluent_tier_backend | default(omit) }}
      KAFKA_CONFLUENT_TIER_S3_BUCKET: '{{KAFKA_confluent_tier_s3_bucket| default('kafka-logs') }}'
      KAFKA_CONFLUENT_TIER_S3_PREFIX: '{{KAFKA_confluent_tier_s3_prefix| default(omit) }}'
      KAFKA_CONFLUENT_TIER_S3_REGION: '{{KAFKA_confluent_tier_s3_region | default('us-east-1') }}'
      KAFKA_CONFLUENT_TIER_S3_AWS_ENDPOINT_OVERRIDE: '{{KAFKA_confluent_tier_s3_aws_endpoint_override | default(omit) }}'
      KAFKA_CONFLUENT_TIER_LOCAL_HOTSET_BYTES: {{KAFKA_confluent_tier_local_hotset_bytes | default(omit) }}
      KAFKA_CONFLUENT_TIER_LOCAL_HOTSET_MS: {{KAFKA_confluent_tier_local_hotset_ms | default(omit) }}
      KAFKA_CONFLUENT_TIER_ARCHIVER_NUM_THREADS: {{KAFKA_confluent_tier_archiver_num_threads | default(omit) }}
      KAFKA_CONFLUENT_TIER_FETCHER_NUM_THREADS: {{KAFKA_confluent_tier_fetcher_num_threads | default(omit) }}
      KAFKA_CONFLUENT_TIER_TOPIC_DELETE_CHECK_INTERVAL_MS: {{KAFKA_confluent_tier_topic_delete_check_interval_ms | default(omit) }}
      KAFKA_CONFLUENT_TIER_METADATA_REPLICATION_FACTOR: {{KAFKA_confluent_tier_metadata_replication_factor | default(1) }}
      AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      AWS_SECRET_ACCESS_KEY: {{s3SecretAccessKey}}
      {% endif -%} {# KAFKA_confluent_tier_enable #}
      {% endif -%} {# KAFKA_edition == ENTERPRISE #}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      KAFKA_MESSAGE_TIMESTAMP_TYPE: {{KAFKA_message_timestamp_type | default('CreateTime')}}
      KAFKA_COMPRESSION_TYPE: '{{KAFKA_compression_type | default(omit) }}'
      KAFKA_LOG_SEGMENT_BYTES: {{KAFKA_log_segment_bytes | default(omit) }}
      KAFKA_LOG_RETENTION_MS: {{KAFKA_log_retention_ms | default(omit) }}
      KAFKA_LOG_RETENTION_HOURS: {{KAFKA_log_retention_hours | default(omit) }}
      KAFKA_LOG_RETENTION_BYTES: {{KAFKA_log_retention_bytes | default(omit) }}
      KAFKA_MIN_INSYNC_REPLICAS: {{KAFKA_min_insync_replicas | default(1) }}
      KAFKA_DELETE_TOPIC_ENABLE: '{{ KAFKA_delete_topic_enable | default(omit) }}'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: '{{ KAFKA_auto_create_topics_enable | default(omit) }}'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_JMX_PORT: {{portJMX}}
      KAFKA_JMX_OPTS: '-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port={{portJMX}}'
      KAFKA_JMX_HOSTNAME: '${PUBLIC_IP:-127.0.0.1}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if KAFKA_volume_map_data %}
      - "./container-volume/kafka-{{loop.index}}:/var/lib/kafka/data"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

    {% endfor %}
  {% endfor %}

{% endif %} {# KAFKA_enable #}

{% if ( (KAFKA_enable or external['KAFKA_enable']) and KAFKA_SCHEMA_REGISTRY_enable ) | default(false) %}
  #  ================================== Schema Registry ========================================== #
  {% for num in range(KAFKA_SCHEMA_REGISTRY_nodes | default(1) ) %}
    {% set external_port = 8081 + loop.index - 1 %}
    {% set port = 8081 + loop.index - 1 %}
  schema-registry-{{loop.index}}:
    image: confluentinc/cp-schema-registry:{{__CONFLUENT_PLATFORM_version}}
    hostname: schema-registry-{{loop.index}}
    container_name: schema-registry-{{loop.index}}
    labels:
      com.platys.restapi.title: 'Schema Registry REST API'
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
    ports:
      - "{{external_port}}:{{port}}"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-{{loop.index}}
    {% if KAFKA_SCHEMA_REGISTRY_use_zookeeper_election %}
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper-1:2181'
    {% endif %}
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      SCHEMA_REGISTRY_MASTER_ELIGIBILITY: "true"
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: {{KAFKA_SCHEMA_REGISTRY_replication_factor}}
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endfor %}
{% endif %}   {# KAFKA_enable and KAFKA_SCHEMA_REGISTRY_enable #}

{% if ( (KAFKA_enable or external['KAFKA_enable']) and APICURIO_REGISTRY_enable ) | default(false) %}
  #  ================================== Apicurio Registry ========================================== #
  {% for num in range(APICURIO_REGISTRY_nodes | default(1) ) %}
    {% set external_port = 29000 + loop.index - 1 %}
    {% set http_external_port = 28162 + loop.index - 1 %}
    {% set http_port = 8080 + loop.index - 1 %}
  apicurio-registry-{{loop.index}}:
    image: apicurio/apicurio-registry-streams:{{__APICURIO_REGISTRY_version}}
    hostname: apicurio-registry-{{loop.index}}
    container_name: apicurio-registry-{{loop.index}}
    labels:
      com.platys.restapi.title: 'Apicurio Registry REST API'
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
    depends_on:
      - kafka-1
    ports:
      - "{{external_port}}:9000"
      - "{{http_external_port}}:{{http_port}}"
    environment:
      QUARKUS_PROFILE: prod
      KAFKA_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      APPLICATION_ID: registry_id
      APPLICATION_SERVER: apicurio-registry-{{loop.index}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endfor %}
{% endif %}   {# KAFKA_enable and APICURIO_REGISTRY_enable #}

{% if ( (KAFKA_enable or external['KAFKA_enable']) and KAFKA_CONNECT_enable ) | default(false) %}
  #  ================================== Kafka Connect ========================================== #
  {% for num in range(KAFKA_CONNECT_nodes | default(1) ) %}
    {% set external_port = 8083 + loop.index - 1 %}
    {% set port = 8083 + loop.index - 1 %}
  kafka-connect-{{loop.index}} :
    image: confluentinc/cp-kafka-connect:{{__CONFLUENT_PLATFORM_version}}
    container_name: kafka-connect-{{loop.index}}
    labels:
      com.platys.restapi.title: 'Kafka Connect REST API'
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
    ports:
      - "{{external_port}}:{{port}}"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect-{{loop.index}}
      CONNECT_REST_PORT: {{port}}
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_CONFIG_STORAGE_TOPIC: _connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _connect-status
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
   {%if KAFKA_SCHEMA_REGISTRY_enable | default(false) %}
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry-1:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry-1:8081'
   {% else %}
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
   {% endif -%}   {#  KAFKA_SCHEMA_REGISTRY_enable #}
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_LOG4J_APPENDER_STDOUT_LAYOUT_CONVERSIONPATTERN: "[%d] %p %X{connector.context}%m (%c:%L)%n"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/addl-plugins"
      # CONNECT_SECURITY_PROTOCOL: SSL
      # CONNECT_SASL_MECHANISM: PLAIN
      # CONNECT_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="$CLUSTER_API_KEY" password="$CLUSTER_API_SECRET";
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-4.0.0.jar
      AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      AWS_SECRET_ACCESS_KEY: {{s3SecretAccessKey}}
      # External secrets config
      # See https://docs.confluent.io/current/connect/security.html#externalizing-secrets
      CONNECT_CONFIG_PROVIDERS: '{{KAFKA_CONNECT_config_providers}}'
      CONNECT_CONFIG_PROVIDERS_{{KAFKA_CONNECT_config_providers | upper }}_CLASS: '{{KAFKA_CONNECT_config_providers_classes}}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/kafka-connect:/etc/kafka-connect/addl-plugins
    {%if KAFKA_CONNECT_map_settings_file | default(false) %}
      - ./conf.override/kafka-connect/settings.properties:/data/settings.properties
    {% endif -%}   {#  KAFKA_CONNECT_map_credentials_file #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
    {%if loop.index == 1 | default(false) %}
    command:
      # In the command section, $ are replaced with $$ to avoid the error 'Invalid interpolation format for "command" option'
      - bash
      - -c
      - |
        echo "Installing Connectors"
        for i in $$(echo "{{KAFKA_CONNECT_connectors}}" | sed "s/,/ /g")
        do
          confluent-hub install --no-prompt --component-dir /etc/kafka-connect/addl-plugins --verbose "$$i"
        done
        #
        echo "Launching Kafka Connect worker"
        /etc/confluent/docker/run &
        #
        sleep infinity
    {% endif %}
  {% endfor %}
{% endif %}   {# KAFKA_enable and KAFKA_CONNECT_enable  #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_KSQLDB_enable )| default(false) %}
  #  ================================== ksqlDB ========================================== #
  {% for num in range(KAFKA_KSQLDB_nodes | default(1) ) %}
    {% set external_port = 8088 + loop.index - 1 %}
    {% set port = 8088 %}
    {% set jmx_external_port = 1095 + loop.index - 1 %}
    {% set jmx_port = 1095 %}
  ksqldb-server-{{loop.index}} :
    image: confluentinc/ksqldb-server:{{__KAFKA_KSQLDB_version}}
    hostname: ksqldb-server-{{loop.index}}
    container_name: ksqldb-server-{{loop.index}}
    labels:
      com.platys.restapi.title: 'ksqlDB Server REST API'
      com.platys.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
    ports:
      - "{{external_port}}:{{port}}"
      - "{{jmx_external_port}}:{{jmx_port}}"
    depends_on:
      - schema-registry-1
    environment:
      KSQL_LOG4J_ROOT_LOGLEVEL: INFO
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksqldb/log4j.properties"
      KSQL_LOG4J_PROCESSING_LOG_BROKERLIST: '{{ns.bootstrapServers}}'
      KSQL_LOG4J_PROCESSING_LOG_TOPIC: demo_processing_log

      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_NAME: 'demo_processing_log'
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: {{KAFKA_KSQLDB_internal_replication_factor | default(1)}}
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

      # For Demo purposes: improve resource utilization and avoid timeouts
      KSQL_KSQL_STREAMS_NUM_STREAM_THREADS: 1

      KSQL_PRODUCER_ENABLE_IDEMPOTENCE: 'true'

      KSQL_APPLICATION_ID: "kafka-demo"
      KSQL_KSQL_SERVICE_ID: "kafka-demo"
      KSQL_HOST_NAME: ksqldb-server-{{loop.index}}
      KSQL_LISTENERS: http://0.0.0.0:{{port}}
      KSQL_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0

      #KSQL_SECURITY_PROTOCOL: SASL_SSL
      #KSQL_SASL_MECHANISM: PLAIN
      #KSQL_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="{{external['KAFKA_username']}}" password="{{external['KAFKA_password']}}";
    {% if ( KAFKA_CONNECT_enable ) | default(false) %}
      KSQL_KSQL_CONNECT_URL: http://kafka-connect-1:8083
    {% endif -%}   {#  KAFKA_CONNECT_enable #}
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry-1:8081"


      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: {{KAFKA_KSQLDB_internal_replication_factor | default(1)}}
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: {{KAFKA_KSQLDB_internal_replication_factor | default(1)}}
      KSQL_KSQL_QUERY_PULL_METRICS_ENABLED: "true"
      KSQL_KSQL_HIDDEN_TOPICS: '^_.*,default_ksql_processing_log'

      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

      KSQL_KSQL_SUPPRESS_ENABLED: "{{KAFKA_KSQLDB_suppress_enabled | default(omit)}}"
      KSQL_KSQL_SUPPRESS_BUFFER_SIZE_BYTES: "{{KAFKA_KSQLDB_suppress_buffer_size_bytes | default(-1)}}"

      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_KSQL_EXTENSION_DIR: '/etc/ksqldb/ext/'
    {% if KAFKA_KSQLDB_queries_file is defined and KAFKA_KSQLDB_queries_file|length %}
      KSQL_KSQL_QUERIES_FILE: "{{KAFKA_KSQLDB_queries_file}}"
    {% endif -%}   {#  KAFKA_KSQLDB_queries_file #}
      KSQL_JMX_OPTS: "-Djava.rmi.server.hostname=localhost -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port={{jmx_port}} -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port={{jmx_port}}"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/ksql:/etc/ksqldb/ext
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endfor %}

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:{{__KAFKA_KSQLDB_version}}
    container_name: ksqldb-cli
    hostname: ksqldb-cli
    depends_on:
      - ksqldb-server-1
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint: /bin/sh
    tty: true
{% endif %}   {# KAFKA_broker_enable and KAFKA_KSQLDB_enable #}

{% if (AZKARRA_enable) | default(false) %}
  #  ================================== Azkarra Streams ========================================== #
  azkarra-worker-1:
    image: streamthoughts/azkarra-streams-worker:{{__AZKARRA_version}}
    hostname: azkarra-worker-1
    container_name: azkarra-worker-1
    depends_on:
      - kafka-1
    ports:
      - "28085:8080"
    environment:
      AZKARRA_CONTEXT_STREAMS_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      AZKARRA_CONTEXT_STREAMS_STATE_DIR: /var/lib/kafka-streams/
      AZKARRA_CONTEXT_AUTO_CREATE_TOPICS_ENABLE: "true"
      AZKARRA_CONTEXT_AUTO_DELETE_TOPICS_ENABLE: "true"
      AZKARRA_CONTEXT_ENABLE_WAIT_FOR_TOPICS: "true"
      AZKARRA_COMPONENT_PATHS: /usr/share/azkarra-components
    volumes:
      - /components/azkarra:/usr/share/azkarra-components
      #- /tmp/azkarra/etc/azkarra.conf:/etc/azkarra/azkarra.conf
{% endif %}   {# AZKARRA_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_RESTPROXY_enable) | default(false) %}
  #  ================================== Confluent REST Proxy ========================================== #
  kafka-rest-1:
    image: confluentinc/cp-kafka-rest:{{__CONFLUENT_PLATFORM_version}}
    container_name: kafka-rest-1
    hostname: kafka-rest-1
    labels:
      com.platys.restapi.title: 'Kafka REST Proxy'
      com.platys.restapi.url: "http://${PUBLIC_IP}:18086"
    depends_on:
      - kafka-1
      - schema-registry-1
    ports:
      - "18086:8086"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8086'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry-1:8081'
      KAFKA_REST_HOST_NAME: 'kafka-rest-1'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_RESTPROXY_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_MQTTPROXY_enable) | default(false) %}
  #  ================================== Confluent MQTT Proxy ========================================== #
  kafka-mqtt-1:
    image: confluentinc/cp-kafka-mqtt:{{__CONFLUENT_PLATFORM_version}}
    container_name: kafka-mqtt-1
    hostname: kafka-mqtt-1
    ports:
      - "1882:1882"
    environment:
      KAFKA_MQTT_TOPIC_REGEX_LIST: {{KAFKA_MQTTPROXY_topic_regex_list}}
      KAFKA_MQTT_LISTENERS: 0.0.0.0:1882
      KAFKA_MQTT_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      KAFKA_MQTT_CONFLUENT_TOPIC_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_MQTTPROXY_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and (KAFKA_edition | lower) == 'enterprise' and KAFKA_CCC_enable) | default(false) %}
  #  ================================== Confluent Control Center ========================================== #
  control-center:
    image: confluentinc/cp-enterprise-control-center:{{__CONFLUENT_PLATFORM_version}}
    hostname: control-center
    container_name: control-center
    labels:
      com.platys.webui.title: 'Control Center UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:9021"
    depends_on:
      - zookeeper-1
      - kafka-1
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper-1:2181'
  {% if ( KAFKA_CONNECT_enable ) | default(false) %}
      CONTROL_CENTER_CONNECT_CLUSTER: 'kafka-connect-1:8083'
  {% endif %}
  {% if ( KAFKA_KSQLDB_enable ) | default(false) %}
      CONTROL_CENTER_KSQL_DEMO_URL: "http://ksql-server-1:8088"
      CONTROL_CENTER_KSQL_DEMO_ADVERTISED_URL: "http://${PUBLIC_IP}:8088"
  {% endif %}
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry-1:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: {{KAFKA_internal_replication_factor | default(1)}}
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: {{KAFKA_internal_replication_factor | default(1)}}
      CONFLUENT_METRICS_TOPIC_REPLICATION: {{KAFKA_internal_replication_factor | default(1)}}
      PORT: 9021
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_CCC_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and (KAFKA_edition | lower) == 'enterprise' and KAFKA_REPLICATOR_enable) | default(false) %}
  replicator-1:
    image: confluentinc/cp-enterprise-replicator:{{__CONFLUENT_PLATFORM_version}}
    container_name: replicator-1
    hostname: replicator-1
    depends_on:
      - kafka-1
      - schema-registry
    ports:
      - 18083:8083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: '{{ns.bootstrapServers}}'
      CONNECT_REST_ADVERTISED_HOST_NAME: 'replicator-1'
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-replicator
      CONNECT_CONFIG_STORAGE_TOPIC: _replicator-configs
      CONNECT_OFFSET_STORAGE_TOPIC: _replicator-offsets
      CONNECT_STATUS_STORAGE_TOPIC: _replicator-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry-1:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry-1:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'INFO'
      CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR'
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: {{KAFKA_internal_replication_factor | default(1)}}
      CONNECT_PLUGIN_PATH: '/usr/share/java,/usr/share/confluent-hub-components/'
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: 'All'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_REPLICATOR_enable #}

{% if (KAFKACAT_enable) | default(false) %}
  #  ================================== Kafkacat  ========================================== #
  kafkacat:
    image: edenhill/kafkacat:{{__KAFKACAT_version}}
    container_name: kafkacat
    hostname: kafkacat
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint:
      - /bin/sh
      - -c
      - |
        while [ 1 -eq 1 ];do sleep 60;done
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKACAT_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_SCHEMA_REGISTRY_UI_enable) | default(false) %}
  #  ================================== Schema Registry UI ========================================== #
  schema-registry-ui:
    image: landoop/schema-registry-ui:{{__SCHEMA_REGISTRY_UI_version}}
    container_name: schema-registry-ui
    hostname: schema-registry-ui
    labels:
      com.platys.webui.title: 'Confluent Schema Registry UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28102"
    depends_on:
      - kafka-1
      - schema-registry-1
    ports:
      - "28102:8000"
    environment:
    {%if KAFKA_SCHEMA_REGISTRY_UI_use_public_ip | default(true) %}
      SCHEMAREGISTRY_URL: 'http://${PUBLIC_IP}:8081'
    {% else %}
      SCHEMAREGISTRY_URL: 'http://${DOCKER_HOST_IP}:8081'
    {% endif -%}   {#  KAFKA_SCHEMA_REGISTRY_use_public_ip #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_SCHEMA_REGISTRY_UI_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_TOPICS_UI_enable) | default(false) %}
  #  ================================== Kafka Topics UI ========================================== #
  kafka-topics-ui:
    image: landoop/kafka-topics-ui:{{__KAFKA_TOPICS_UI_version}}
    container_name: kafka-topics-ui
    hostname: kafka-topics-ui
    labels:
      com.platys.webui.title: 'Kafka Topics UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28141"
    depends_on:
      - kafka-1
      - kafka-rest-1
    ports:
      - "28141:8000"
    environment:
      KAFKA_REST_PROXY_URL: 'http://kafka-rest-1:8086'
      LAZY_LOAD_TOPIC_META: 'false'
      PROXY: 'true'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_SCHEMA_REGISTRY_UI_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_CONNECT_enable and KAFKA_CONNECT_UI_enable) | default(false) %}
  #  ================================== Kafka Connect UI ========================================== #
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:{{__KAFKA_CONNECT_UI_version}}
    container_name: kafka-connect-ui
    hostname: kafka-connect-ui
    labels:
      com.platys.webui.title: 'Kafka Connect UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28103"
    depends_on:
      - kafka-connect-1
    ports:
      - "28103:8000"
    environment:
      CONNECT_URL: "http://${PUBLIC_IP}:8083/,http://${PUBLIC_IP}:8084/"
      PROXY: "true"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_CONNECT_UI_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_CMAK_enable) | default(false) %}
  #  ================================== Cluster Manager for Apache Kafka (CMAK) ========================================== #
  cmak:
    image: trivadis/cmak:{{__KAFKA_CMAK_version}}
    container_name: cmak
    hostname: cmak
    labels:
      com.platys.webui.title: 'Cluster Manager for Apache Kafka UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28104"
    depends_on:
      - zookeeper-1
      - kafka-1
    ports:
      - "28104:9000"
    environment:
      ZK_HOSTS: 'zookeeper-1:2181'
      APPLICATION_SECRET: 'abc123!'
      KAFKA_MANAGER_AUTH_ENABLED: {{KAFKA_CMAK_auth_enabled}}
      KAFKA_MANAGER_USERNAME: {{KAFKA_CMAK_username}}
      KAFKA_MANAGER_PASSWORD: {{KAFKA_CMAK_password}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_CMAK_enable #}


{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_KAFDROP_enable) | default(false) %}
  #  ================================== Kafdrop ========================================== #
  kafdrop:
    image: obsidiandynamics/kafdrop:{{__KAFKA_KAFDROP_version}}
    container_name: kafdrop
    hostname: kafdrop
    labels:
      com.platys.webui.title: 'Kafdrop UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28105"
    ports:
      - "28105:9020"
    environment:
      KAFKA_BROKERCONNECT: kafka-1:19092
      JVM_OPTS: "-Xms32M -Xmx64M"
      SERVER_SERVLET_CONTEXTPATH: "/"
      SERVER_PORT: 9020
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_KAFDROP_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_KADMIN_enable) | default(false) %}
  #  ================================== KAdmin ========================================== #
  kadmin:
    image: bettercloud/kadmin:{{__KAFKA_KADMIN_version}}
    container_name: kadmin
    hostname: kadmin
    labels:
      com.platys.webui.title: 'KAdmin UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28106"
    ports:
      - "28106:8080"
    environment:
      ZOOKEEPER_HOST: zookeeper-1:2181
      KAFKA_HOST: kafka-1:19092
      #SECURITY_PROTOCOL: SSL
      TRUST_STORE_LOCATION: ssl/client.truststore.jks
      TRUST_STORE_PASSWORD: password
      KEY_STORE_LOCATION: ssl/server.keystore.jks
      KEY_STORE_PASSWORD: password
      KEY_PASSWORD: password
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_KADMIN_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_AKHQ_enable) | default(false) %}
  #  ================================== Apache Kafka HQ (AKHQ) ========================================== #
  akhq:
    image: tchiotludo/akhq:{{__KAFKA_AKHQ_version}}
    container_name: akhq
    hostname: akhq
    labels:
      com.platys.webui.title: 'Apache Kafka AQ UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28107"
    ports:
      - 28107:8080
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: '{{ns.bootstrapServers}}'
    {% if ( KAFKA_SCHEMA_REGISTRY_enable ) | default(false) %}
              schema-registry:
                url: "http://schema-registry-1:8081"
    {% endif -%}   {#  SCHEMA_REGISTRY_enable #}
    {% if ( KAFKA_CONNECT_enable ) | default(false) %}
              connect:
      {% for num in range(KAFKA_CONNECT_nodes | default(1) ) %}
          {% set port = 8083 + loop.index - 1 %}
                - name: "kafka-connect-{{loop.index}}"
                  url: "http://kafka-connect-1:{{port}}"
      {% endfor -%}
    {% endif -%}   {#  KAFKA_CONNECT_enable #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    depends_on:
      - kafka-1
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_KAFKAHQ_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_UI_enable) | default(false) %}
  #  ================================== Apache Kafka UI ========================================== #
  kafka-ui:
    image: provectuslabs/kafka-ui:{{__KAFKA_UI_version}}
    container_name: kafka-ui
    hostname: kafka-ui
    labels:
      com.platys.webui.title: 'Apache Kafka UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28179"
    ports:
      - 28179:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: '{{ns.bootstrapServers}}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_UI_enable #}

{% if ((KAFKA_enable or external['KAFKA_enable']) and KAFKA_BURROW_enable) | default(false) %}
  burrow:
    image: gschmutz/linkedin-burrow:{{__KAFKA_BURROW_version}}
    container_name: burrow
    hostname: burrow
    labels:
      com.platys.webui.title: 'Burrow UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28110"
    ports:
      - 28110:8000
    depends_on:
      - zookeeper-1
      - kafka-1
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/burrow:/etc/burrow/
      - ./tmp:/var/tmp/burrow
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  burrow-ui:
    image: generalmills/burrowui:{{__KAFKA_BURROW_UI_version}}
    container_name: burrow-ui
    hostname: burrow-ui
    labels:
      com.platys.webui.title: 'Burrow UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28108"
    ports:
      - 28108:3000
    depends_on:
      - zookeeper-1
      - kafka-1
    environment:
      - BURROW_HOME: "http://${PUBLIC_IP}:28110/v3/kafka"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  burrow-dashboard:
    image: joway/burrow-dashboard:{{__KAFKA_BURROW_DASHBOARD_version}}
    container_name: burrow-dashboard
    hostname: burrow-dashboard
    ports:
      - 28109:80
    environment:
      - BURROW_BACKEND: "http://${PUBLIC_IP}:28110"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    depends_on:
      - zookeeper-1
      - kafka-1
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_BURROW_enable #}

{% if HADOOP_enable | default(false) %}

  #  ================================== Apache Hadoop ========================================== #
  namenode:
    image: bde2020/hadoop-namenode:{{__HADOOP_image_version}}
    container_name: namenode
    hostname: namenode
    labels:
      com.mdps.service.webui.name: "Hadoop NameNode UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9870"
    ports:
      - "9870:9870"
    env_file:
      - ./conf/hadoop.env
    environment:
      CLUSTER_NAME: 'test'
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/namenode:/hadoop/dfs/name
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {% for num in range(HADOOP_datanodes| default(1) ) %}
    {% set external_port = 9864 + loop.index - 1 %}

  datanode-{{loop.index}}:
    image: bde2020/hadoop-datanode:{{__HADOOP_image_version}}
    container_name: datanode-{{loop.index}}
    labels:
      com.platys.webui.title: 'Hadoop DataNode-{{loop.index}} UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:{{external_port}}"
    ports:
      - "{{external_port}}:9864"
    env_file:
      - ./conf/hadoop.env
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SERVICE_PRECONDITION: "namenode:9870"
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/datanode-{{loop.index}}:/hadoop/dfs/data
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endfor %}

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:{{__HADOOP_image_version}}
    container_name: resourcemanager
    hostname: resourcemanager
    labels:
      com.platys.webui.title: "YARN RessourceManager UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:18088"
    ports:
      - "18088:8088"
    depends_on:
      - namenode
      - datanode-1
    env_file:
      - ./conf/hadoop.env
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      YARN_CONF_yarn_resourcemanager_webapp_address: 'resourcemanager:8088'
      YARN_CONF_yarn_nodemanager_webapp_address: 'nodemanager:8042'
      YARN_CONF_yarn_timeline___service_webapp_address: '${PUBLIC_IP}:18188'
      YARN_CONF_yarn_log_server_url: '${PUBLIC_IP}:18188'
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  nodemanager:
    image: bde2020/hadoop-nodemanager:{{__HADOOP_image_version}}
    container_name: nodemanager
    hostname: nodemanager
    labels:
      com.platys.webui.title: "YARN NodeManager UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:18042"
    ports:
      - "18042:8042"
    depends_on:
      - namenode
      - datanode-1
    env_file:
      - ./conf/hadoop.env
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      YARN_CONF_yarn_resourcemanager_webapp_address: 'resourcemanager:8088'
      YARN_CONF_yarn_nodemanager_webapp_address: 'nodemanager:8042'
      YARN_CONF_yarn_timeline___service_webapp_address: '${PUBLIC_IP}:18188'
      YARN_CONF_yarn_log_server_url: '${PUBLIC_IP}:18188'
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  historyserver:
    image: bde2020/hadoop-historyserver:{{__HADOOP_image_version}}
    container_name: historyserver
    hostname: historyserver
    labels:
      com.platys.webui.title: "YARN History Server"
      com.platys.webui.url: "http://${PUBLIC_IP}:18188"
    ports:
      - "18188:8188"
    depends_on:
      - namenode
      - datanode-1
    env_file:
      - ./conf/hadoop.env
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SERVICE_PRECONDITION: "namenode:9870 datanode-1:9864 resourcemanager:18088"
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {% if SQOOP_enable | default(false) %}
  sqoop:
    image: trivadis/apache-sqoop:{{__SQOOP_version}}
    container_name: sqoop
    hostname: sqoop
    env_file:
      - ./conf/hadoop.env
    environment:
    {%if MINIO_enable or external['S3_enable'] | default(false) %}
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
    {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: tail -f /dev/null
    restart: {{container_restart_policy}}
  {% endif %}   {#  SQOOP_enable #}

{% endif %}   {#  HADOOP_enable #}

{% if SPARK_enable | default(false) %}
  #  ================================== Apache Spark 2.x ========================================== #
  spark-master:
    image: trivadis/apache-spark-master:{{__SPARK_version}}
    container_name: spark-master
    hostname: spark-master
    labels:
      com.platys.webui.title: 'Spark UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:8080"
    ports:
      - 6066:6066
      - 7077:7077
      - 8080:8080
      - "4040-4044:4040-4044"
    env_file:
      - ./conf/hadoop.env
    environment:
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
  {% endif %}
      SPARK_PUBLIC_DNS: ${PUBLIC_IP}
      SPARK_MASTER_OPTS: '{{SPARK_master_opts if SPARK_master_opts is defined and SPARK_master_opts else omit }}'
      INIT_DAEMON_STEP: setup_spark
      MASTER: spark://spark-master:7077
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars: {{SPARK_jars}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_cores_max: {{SPARK_cores_max if SPARK_cores_max is defined and SPARK_cores_max else omit }}
      SPARK_DEFAULTS_CONF_spark_executor_memory: {{SPARK_executor_memory if SPARK_executor_memory is defined and SPARK_executor_memory else omit }}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {% for num in range(SPARK_workers | default(1) ) %}
      {% set external_port = 28111 + loop.index - 1 %}
      {% set webui_port = 28111 + loop.index - 1 %}

  spark-worker-{{loop.index}}:
    image: trivadis/apache-spark-worker:{{__SPARK_version}}
    container_name: spark-worker-{{loop.index}}
    hostname: spark-worker-{{loop.index}}
    depends_on:
      - spark-master
    ports:
      - "{{external_port}}:{{webui_port}}"
    env_file:
      - ./conf/hadoop.env
    environment:
      SPARK_MASTER: spark://spark-master:7077
      SPARK_WORKER_WEBUI_PORT: "{{webui_port}}"
      SPARK_WORKER_CORES: '{{SPARK_worker_cores if SPARK_worker_cores is defined and SPARK_worker_cores else omit }}'
      SPARK_WORKER_MEMORY: '{{SPARK_worker_memory if SPARK_worker_memory is defined and SPARK_worker_memory else omit }}'
      SPARK_WORKER_OPTS: '{{SPARK_worker_opts if SPARK_worker_opts is defined and SPARK_worker_opts else omit }}'
      SPARK_PUBLIC_DNS: ${PUBLIC_IP}
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
  {% endif -%}    {#  MINIO_enable #}
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars: {{SPARK_jars}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_cores_max: {{SPARK_cores_max if SPARK_cores_max is defined and SPARK_cores_max else omit }}
      SPARK_DEFAULTS_CONF_spark_executor_memory: {{SPARK_executor_memory if SPARK_executor_memory is defined and SPARK_executor_memory else omit }}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {% endfor %}

  {% if SPARK_HISTORY_enable | default(false) %}
  spark-history:
    image: trivadis/apache-spark-worker:{{__SPARK_version}}
    command: /spark/bin/spark-class org.apache.spark.deploy.history.HistoryServer
    container_name: spark-history
    hostname: spark-history
    labels:
      com.platys.webui.title: "Spark History Server"
      com.platys.webui.url: "http://${PUBLIC_IP}:28117"
      com.platys.restapi.title: "Spark History Server"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28117/api/v1"
    expose:
      - 18080
    ports:
      - 28117:18080
    environment:
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
  {% endif -%}    {#  MINIO_enable #}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_cores_max: {{SPARK_cores_max if SPARK_cores_max is defined and SPARK_cores_max else omit }}
      SPARK_DEFAULTS_CONF_spark_executor_memory: {{SPARK_executor_memory if SPARK_executor_memory is defined and SPARK_executor_memory else omit }}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  SPARK_HISTORY_enable #}

  {% if SPARK_THRIFT_enable | default(false) %}
  spark-thrift-server:
    image: trivadis/apache-spark-master:{{__SPARK_version}}
    container_name: spark-thrift-server
    ports:
      - "28118:10000"
    env_file:
      - ./conf/hadoop.env
    environment:
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
  {% endif -%}    {#  MINIO_enable #}
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars: {{SPARK_jars}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: bash -c "sleep 2m && /spark/sbin/start-thriftserver.sh && tail -f /spark/logs/spark--org.apache.spark.sql.hive.thriftserver.HiveThriftServer2-*.out"
  {% endif %}   {#  SPARK_THRIFT_enable #}

{% endif %}   {#  SPARK_enable #}

{% if SPARK_enable and LIVY_enable | default(false) %}
  #  ================================== Apache Livy ========================================== #
  livy:
    image: trivadis/apache-livy:{{__LIVY_version}}
    container_name: livy
    hostname: livy
    labels:
      com.platys.webui.title: "Livy Server UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8998/ui#"
      com.platys.restapi.title: "Livy API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:8998/"
    env_file:
      - ./conf/hadoop.env
    environment:
      SPARK_MASTER: spark://spark-master:7077
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: 'http://minio:9000'
      CORE_CONF_fs_s3a_path_style_access: 'true'
      HIVE_SITE_CONF_fs_s3a_endpoint: http://minio:9000
      HIVE_SITE_CONF_fs_s3a_access_key: V42FCGRVMK24JJ8DHUYG
      HIVE_SITE_CONF_fs_s3a_secret_key: bKhWxVF3kQoLY9kFmt91l+tDrEoZjqnWXzY9Eza
      HIVE_SITE_CONF_fs_s3a_path_style_access: 'true'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: http://minio:9000
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: 'true'
  {% endif -%}    {#  MINIO_enable #}
      DEPLOY_MODE: client
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars: {{SPARK_jars}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_cores_max: {{SPARK_cores_max if SPARK_cores_max is defined and SPARK_cores_max else omit }}
      SPARK_DEFAULTS_CONF_spark_executor_memory: {{SPARK_executor_memory if SPARK_executor_memory is defined and SPARK_executor_memory else omit }}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    ports:
      - "8998:8998"
    restart: always
{% endif %}   {#  SPARK_livy_enable #}

{% if HIVE_SERVER_enable and HADOOP_enable | default(false) %}
  #  ================================== Apache Hive Server ========================================== #
  hive-server:
    image: trivadis/apache-hive:{{__HIVE_version}}-{{__HIVE_version_suffix}}
    container_name: hive-server
    hostname: hive-server
    labels:
      com.platys.webui.title: "Hive Server UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:10001"
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    env_file:
      - ./conf/hadoop.env
    environment:
      CORE_CONF_fs_defaultFS: "hdfs://namenode:9000"
      HIVE_SITE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
      MAPRED_CONF_yarn_app_mapreduce_am_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_map_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
      MAPRED_CONF_mapreduce_reduce_env: HADOOP_MAPRED_HOME=/opt/hadoop-{{__HADOOP_version}}/
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
  {% endif -%}    {#  MINIO_enable #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  HIVE_SERVER_enable and HADOOP_enable #}

{% if HIVE_METASTORE_enable | default(false) %}
  #  ================================== Apache Hive Metastore ========================================== #
  hive-metastore:
    image: trivadis/apache-hive:{{__HIVE_version}}-{{__HIVE_version_suffix}}
    container_name: hive-metastore
    hostname: hive-metastore
    ports:
      - "9083:9083"
    env_file:
      - ./conf/hadoop.env
    environment:
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      HIVE_SITE_CONF_hive_metastore_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
  {% endif -%}   {#  HADOOP_enable or MINIO_enable #}
      SERVICE_PRECONDITION: "hive-metastore-db:5432"
  {% if ATLAS_install_hive_hook | default(false) %}
      HIVE_SITE_CONF_hive_exec_post_hooks: "org.apache.atlas.hive.hook.HiveHook"
      HIVE_AUX_JARS_PATH: "/opt/atlas/hook/hive"
  {% endif -%}   {#  ATLAS_install_hive_hook #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
  {% if ATLAS_install_hive_hook | default(false) %}
      - ./conf/atlas/atlas-application.properties:/opt/hive/conf/atlas-application.properties
      - ./plugins/hive-server/apache-atlas-hive-hook/hook:/opt/atlas/hook
  {% endif -%}   {#  ATLAS_install_hive_hook #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: /opt/hive/bin/hive --service metastore
    restart: {{container_restart_policy}}

  hive-metastore-db:
    image: trivadis/apache-hive-metastore-postgresql:{{__HIVE_METASTORE_DB_version}}
    container_name: hive-metastore-db
    hostname: hive-metastore-db
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  HIVE_enable #}

{% if RANGER_enable  | default(false) %}
  #  ================================== Apache Ranger ========================================== #
  ranger-admin:
    image: trivadis/apache-ranger:{{__RANGER_version}}
    container_name: ranger-admin
    hostname: ranger-admin
    stdin_open: true
    tty: true
    depends_on:
      - postgresql
    ports:
      - "6080:6080"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  ranger-postgresql:
    image: postgres:{{__RANGER_postgresql_version}}
    container_name: ranger-postgresql
    hostname: ranger-postgresql
    environment:
      POSTGRES_PASSWORD: abc123!
      POSTGRES_USER: postgres
      POSTGRES_DB: ranger-admin
      PGDATA: /var/lib/postgresql/data
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/ranger/postgresql:/docker-entrypoint-initdb.d/
    {% if RANGER_postgresql_volume_map_data %}
      - ./container-volume/ranger/postgresql/data:/var/lib/postgresql/data:Z
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}{% endif %}
{#  RANGER_enable #}

{% if ATLAS_enable  | default(false) %}
  #  ================================== Apache Atlas ========================================== #
  atlas:
    image: trivadis/apache-atlas:{{__ATLAS_version}}
    container_name: atlas
    hostname: atlas
    labels:
      com.platys.webui.title: "Atlas UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:21000"
    depends_on:
      - zookeeper-1
      - kafka-1
      - atlas-kafka-setup
      - cassandra-atlas
    ports:
      - 21000:21000     # dont change the port without also changing in the properties file as well as in the ATLAS_PROVISION_EXAMPLES script
    environment:
      NONE: "not_used_just_for_syntax"
  {% if ATLAS_provision_atlas_sample_data  | default(false) %}
      ATLAS_PROVISION_EXAMPLES: true
  {% endif %}
  {% if ATLAS_provision_amundsen_sample_data  | default(false) %}
      ATLAS_KICKSTART_AMUNDSEN: true
  {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/atlas/atlas-application.properties:/opt/atlas/conf/atlas-application.properties
      - ./conf/atlas/users-credentials.properties:/opt/atlas/conf/users-credentials.properties
      - ./conf/atlas/credentials:/tmp/credentials
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {% if KAFKA_enable  | default(false) %}
  atlas-kafka-setup:
    image: confluentinc/cp-kafka:{{__CONFLUENT_PLATFORM_version}}
    hostname: atlas-kafka-setup
    container_name: atlas-kafka-setup
    depends_on:
      - kafka-1
      - zookeeper-1
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka-1:19092 1 120 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper-1:2181 --partitions 1 --replication-factor 1 --topic ATLAS_HOOK && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper-1:2181 --partitions 1 --replication-factor 1 --topic ATLAS_ENTITIES'"
  {% endif %} {#  KAFKA_enable #}

  cassandra-atlas:
    image: cassandra:{{__CASSANDRA_version}}
    container_name: cassandra-atlas
    hostname: cassandra-atlas
    ports:
      - "19042:9042"
      - "19160:9160"
    environment:
      CASSANDRA_START_RPC: true
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  elasticsearch-atlas:
    image: elasticsearch:5.6.8
    container_name: elasticsearch-atlas
    hostname: elasticsearch-atlas
    ports:
      - "19200:9200"
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "http.host=0.0.0.0"
      - "network.host=0.0.0.0"
      - "transport.host=127.0.0.1"
      - "cluster.name=docker-cluster"
      - "xpack.security.enabled=false"
      - "discovery.zen.minimum_master_nodes=1"
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ATLAS_enable #}

{% if DATAHUB_enable  | default(false) %}
  #  ================================== Datahub ========================================== #
  datahub-gms:
    image: linkedin/datahub-gms:{{__DATAHUB_version}}
    hostname: datahub-gms
    container_name: datahub-gms
    depends_on:
      - datahub-elasticsearch
      - kafka-1
      - datahub-mysql
      - schema-registry-1
      - datahub-neo4j
    ports:
      - "28142:8080"
    environment:
      - EBEAN_DATASOURCE_USERNAME=datahub
      - EBEAN_DATASOURCE_PASSWORD=datahub
      - EBEAN_DATASOURCE_HOST=datahub-mysql:3306
      - EBEAN_DATASOURCE_URL=jdbc:mysql://datahub-mysql:3306/datahub?verifyServerCertificate=false&useSSL=true&useUnicode=yes&characterEncoding=UTF-8
      - EBEAN_DATASOURCE_DRIVER=com.mysql.jdbc.Driver
      - KAFKA_BOOTSTRAP_SERVER=kafka-1:19092
      - KAFKA_SCHEMAREGISTRY_URL=http://schema-registry-1:8081
      - ELASTICSEARCH_HOST=datahub-elasticsearch
      - ELASTICSEARCH_PORT=9200
      - NEO4J_HOST=datahub-neo4j:7474
      - NEO4J_URI=bolt://${PUBLIC_IP}:17688
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=abc123!
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  datahub-frontend:
    image: linkedin/datahub-frontend:{{__DATAHUB_version}}
    hostname: datahub-frontend
    container_name: datahub-frontend
    labels:
      com.platys.webui.title: "DataHub UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28143"
    depends_on:
      - datahub-gms
    ports:
      - "28143:9001"
    environment:
      - DATAHUB_GMS_HOST=datahub-gms
      - DATAHUB_GMS_PORT=8080
      - DATAHUB_SECRET=abc123!
      - DATAHUB_APP_VERSION=1.0
      - DATAHUB_PLAY_MEM_BUFFER_SIZE=10MB
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  datahub-mae-consumer:
    image: linkedin/datahub-mae-consumer:{{__DATAHUB_version}}
    hostname: datahub-mae-consumer
    container_name: datahub-mae-consumer
    depends_on:
      - kafka-setup
      - datahub-elasticsearch
      - datahub-neo4j
    ports:
        - "28144:9091"
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka-1:19092
      - KAFKA_SCHEMAREGISTRY_URL=http://schema-registry-1:8081
      - ELASTICSEARCH_HOST=datahub-elasticsearch
      - ELASTICSEARCH_PORT=9200
      - NEO4J_HOST=datahub-neo4j:7474
      - NEO4J_URI=bolt://${PUBLIC_IP}:17688
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=abc123!
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  datahub-mce-consumer:
    image: linkedin/datahub-mce-consumer:{{__DATAHUB_version}}
    hostname: datahub-mce-consumer
    container_name: datahub-mce-consumer
    depends_on:
      - kafka-setup
      - datahub-gms
    ports:
        - "28145:9090"
    environment:
      - KAFKA_BOOTSTRAP_SERVER=kafka-1:19092
      - KAFKA_SCHEMAREGISTRY_URL=http://schema-registry-1:8081
      - GMS_HOST=datahub-gms
      - GMS_PORT=8080
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  datahub-mysql:
    image: mysql:5.7
    hostname: datahub-mysql
    container_name: datahub-mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: 'datahub'
      MYSQL_USER: 'datahub'
      MYSQL_PASSWORD: 'datahub'
      MYSQL_ROOT_PASSWORD: 'datahub'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/datahub/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    {% if DATAHUB_volume_map_data %}
      - "./container-volume/datahub/mysql:/var/lib/mysql"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  datahub-neo4j:
    image: neo4j:4.0.6
    hostname: datahub-neo4j
    container_name: datahub-neo4j
    ports:
      - "17475:7474"
      - "17688:7687"
    environment:
      - NEO4J_AUTH=neo4j/abc123!
      - NEO4J_dbms_default__database=graph.db
      - NEO4J_dbms_allow__upgrade=true
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if DATAHUB_volume_map_data %}
      - ./container-volume/datahub/neo4j:/data
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  datahub-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.8
    container_name: datahub-elasticsearch
    hostname: datahub-elasticsearch
    ports:
      - "19202:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if DATAHUB_volume_map_data %}
      - ./container-volume/datahub/elasticsearch:/usr/share/elasticsearch/data
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  # This "container" is a workaround to pre-create search indices
  datahub-elasticsearch-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.8
    hostname: datahub-elasticsearch-setup
    container_name: datahub-elasticsearch-setup
    depends_on:
      - datahub-elasticsearch
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/datahub/elasticsearch:/init
    {% if DATAHUB_volume_map_data %}
      - ./container-volume/mysql:/var/lib/mysql
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - bash
      - -c
      - |
        echo "Waiting for Elasticsearch to start ⏳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://datahub-elasticsearch:9200/) -ne 200 ] ; do
          echo -e $$(date) " Elasticsearch listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://datahub-elasticsearch:9200/) " (waiting for 200)"
          sleep 5
        done

        curl -XPUT http://datahub-elasticsearch:9200/corpuserinfodocument --data @/init/corpuser-index-config.json
        curl -XPUT http://datahub-elasticsearch:9200/dataprocessdocument --data @/init/dataprocess-index-config.json
        curl -XPUT http://datahub-elasticsearch:9200/datasetdocument --data @/init/dataset-index-config.json

  # This "container" is a workaround to pre-create topics
  kafka-setup:
    image: confluentinc/cp-kafka:{{__CONFLUENT_PLATFORM_version}}
    hostname: kafka-setup
    container_name: kafka-setup
    depends_on:
      - kafka-1
      - schema-registry-1
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka-1:19092 1 60 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper-1:2181 --partitions 1 --replication-factor 1 --topic MetadataAuditEvent_v4 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper-1:2181 --partitions 1 --replication-factor 1 --topic MetadataChangeEvent_v4 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper-1:2181 --partitions 1 --replication-factor 1 --topic FailedMetadataChangeEvent_v4'"
{% endif %}   {#  DATALAB_enable #}

{% if AMUNDSEN_enable  | default(false) %}
  #  ================================== Amundsen ========================================== #
  amundsenfrontend:
    image: amundsendev/amundsen-frontend:{{__AMUNDSEN_FRONTEND_version}}
    container_name: amundsenfrontend
    hostname: amundsenfrontend
    labels:
      com.platys.webui.title: "Amundsen UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:5000"
    depends_on:
      - amundsenmetadata
      - amundsensearch
    ports:
      - 5000:5000
    environment:
      - METADATASERVICE_BASE=http://amundsenmetadata:5000
      - SEARCHSERVICE_BASE=http://amundsensearch:5000
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  amundsensearch:
    image: amundsendev/amundsen-search:{{__AMUNDSEN_SEARCH_version}}
    container_name: amundsensearch
    labels:
      com.platys.restapi.title: "Amundsensearch REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:5001"
    ports:
      - 5001:5000
    environment:
  {%if (AMUNDSEN_metastore | lower) == 'amundsen' | default(false) %}
      - PROXY_ENDPOINT=amundsen-elasticsearch
  {% else -%}   {#  AMUNDSEN_metastore #}
      - CREDENTIALS_PROXY_USER=admin
      - CREDENTIALS_PROXY_PASSWORD=abc123!
      - PROXY_ENDPOINT=atlas:21000
      - PROXY_CLIENT=ATLAS
  {% endif -%}   {#  AMUNDSEN_metastore #}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  amundsenmetadata:
    image: amundsendev/amundsen-metadata:{{__AMUNDSEN_METADATA_version}}
    container_name: amundsenmetadata
    hostname: amundsenmetadata
    labels:
      com.platys.restapi.title: "Amundsensearch REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:5002"
    ports:
      - 5002:5000
    environment:
  {%if (AMUNDSEN_metastore | lower) == 'amundsen' | default(false) %}
      - PROXY_HOST=bolt://amundsen-neo4j
  {% else -%}   {#  AMUNDSEN_metastore #}
      - PROXY_ENDPOINT=amundsen-elasticsearch
      - CREDENTIALS_PROXY_USER=admin
      - CREDENTIALS_PROXY_PASSWORD=abc123!
      - PROXY_HOST=atlas
      - PROXY_PORT=21000
      - PROXY_CLIENT=ATLAS
  {% endif -%}   {#  AMUNDSEN_metastore #}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {%if (AMUNDSEN_edition | lower) == 'amundsen-metastore' | default(false) %}
  amundsen-neo4j:
    image: neo4j:3.3.0
    container_name: amundsen-neo4j
    hostname: amundsen-neo4j
    labels:
      com.platys.webui.title: "Amundsen Neo4J UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:17474"
    ulimits:
      nofile:
        soft: 40000
        hard: 40000
    ports:
      - 17474:7474
      - 17687:7687
    environment:
      - NEO4J_AUTH=neo4j/test
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/amundsen/neo4j/conf:/conf
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  amundsen-elasticsearch:
    image: elasticsearch:6.7.0
    container_name: amundsen-elasticsearch
    hostname: amundsen-elasticsearch
    labels:
      com.platys.restapi.title: "Amundsen ElasticSearch REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:19201"
    ports:
      - 19201:9200
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  AMUNDSEN_edition #}
{% endif %}   {#  AMUNDSEN_enable #}

{% if MARQUEZ_enable  | default(false) %}
  #  ================================== Marquez ========================================== #
  marquez-web:
    image: marquezproject/marquez-web:{{__MARQUEZ_WEB_version}}
    container_name: marquez-web
    hostname: marquez-web
    labels:
      com.platys.webui.title: "Marquez UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:3005"
    depends_on:
      - marquez
    ports:
      - "3005:3000"
    environment:
      - MARQUEZ_HOST=marquez
      - MARQUEZ_PORT=5000
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  marquez:
    image: marquezproject/marquez:{{__MARQUEZ_version}}
    container_name: marquez
    hostname: marquez
    labels:
      com.platys.restapi.title: "Marquez REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:5010/api/v1"
      com.platys.webui.title: "Marquez UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:5011"
    depends_on:
      - marquez-db
    ports:
      - "5010:5000"
      - "5011:5001"
    environment:
      - MARQUEZ_PORT=5000
      - MARQUEZ_ADMIN_PORT=5001
      - MARQUEZ_CONFIG=/usr/src/app/config.yml
      - POSTGRES_HOST=marquez-db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=marquez
      - POSTGRES_USER=marquez
      - POSTGRES_PASSWORD=abc123!
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
      - ./conf/marquez/marquez.yml:/usr/src/app/config.yml
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint: ["./wait-for-it.sh", "marquez-db:5432", "--", "./entrypoint.sh"]
    restart: {{container_restart_policy}}

  marquez-db:
    image: "postgres:9.6"
    container_name: marquez-db
    hostname: marquez-db
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=abc123
      - MARQUEZ_DB=marquez
      - MARQUEZ_USER=marquez
      - MARQUEZ_PASSWORD=abc123!
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/marquez/postgresql/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    {% if MARQUEZ_volume_map_data %}
      - "./container-volume/marquez/postgresql:/var/lib/postgresql/data"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {% if MARQUEZ_provision_marquez_sample_data | default(false) %}
  marquez-db-seed:
    image: "celfring/jq"
    container_name: marquez-db-seed
    hostname: marquez-db-seed
    depends_on:
      - marquez-db
    environment:
      - MARQUEZ_HOST=marquez
      - MARQUEZ_PORT=5000
      - MARQUEZ_ADMIN_PORT=5001
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/docker/wait-for-it.sh:/usr/src/app/wait-for-it.sh
      - ./init/marquez/postgresql/seed-db.sh:/seed-db.sh
      - ./init/marquez/postgresql/data:/data
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint: ["/usr/src/app/wait-for-it.sh", "marquez:5000", "--", "./seed-db.sh"]
  {% endif %}   {# MARQUEZ_provision_marquez_sample_data #}
{% endif %}   {#  MARQUEZ_enable #}

{% if (HUE_enable) | default(false) %}
  #  ================================== Apache Hue ========================================== #
  hue:
    image: gethue/hue:{{__HUE_version}}
    container_name: hue
    hostname: hue
    dns: 8.8.8.8
    depends_on:
      - hue-db
      - solr
    ports:
      - "8888:8888"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/hue/hue.ini:/usr/share/hue/desktop/conf/hue.ini
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  hue-db:
    image: postgres:{{__HUE_POSTGRES_version}}
    container_name: hue-db
    hostname: hue-db
    environment:
      POSTGRES_DB: hue
      POSTGRES_PASSWORD: hue
      POSTGRES_USER: hue
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

{% endif %}   {#  HUE_enable #}

{%if STREAMSETS_enable | default(false) %}
  #  ================================== StreamSets DataCollector ========================================== #
  streamsets-1:
    image: streamsets/datacollector:{{__STREAMSETS_version}}
    container_name: streamsets-1
    hostname: streamsets-1
    labels:
      com.platys.webui.title: "StreamSets Data Collector UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:18630"
      com.platys.restapi.title: "StreamSets Data Collector REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:18630/collector/restapi"
    ports:
      - "18630:18630"
    {%if STREAMSETS_activate_https | default(false) %}
      - "18629:18629"
    {% endif %}
  {% for num in range(STREAMSETS_additional_port_mappings | default(0) ) %}
      {% set external_port = 28500 + loop.index - 1 %}
      {% set webui_port = 28500 + loop.index - 1 %}
      - "{{external_port}}:{{webui_port}}"
  {% endfor %}
    environment:
      SDC_OFFSET_DIRECTORY: /data/custom-offset-el
      SDC_INSTALL_STAGES: "{{STREAMSETS_stage_libs}}"
      SDC_INSTALL_ENTERPRISE_STAGES: "{{STREAMSETS_enterprise_stage_libs}}"
    {%if STREAMSETS_install_pipelines is defined and STREAMSETS_install_pipelines | default(false) %}
      SDC_INSTALL_PIPELINES_FROM: '/tmp/pipelines'
    {% endif %}
      SDC_JAVA_OPTS: "-Xmx2g -Xms2g"
      SDC_JAVA8_OPTS: "-XX:+UseG1GC"
      SDC_CONF_MONITOR_MEMORY: "true"
      SDC_CONF_PIPELINE_MAX_RUNNERS_COUNT: 50
    {% if STREAMSETS_http_authentication is defined and STREAMSETS_http_authentication %}
      SDC_CONF_http_authentication: "{{STREAMSETS_http_authentication}}"
    {% endif %}
    {%if STREAMSETS_activate_https | default(false) %}
      SDC_CONF_HTTPS_PORT: 18629
    {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if STREAMSETS_volume_map_data %}
      - ./container-volume/streamsets-1/data:/data:Z
    {% endif %}
    {% if STREAMSETS_volume_map_logs %}
      - ./container-volume/streamsets-1/logs:/logs:Z
    {% endif %}
    {% if STREAMSETS_volume_map_security_policy %}
      - ./conf.override/streamsets/sdc-security.policy:/etc/sdc/sdc-security.policy:Z
    {% endif %}
    {%if STREAMSETS_install_pipelines is defined and STREAMSETS_install_pipelines | default(false) %}
      - ./scripts/streamsets/pipelines:/tmp/pipelines
    {% endif %}
      - ./conf/streamsets/pre-docker-entrypoint.sh:/pre-docker-entrypoint.sh
      - ./plugins/streamsets/user-libs:/opt/streamsets-datacollector-user-libs:Z
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    ulimits:
      nofile:
        soft: 32768
        hard: 32768
    user: "{{uid | default(1000)}}"
    command:
      - "dc"
      - "-exec"
    entrypoint:
      - "/pre-docker-entrypoint.sh"
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSETS_enable  #}

{%if STREAMSETS_TRANSFORMER_enable | default(false) %}
  #  ================================== StreamSets Transformer ========================================== #
  streamsets-transformer-1:
    image: streamsets/transformer:{{__STREAMSETS_TRANSFORMER_version}}
    container_name: streamsets-transformer-1
    hostname: streamsets-transformer-1
    labels:
      com.platys.webui.title: "StreamSets Transformer UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:19630"
      com.platys.restapi.title: "StreamSets Transformer REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:19630/collector/restapi"
    ports:
      - "19630:19630"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if STREAMSETS_TRANSFORMER_volume_map_data %}
      - ./container-volume/streamsets-transformer-1:/data:Z
    {% endif %}
#      - ./container-volume/streamsets-transformer/data:/data:Z
#      - ./streamsets-extras/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/postgresql-42.2.6.jar:/opt/streamsets-datacollector-{{__STREAMSETS_version}}/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/postgresql-42.2.6.jar:Z
#      - ./streamsets-extras/libs-common-lib:/opt/streamsets-datacollector-{{__STREAMSETS_version}}/libs-common-lib:Z
#      - ./streamsets-extras/user-libs:/opt/streamsets-datacollector-user-libs:Z
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSETS_TRANSFORMER_enable  #}

{%if STREAMSETS_EDGE_enable | default(false) %}
  #  ================================== StreamSets DataCollector Edge ========================================== #
  streamsets-edge-1:
    image: streamsets/datacollector-edge:{{__STREAMSETS_EDGE_version}}
    container_name: streamsets-edge-1
    hostname: streamsets-edge-1
    labels:
      com.platys.restapi.title: "StreamSets Data Collector Edge REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:18633"
    ports:
      - "18633:18633"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSETS_enable  #}

{%if NIFI_enable | default(false) %}
  #  ================================== NiFi ========================================== #
  nifi-1:
    image: apache/nifi:{{__NIFI_version}}
    container_name: nifi-1
    hostname: nifi-1
    labels:
      com.platys.webui.title: "Apache NiFi UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:18080/nifi"
    ports:
      # HTTP
      - "18080:8080"
      # Remote Input Socket
      - 10005:10000/tcp
    environment:
      NIFI_WEB_HTTP_PORT: '8080'
      NIFI_JVM_HEAP_INIT: {{ NIFI_jvm_heap_init if NIFI_jvm_heap_init is defined and NIFI_jvm_heap_init != None else omit }}
      NIFI_JVM_HEAP_MAX: {{ NIFI_jvm_heap_max if NIFI_jvm_heap_max is defined and NIFI_jvm_heap_max != None else omit }}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if NIFI_volume_map_data %}
      - ./container-volume/nifi/database_repository:/opt/nifi/nifi-current/database_repository
      - ./container-volume/nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      - ./container-volume/nifi/content_repository:/opt/nifi/nifi-current/content_repository
      - ./container-volume/nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      - ./container-volume/nifi/state:/opt/nifi/nifi-current/state
    {% endif %}
    {% if NIFI_volume_map_logs %}
      - ./container-volume/nifi/logs:/opt/nifi/nifi-current/logs
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {%if NIFI_REGISTRY_enable | default(false) %}
  #  ================================== NiFi Registry ========================================== #
  nifi-registry:
    image: apache/nifi-registry:{{__NIFI_REGISTRY_version}}
    container_name: nifi-registry
    hostname: nifi-registry
    labels:
      com.platys.webui.title: "NiFi Registry UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:19090/nifi-registry"
    ports:
      - 19090:19090
    environment:
      NIFI_REGISTRY_WEB_HTTP_PORT: 19090
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  NIFI_REGISTRY_enable  #}
{% endif %}   {#  NIFI_enable  #}

{%if NODERED_enable | default(false) %}
  #  ================================== Node-RED ========================================== #
  nodered-1:
    image: nodered/node-red:{{__NODERED_version}}
    container_name: nodered-1
    hostname: nodered-1
    labels:
      com.platys.webui.title: "Node-RED UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:1880"
      com.platys.restapi.title: "Node-RED REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:1880"
    ports:
      - "1880:1880"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if NODERED_volume_map_data %}
      - ./container-volume/nodered:/data:Z
    {% endif %}
      - /dev/i2c-1:/dev/i2c-1
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

{% endif %}   {#  NODERED_enable  #}

{% if (STREAMSHEETS_enable) | default(false) %}
  #  ================================== Streamsheets ========================================== #
  streamsheets:
    image: cedalo/streamsheets:{{__STREAMSHEETS_version}}
    container_name: streamsheets
    hostname: streamsheets
    labels:
      com.platys.webui.title: 'Streamsheets UI'
      com.platys.webui.url: "http://${PUBLIC_IP}:28107"
    ports:
      - 28158:8081
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSHEETS_enable #}


{%if SPRING_DATAFLOW_enable | default(false) %}
  #  ================================== Spring Cloud Data Flow ========================================== #

  spring-dataflow-server:
    image: springcloud/spring-cloud-dataflow-server:{{__SPRING_DATAFLOW_version}}
    container_name: spring-dataflow-server
    hostname: spring-dataflow-server
    labels:
      com.platys.webui.title: "Spring Cloud Data Flow Server Dashboard"
      com.platys.webui.url: "http://${PUBLIC_IP}:9393/dashboard"
      com.platys.restapi.title: "Spring Cloud Data Flow Server REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:9393"
    ports:
      - "9393:9393"
    environment:
      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_STREAM_SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS=PLAINTEXT://kafka-1:19092
      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_STREAM_SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_BROKERS=PLAINTEXT://kafka-1:19092
      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_STREAM_SPRING_CLOUD_STREAM_KAFKA_BINDER_ZKNODES=zookeeper-1:2181
      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_STREAM_SPRING_CLOUD_STREAM_KAFKA_STREAMS_BINDER_ZKNODES=zookeeper-1:2181

      - SPRING_CLOUD_DATAFLOW_APPLICATIONPROPERTIES_STREAM_SPRING_KAFKA_STREAMS_PROPERTIES_METRICS_RECORDING_LEVEL=DEBUG

      - SPRING_CLOUD_SKIPPER_CLIENT_SERVER_URI=http://spring-skipper-server:7577/api

      - SPRING_DATASOURCE_URL=jdbc:mysql://spring-dataflow-mysql:3306/dataflow
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpw
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.mariadb.jdbc.Driver
      # (Optionally) authenticate the default Docker Hub access for the App Metadata access.
      #- SPRING_CLOUD_DATAFLOW_CONTAINER_REGISTRY_CONFIGURATIONS_DEFAULT_USER=${METADATA_DEFAULT_DOCKERHUB_USER}
      #- SPRING_CLOUD_DATAFLOW_CONTAINER_REGISTRY_CONFIGURATIONS_DEFAULT_SECRET=${METADATA_DEFAULT_DOCKERHUB_PASSWORD}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    depends_on:
      - kafka-1
    entrypoint: "./wait-for-it.sh -t 180 spring-skipper-server:7577 -- java -jar /maven/spring-cloud-dataflow-server.jar"
    volumes:
      - ./data-transfer:/data-transfer
#      - ${HOST_MOUNT_PATH:-.}:${DOCKER_MOUNT_PATH:-/root/scdf}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  spring-skipper-server:
    image: springcloud/spring-cloud-skipper-server:{{__SPRING_SKIPPER_version}}
    container_name: spring-skipper-server
    hostname: spring-skipper-server
    labels:
      com.platys.restapi.title: "Spring Cloud Skipper Server REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:7577/api"
    ports:
      - "7577:7577"
#      - ${APPS_PORT_RANGE:-20000-20105:20000-20105}
    environment:
      - SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_LOW=20000
      - SPRING_CLOUD_SKIPPER_SERVER_PLATFORM_LOCAL_ACCOUNTS_DEFAULT_PORTRANGE_HIGH=20100
      - SPRING_DATASOURCE_URL=jdbc:mysql://spring-dataflow-mysql:3306/dataflow
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpw
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.mariadb.jdbc.Driver
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_CLOUD_SKIPPER_SERVER_DEPLOYER=ERROR
    entrypoint: "./wait-for-it.sh spring-dataflow-mysql:3306 -- java -jar /maven/spring-cloud-skipper-server.jar"
    volumes:
      - ./data-transfer:/data-transfer
#      - ${HOST_MOUNT_PATH:-.}:${DOCKER_MOUNT_PATH:-/root/scdf}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  spring-dataflow-mysql:
    image: mysql:5.7.25
    container_name: spring-dataflow-mysql
    hostname: spring-dataflow-mysql
    environment:
      MYSQL_DATABASE: dataflow
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: rootpw
    expose:
      - 3306
{% endif %}   {#  SPRING_DATAFLOW_enable #}

{%if AIRFLOW_enable | default(false) %}
  #  ================================== Airflow ========================================== #
  airflow:
    image: bitnami/airflow:{{__AIRFLOW_version}}
    container_name: airflow
    hostname: airflow
    labels:
      com.platys.webui.title: "Airflow UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28139"
      com.platys.restapi.title: "Airflow REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28139/api/experimental/"
    ports:
      - "28139:8080"
    environment:
      - AIRFLOW_HOME=/opt/bitnami/airflow
      - AIRFLOW_EXECUTOR=LocalExecutor
      - AIRFLOW_FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW_DATABASE_HOST=airflow-db
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_PORT_NUMBER=5432
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=abc123!
      - AIRFLOW_LOAD_EXAMPLES={{ 'yes' if (AIRFLOW_provision_examples ) else 'no' }}
      - AIRFLOW_PASSWORD=abc123!
      - AIRFLOW_USERNAME=airflow
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/airflow/dags:/opt/bitnami/airflow/dags:Z
      - ./plugins/airflow/:/opt/bitnami/airflow/plugins:Z
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  airflow-scheduler:
    image: bitnami/airflow-scheduler:{{__AIRFLOW_version}}
    container_name: airflow-scheduler
    hostname: airflow-scheduler
    environment:
      - AIRFLOW_HOME=/opt/bitnami/airflow
      - AIRFLOW_EXECUTOR=LocalExecutor
      - AIRFLOW_FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW_DATABASE_HOST=airflow-db
      - AIRFLOW_DATABASE_NAME=bitnami_airflow
      - AIRFLOW_DATABASE_PORT_NUMBER=5432
      - AIRFLOW_DATABASE_USERNAME=bn_airflow
      - AIRFLOW_DATABASE_PASSWORD=abc123!
      - AIRFLOW_LOAD_EXAMPLES={{ 'yes' if (AIRFLOW_provision_examples ) else 'no' }}
      - AIRFLOW_PASSWORD=abc123!
      - AIRFLOW_USERNAME=airflow
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./scripts/airflow/dags:/opt/bitnami/airflow/dags:Z
      - ./plugins/airflow/:/opt/bitnami/airflow/plugins:Z
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  airflow-db:
    image: 'bitnami/postgresql:10'
    container_name: airflow-db
    hostname: airflow-db
    environment:
      - POSTGRESQL_DATABASE=bitnami_airflow
      - POSTGRESQL_USERNAME=bn_airflow
      - POSTGRESQL_PASSWORD=abc123!
      - ALLOW_EMPTY_PASSWORD=yes
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

{% endif %}   {#  AIRFLOW_enable  #}

{%if ZEPPELIN_enable | default(false) %}
  #  ================================== Zeppelin ========================================== #
  zeppelin:
    image: trivadis/apache-zeppelin:{{__ZEPPELIN_version}}
    container_name: zeppelin
    hostname: zeppelin
    labels:
      com.platys.webui.title: "Apache Zeppelin UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28080"
    ports:
      - "28080:8080"
      - "6060:6060"
      - "5050:5050"
      - "4050-4054:4050-4054"
    env_file:
      - ./conf/hadoop.env
    environment:
    {%if MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_s3a_endpoint: '{{s3Endpoint | default(omit) }}'
      CORE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      HIVE_SITE_CONF_fs_s3a_access_key: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      HIVE_SITE_CONF_fs_s3a_secret_key: {{s3SecretAccessKey}}
      HIVE_SITE_CONF_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      HIVE_SITE_CONF_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_impl: org.apache.hadoop.fs.s3a.S3AFileSystem
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_endpoint: {{s3Endpoint | default(omit) }}
      SPARK_DEFAULTS_CONF_spark_hadoop_fs_s3a_path_style_access: '{{s3PathStyleAccess}}'
      SPARK_HADOOP_FS_S3A_ACCESS_KEY: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      SPARK_HADOOP_FS_S3A_SECRET_KEY: {{s3SecretAccessKey}}
      # for awscli & s3cmd
      AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      AWS_SECRET_ACCESS_KEY: ${PLATYS_AWS_SECRET_ACCESS_KEY:-{{MINIO_secret_key}}}
      AWS_ENDPOINT: {{s3Endpoint if s3Endpoint is defined and s3Endpoint else omit}}
      AWS_DEFAULT_REGION: {{s3DefaultRegion if s3DefaultRegion is defined and s3DefaultRegion else omit}}
    {% endif %}
      SPARK_DEFAULTS_CONF_spark_cores_max: {{ZEPPELIN_spark_cores_max if ZEPPELIN_spark_cores_max is defined and ZEPPELIN_spark_cores_max else omit }}
      SPARK_DEFAULTS_CONF_spark_executor_memory: {{ZEPPELIN_spark_executor_memory if ZEPPELIN_spark_executor_memory is defined and ZEPPELIN_spark_executor_memory else omit }}
      SPARK_DEFAULTS_CONF_spark_jars_repositories: {{SPARK_jars_repositories}}
      SPARK_DEFAULTS_CONF_spark_jars_packages: {{SPARK_jars_packages}}
      SPARK_DEFAULTS_CONF_spark_jars_excludes: {{SPARK_jars_excludes}}
      SPARK_DEFAULTS_CONF_spark_jars: {{SPARK_jars}}
      SPARK_DEFAULTS_CONF_spark_jars_ivySettings: {{SPARK_jars_ivySettings}}
  {%if (SPARK_catalog | lower) == 'in-memory' | default(false) %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: in-memory
  {% else %}
      SPARK_DEFAULTS_CONF_spark_sql_catalogImplementation: hive
  {% endif -%}   {#  SPARK_catalog #}
  {%if HADOOP_enable | default(false) %}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: hdfs://namenode:9000/user/hive/warehouse
  {%elif MINIO_enable or external['S3_enable'] | default(false) %}
      CORE_CONF_fs_defaultFS: s3a://admin-bucket
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: s3a://admin-bucket/hive/warehouse
  {% else %}
      CORE_CONF_fs_defaultFS: file:///tmp
      SPARK_DEFAULTS_CONF_spark_sql_warehouse_dir: file:///hive/warehouse
  {% endif -%}   {#  HADOOP_enable #}
      SPARK_DEFAULTS_CONF_spark_yarn_dist_files: '/spark/conf/hive-site.xml'
      SPARK_DEFAULTS_CONF_spark_driver_extraJavaOptions: {{SPARK_driver_extraJavaOptions}}
      SPARK_DEFAULTS_CONF_spark_executor_extraJavaOptions: {{SPARK_executor_extraJavaOptions}}

      ZEPPELIN_ADDR: "0.0.0.0"
      ZEPPELIN_PORT: "8080"
      ZEPPELIN_MEM: '-Xms1024m -Xmx1024m -XX:MaxMetaspaceSize=512m'
      ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT: 120000
      ZEPPELIN_INTERPRETER_DEP_MVNREPO: 'https://repo.maven.apache.org/maven2'
      ZEPPELIN_ADMIN_USERNAME: {{ZEPPELIN_admin_username}}
      ZEPPELIN_ADMIN_PASSWORD: {{ZEPPELIN_admin_password}}
      ZEPPELIN_USER_USERNAME: {{ZEPPELIN_user_username}}
      ZEPPELIN_USER_PASSWORD: {{ZEPPELIN_user_password}}
      # set spark-master for Zeppelin interpreter
      ZEPPELIN_SPARK_MASTER: "spark://spark-master:7077"
      ZEPPELIN_NOTEBOOK_CRON_ENABLE: '{{ZEPPELIN_notebook_cron_enable}}'
      PYSPARK_PYTHON: "python3"
      SPARK_SUBMIT_OPTIONS: "--conf spark.ui.port=4050 --conf spark.driver.host=${DOCKER_HOST_IP} --conf spark.driver.port=5050 --conf spark.driver.bindAddress=0.0.0.0 --conf spark.blockManager.port=6060 --conf spark.driver.extraJavaOptions=-Dcom.amazonaws.services.s3.enableV4 --conf spark.executor.extraJavaOptions=-Dcom.amazonaws.services.s3.enableV4"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/spark/jars:/extra-jars
      - ./container-volume/spark/logs/:/var/log/spark/logs
    {% if ZEPPELIN_volume_map_data %}
      - ./container-volume/spark/notebooks:/zeppelin/notebooks
    {% endif -%}   {#  ZEPPELIN_volume_map_data #}
      - './conf/s3cfg:/root/.s3cfg.template'
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ZEPPELIN_enable  #}

{%if JUPYTER_enable | default(false) %}
  #  ================================== Jupyter ========================================== #
  jupyter:
    image: jupyter/{{ (JUPYTER_edition | lower) }}-notebook:{{__JUPYTER_version}}
    container_name: jupyter
    hostname: jupyter
    labels:
      com.platys.webui.title: "Jupyter UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28888"
    ports:
      - "28888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "true"
      JUPYTER_TOKEN: "{{admin_password}}"
      GRANT_SUDO: "true"
      TINI_SUBREAPER: "true"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if JUPYTER_volume_map_data %}
      - "./container-volume/jupyter/work:/home/jovyan/work"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

{% endif %}   {#  JUPYTER_enable  #}

{% if GRAFANA_enable | default(false) %}
  #  ================================== Grafana ========================================== #
  grafana:
    image: grafana/grafana:{{__GRAFANA_version}}
    hostname: grafana
    container_name: grafana
    labels:
      com.platys.webui.title: "Grafana UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:3000"
    expose:
      - 3000
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD={{admin_password}}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./plugins/grafana:/etc/grafana/provisioning
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  GRAFANA_enable #}

{% if SUPERSET_enable | default(false) %}
  #  ================================== Superset ========================================== #
  superset:
    image: apache/superset:{{__SUPERSET_version}}
    hostname: superset
    container_name: superset
    labels:
      com.platys.webui.title: "Superset UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28151"
    ports:
      - "28151:8088"
    user: "root"
    environment:
      - DATABASE_DB=superset
      - DATABASE_PASSWORD=superset
      - DATABASE_USER=superset
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FLASK_ENV=development
      - SUPERSET_ENV=development
      - SUPERSET_LOAD_EXAMPLES=yes
      - CYPRESS_CONFIG=false
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/superset:/app/docker
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["/app/docker/docker-bootstrap.sh", "app"]
    restart: {{container_restart_policy}}

  superset-init:
    image: apache/superset:{{__SUPERSET_version}}
    hostname: superset-init
    container_name: superset-init
    user: "root"
    environment:
      - DATABASE_DB=superset
      - DATABASE_PASSWORD=superset
      - DATABASE_USER=superset
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FLASK_ENV=development
      - SUPERSET_ENV=development
      - SUPERSET_LOAD_EXAMPLES=yes
      - CYPRESS_CONFIG=false
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/superset:/app/docker
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["/app/docker/docker-init.sh"]
    restart: {{container_restart_policy}}

  superset-node:
    image: node:12
    hostname: superset-node
    container_name: superset-node
    user: "root"
    environment:
      - DATABASE_DB=superset
      - DATABASE_PASSWORD=superset
      - DATABASE_USER=superset
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FLASK_ENV=development
      - SUPERSET_ENV=development
      - SUPERSET_LOAD_EXAMPLES=yes
      - CYPRESS_CONFIG=false
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/superset:/app/docker
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["/app/docker/docker-frontend.sh"]
    restart: {{container_restart_policy}}

  superset-worker:
    image: apache/superset:{{__SUPERSET_version}}
    hostname: superset-worker
    container_name: superset-worker
    user: "root"
    environment:
      - DATABASE_DB=superset
      - DATABASE_PASSWORD=superset
      - DATABASE_USER=superset
      - DATABASE_PORT=5432
      - DATABASE_DIALECT=postgresql
      - POSTGRES_DB=superset
      - POSTGRES_USER=superset
      - POSTGRES_PASSWORD=superset
      - PYTHONPATH=/app/pythonpath:/app/docker/pythonpath_dev
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - FLASK_ENV=development
      - SUPERSET_ENV=development
      - SUPERSET_LOAD_EXAMPLES=yes
      - CYPRESS_CONFIG=false
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/superset:/app/docker
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: ["/app/docker/docker-bootstrap.sh", "worker"]
    restart: {{container_restart_policy}}

{% endif %}   {#  SUPERSET_enable #}

{% if REDASH_enable | default(false) %}
  #  ================================== Redash ========================================== #
  redash-server:
    image: redash/redash:{{__REDASH_version}}
    hostname: redash-server
    container_name: redash-server
    labels:
      com.platys.webui.title: "Redash UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28161"
    ports:
      - "28161:5000"
    command: server
    environment:
      REDASH_REDIS_URL: "redis://redash-redis:6379/0"
      REDASH_DATABASE_URL: "postgresql://postgres@redash-postgresql/postgres"
      REDASH_PASSWORD_LOGIN_ENABLED: "true"
      REDASH_RATELIMIT_ENABLED: "false"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  redash-scheduler:
    image: redash/redash:{{__REDASH_version}}
    hostname: redash-scheduler
    container_name: redash-scheduler
    command: scheduler
    environment:
      REDASH_LOG_LEVEL: "INFO"
      REDASH_REDIS_URL: "redis://redash-redis:6379/0"
      REDASH_DATABASE_URL: "postgresql://postgres@redash-postgresql/postgres"
      REDASH_PASSWORD_LOGIN_ENABLED: "true"
      REDASH_RATELIMIT_ENABLED: "false"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  redash-worker:
    image: redash/redash:{{__REDASH_version}}
    hostname: redash-worker
    container_name: redash-worker
    command: worker
    environment:
      REDASH_LOG_LEVEL: "INFO"
      REDASH_REDIS_URL: "redis://redash-redis:6379/0"
      REDASH_DATABASE_URL: "postgresql://postgres@redash-postgresql/postgres"
      REDASH_PASSWORD_LOGIN_ENABLED: "true"
      REDASH_RATELIMIT_ENABLED: "false"
      PYTHONUNBUFFERED: 0
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  redash-postgresql:
    image: postgres:9.5-alpine
    hostname: redash-postgresql
    container_name: redash-postgresql
    # The following turns the DB into less durable, but gains significant performance improvements for the tests run (x3
    # improvement on my personal machine). We should consider moving this into a dedicated Docker Compose configuration for
    # tests.
    ports:
      - "15432:5432"
    command: "postgres -c fsync=off -c full_page_writes=off -c synchronous_commit=OFF"
    environment:
      POSTGRES_HOST_AUTH_METHOD: "trust"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  redash-db-setup:
    image: redash/redash:{{__REDASH_version}}
    hostname: redash-db-setup
    container_name: redash-db-setup
    command: create_db
    depends_on:
      - redash-postgresql
    environment:
      REDASH_DATABASE_URL: "postgresql://postgres@redash-postgresql/postgres"

  redash-redis:
    image: redis:{{__REDIS_version}}
    hostname: redash-redis
    container_name: redash-redis
    ports:
      - 6385:6379
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  REDASH_enable #}

{% if SMASHING_enable | default(false) %}
  #  ================================== Smashing ========================================== #
  smashing:
    image: trivadis/smashing:{{__SMASHING_version}}
    hostname: smashing
    container_name: smashing
    ports:
      - 28171:3030
    environment:
      WIDGETS: {{SMASHING_install_widgets}}
      GEMS: {{SMASHING_install_gems}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if SMASHING_volume_map_dashboards %}
      - ./scripts/smashing/dashboards:/dashboards
    {% endif -%}   {#  SMASHING_volume_map_dashboards #}
    {% if SMASHING_volume_map_jobs %}
      - ./scripts/smashing/jobs:/jobs
    {% endif -%}   {#  SMASHING_volume_map_jobs #}
    {% if SMASHING_volume_map_widgets %}
      - ./plugins/smashing/widgets:/widgets
    {% endif -%}   {#  SMASHING_volume_map_widgets #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SMASHING_enable #}

{% if TIPBOARD_enable | default(false) %}
  #  ================================== Tiboard Dashboard ========================================== #
  tipboard:
    image: trivadis/tipboard:{{__TIPBOARD_version}}
    hostname: tipboard
    container_name: tipboard
    ports:
      - 28172:7272
    environment:
      TIPBOARD_redis_host: "'{{TIPBOARD_redis_host}}'"
      TIPBOARD_redis_port: {{TIPBOARD_redis_port}}
      TIPBOARD_redis_password: "{{TIPBOARD_redis_password}}"
      TIPBOARD_redis_db: {{TIPBOARD_redis_db}}
      TIPBOARD_debug: "'False'"
      TIPBOARD_api_key: "'{{TIPBOARD_api_key}}'"
      TIPBOARD_host: "'localhost'"
      TIPBOARD_port: {{TIPBOARD_port}}
      TIPBOARD_project_name: "'{{TIPBOARD_project_name}}'"
      TIPBOARD_flipboard_interval: {{TIPBOARD_flipboard_interval}}
      {%if TIPBOARD_flipboard_sequence != '' %}
      TIPBOARD_flipboard_sequence: "'[{{TIPBOARD_flipboard_sequence}}]'"
      {% endif -%}   {#  TIPBOARD_flipboard_sqeuence #}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if TIPBOARD_volume_map_dashboards %}
      - ./scripts/tipboard:/dashboards
    {% endif -%}   {#  TIPBOARD_volume_map_dashboards #}
      - ./plugins/tipboard:/root/.tipboard/custom_tiles
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  TIPBOARD_enable #}

{% if CHARTBOARD_enable | default(false) %}
  #  ================================== Tiboard Dashboard ========================================== #
  chartboard:
    image: trivadis/chartboard:{{__TIPBOARD_version}}
    hostname: chartboard
    container_name: chartboard
    ports:
      - 28173:8080
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if CHARTBOARD_volume_map_dashboards %}
      - ./scripts/chartboard:/dashboards
    {% endif -%}   {#  TIPBOARD_volume_map_dashboards #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CHARTBOARD_enable #}

{% if MEMCACHED_enable | default(false) %}
  #  ================================== Memcached ========================================== #
  memchached:
    image: memcached:{{__MEMCACHED_version}}
    hostname: memcached
    container_name: memcached
    ports:
      - 11211:11211/tcp
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MEMCACHED_enable #}

{% if REDIS_enable | default(false) %}
  #  ================================== Redis ========================================== #
  redis-1:
    image: bitnami/redis:{{__REDIS_version}}
    hostname: redis-1
    container_name: redis-1
    ports:
      - 6379:6379
    environment:
      - REDIS_REPLICATION_MODE=master
      - ALLOW_EMPTY_PASSWORD={{REDIS_allow_empty_password | default(omit) }}
      - DISABLE_COMMANDS={{REDIS_disable_commands | default(omit) }}
      - REDIS_PASSWORD={{REDIS_password | default(omit) }}
      - REDIS_AOF_ENABLED={{REDIS_aof_enabled | default(omit) }}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if REDIS_volume_map_data %}
      - "./container-volume/redis/data:/bitnami/redis/data"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {% for num in range(REDIS_replicasets| default(0) ) %}
    {% set external_port = 6380 + loop.index - 1 %}
  redis-replica-{{loop.index}}:
    image: bitnami/redis:{{__REDIS_version}}
    hostname: redis-replica-{{loop.index}}
    container_name: redis-replica-{{loop.index}}
    ports:
      - {{external_port}}:6379
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-1
      - REDIS_MASTER_PORT_NUMBER=6379
      - REDIS_MASTER_PASSWORD={{REDIS_password | default(omit) }}
      - ALLOW_EMPTY_PASSWORD={{REDIS_allow_empty_password | default(omit) }}
      - DISABLE_COMMANDS={{REDIS_disable_commands | default(omit) }}
      - REDIS_PASSWORD={{REDIS_password | default(omit) }}
      - REDIS_AOF_ENABLED={{REDIS_aof_enabled | default(omit) }}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if REDIS_volume_map_data %}
      - "./container-volume/redis/data/redis-replica-{{loop.index}}:/bitnami/redis/data"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endfor %}

  {% if REDIS_INSIGHT_enable | default(false) %}
  redis-insight:
    image: redislabs/redisinsight:{{__REDIS_INSIGHT_version}}
    container_name: redis-insight
    hostname: redis-insight
    labels:
      com.platys.webui.title: "Redis Insight UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28174"
    ports:
      - "28174:8001"
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  REDIS_INSIGHT_enable #}

  {% if REDIS_COMMANDER_enable | default(false) %}
  redis-commander:
    image: rediscommander/redis-commander:{{__REDIS_COMMANDER_version}}
    container_name: redis-commander
    hostname: redis-commander
    labels:
      com.platys.webui.title: "Redis Commander UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28119"
    ports:
      - "28119:8081"
    environment:
      - REDIS_HOST=redis-1
      - REDIS_PORT=6379
      - REDIS_PASSWORD='abc123!'
      - REDIS_DB=0
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  REDIS_COMMANDER_enable #}
{% endif %}   {#  REDIS_enable #}

{% if CASSANDRA_enable | default(false) %}
  #  ================================== Cassandra ========================================== #
  cassandra-1:
    image: cassandra:{{__CASSANDRA_version}}
    container_name: cassandra-1
    hostname: cassandra-1
    ports:
      - 29042:9042
      - 7199:7199
      - 9160:9160
    environment:
      - CASSANDRA_SEEDS=cassandra-1
      - CASSANDRA_CLUSTER_NAME="Test Cluster"
      - CASSANDRA_DC=se1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  cassandra-web:
    image: trivadis/cassandra-web
    container_name: cassandra-web
    hostname: cassandra-web
    labels:
      com.platys.webui.title: "Cassandra Web UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28120"
    ports:
      - "28120:3000"
    environment:
      - CASSANDRA_HOSTNAME=cassandra-1
      - CASSANDRA_PORT=9042
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CASSANDRA_enable #}

{% if DATASTAX_enable | default(false) %}
  #  ================================== DataStax Enterprise (DSE) ========================================== #
  {% for num in range(DATASTAX_nodes| default(1) ) %}
    {% set external_port = 9042 + loop.index - 1 %}

  dse-{{loop.index}}: # DataStax Enterprise Database
    image: datastax/dse-server:{{__DATASTAX_version}}
    hostname: dse-{{loop.index}}
    container_name: dse-{{loop.index}}
    command: [ -s -k ] # Run with Search and Spark capabilities enabled
  {% if loop.index == 1 %}
    ports:
      - "{{external_port}}:9042" # Exposes DSE port
  {% endif %}
    environment:
      DS_LICENSE: accept # Accept licence on start
      SPARK_SCALA_VERSION: "2.11"
      OPSCENTER_IP: dse-opscenter
    {% if loop.index > 1 %}
      SEEDS: "dse-1"
    {% endif %}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - "./dse.yaml:/opt/dse/resources/dse/conf/dse.yaml"
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    cap_add:
      - IPC_LOCK # Allow DSE to lock memory with mlock
    ulimits:
      memlock: -1
    restart: {{container_restart_policy}}
  {% endfor %}

  dse-studio:  # Datastax Studio provides convenient web interface to work directly with the Apache Cassandra or DataStax Enterprise
    image: datastax/dse-studio:6.7.0
    container_name: dse-studio
    hostname: dse-studio
    labels:
      com.platys.webui.title: "DataStax Studio Web UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28121"
    ports:
      - "28121:9091" # Exposes port to be available externally
    environment:
      DS_LICENSE: accept
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  dse-opscenter:
    image: "datastax/dse-opscenter"
    container_name: dse-opscenter
    hostname: dse-opscenter
    labels:
      com.platys.webui.title: "DataStax OpsCenter Web UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28122"
    ports:
      - 28122:8888
    environment:
      DS_LICENSE: accept
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

{% endif %}   {#  DATASTAX_enable #}

{% if MONGO_enable | default(false) %}
  #  ================================== MongoDB ========================================== #
  {% for num in range(MONGO_nodes| default(1) ) %}
    {% set external_port = 27017 + loop.index - 1 %}
  mongo-{{loop.index}}:
    image: mongo:{{__MONGO_version}}
    container_name: mongo-{{loop.index}}
    hostname: mongo-{{loop.index}}
    ports:
      - {{external_port}}:27017
    environment:
      - MONGO_INITDB_DATABASE=sample
      - MONGO_INITDB_USERNAME=admin
      - MONGO_INITDB_PASSWORD=admin
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      # seeding scripts
      - ./conf/mongo-entrypoint:/docker-entrypoint-initdb.d
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endfor %}

  mongo-express:
    image: mongo-express:{{__MONGO_EXPRESS_version}}
    container_name: mongo-express
    hostname: mongo-express
    labels:
      com.platys.webui.title: "Cassandra Web UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28123"
    ports:
      - 28123:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo-1
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  admin-mongo:
    image: adicom/admin-mongo:{{__MONGO_ADMIN_version}}
    container_name: admin-mongo
    hostname: admin-mongo
    labels:
      com.platys.webui.title: "Admin Mongo UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28124"
    ports:
      - 28124:1234
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MONGO_enable #}

{% if SOLR_enable | default(false) %}
  #  ================================== SolR ========================================== #
  solr:
    image: solr:{{__SOLR_version}}
    container_name: solr
    hostname: solr
    labels:
      com.platys.webui.title: "SolR UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8983"
    ports:
      - "8983:8983"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SOLR_enable #}

{% if ELASTICSEARCH_enable | default(false) %}
  #  ================================== Elasticsearch ========================================== #
  elasticsearch-1:
    image: {{ 'elasticsearch' if (ELASTICSEARCH_edition | lower) == 'oss' else 'docker.elastic.co/elasticsearch/elasticsearch' }}:{{__ELASTICSEARCH_version}}
    hostname: elasticsearch-1
    container_name: elasticsearch-1
    labels:
      com.platys.restapi.title: "Elasticsearch REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:9200"
      com.platys.manual.step.msgs: "sudo sysctl -w vm.max_map_count=262144"
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: "single-node"
      xpack.security.enabled: "false"
      xpack.monitoring.enabled: "false"
      http.cors.enabled: "true"
      http.cors.allow-origin: "http://dejavu:1358,http://dataplatform:28125,http://analyticsplatform:28125,http://${PUBLIC_IP}:28125,http://${DOCKER_HOST_IP}:28125,http://127.0.0.1:1358"
      http.cors.allow-headers: "X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization"
      http.cors.allow-credentials: "true"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ELASTICSEARCH_enable #}

{% if DEJAVU_enable | default(false) %}
  dejavu:
    image: appbaseio/dejavu:{{__DEJAVU_version}}
    container_name: dejavu
    hostname: dejuvu
    labels:
      com.platys.webui.title: "Elasticsearch Dejavu UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28125"
    ports:
      - "28125:1358"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ELASTICSEARCH_enable #}

{% if CEREBRO_enable | default(false) %}
  cerebro:
    image: lmenezes/cerebro:{{__CEREBRO_version}}
    container_name: cerebro
    hostname: cerebro
    labels:
      com.platys.webui.title: "Elasticsearch Cerbero UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28126"
    ports:
      - "28126:9000"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CEREBRO_enable #}

{% if ELASTICHQ_enable | default(false) %}
  elastichq:
    image: elastichq/elasticsearch-hq:{{__ELASTICSEARCHHQ_version}}
    container_name: elastichq
    hostname: elatichq
    labels:
      com.platys.webui.title: "ElasticHQ UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28127"
    ports:
      - "28127:5000"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ELASTICHQ_enable #}

{% if KIBANA_enable | default(false) %}
  #  ================================== Kibana ========================================== #
  kibana:
    image: {{ 'kibana' if (KIBANA_edition | lower) == 'oss' else 'docker.elastic.co/kibana/kibana' }}:{{__KIBANA_version}}
    hostname: kibana
    container_name: kibana
    labels:
      com.platys.webui.title: "Kibana UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:5601"
    depends_on:
      - elasticsearch-1
    ports:
      - "5601:5601"
    environment:
      discovery.type: "single-node"
      ELASTICSEARCH_HOSTS: http://elasticsearch-1:9200
      SERVER_HOST: "0.0.0.0"
      SERVER_NAME: "kibana"
      XPACK_GRAPH_enabled: "false"
      XPACK_MONITORING_enabled: "false"
      XPACK_REPORTING_enabled: "false"
      XPACK_SECURITY_enabled: "false"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: [ "/bin/bash", "-c", "/usr/share/kibana/bin/kibana-plugin remove x-pack; /usr/local/bin/kibana-docker" ]
    restart: {{container_restart_policy}}
{% endif %}   {#  KIBANA_enable #}
{# #}
{# #}
{% if NEO4J_enable | default(false) %}
  #  ================================== Neo4J ========================================== #
  neo4j-1:
    image: neo4j:{{__NEO4J_version}}
    hostname: neo4j-1
    container_name: neo4j-1
    labels:
      com.platys.webui.title: "Neo4J UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:7474"
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_HEAP_MEMORY=2048
      - NEO4J_CACHE_MEMORY=1G
      - NEO4J_AUTH=neo4j/{{admin_password}}
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
#      - "./conf/neo4j/neo4j.conf:/conf/neo4j.conf"
      - "./plugins/neo4j/:/plugins"
    {% if NEO4J_volume_map_data %}
      - "./container-volume/neo4j/data:/data"
    {% endif %}
    {% if NEO4J_volume_map_logs %}
      - "./container-volume/neo4j/logs:/logs"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  NEO4J_enable #}

{% if DGRAPH_enable | default(false) %}
  #  ================================== Dgraph ========================================== #
  dgraph-1:
    image: dgraph/standalone:{{__DGRAPH_version}}
    hostname: dgraph-1
    container_name: dgraph-1
    labels:
      com.platys.webui.title: "Dgraph Ratel UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28182"
    ports:
      - "28180:8080"
      - "28181:9080"
      - "28182:8000"
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  DGRAPH_enable #}

{% if STARDOG_enable | default(false) %}
  #  ================================== Stardog ========================================== #
  stardog-1:
    image: stardog/stardog:{{__STARDOG_version}}
    hostname: stardog-1
    container_name: stardog-1
    labels:
      com.platys.webui.title: "Stardog UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:7474"
    ports:
      - "5820:5820"
    environment:
      STARDOG_SERVER_JAVA_ARGS: "-Djava.io.tmpdir=/var/opt/tmp -Xms4g -Xmx4g -XX:MaxDirectMemorySize=8g"
      STARDOG_EXT: "/var/opt/stardog-ext"
    {%if use_timezone | default(false) %}
      TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./license/stardog-license-key.bin:/var/opt/stardog/stardog-license-key.bin
      - "./plugins/stardog/:/var/opt/stardog-ext"
    {% if STARDOG_volume_map_data %}
      - "./container-volume/stardog/data:/var/opt/stardog"
      - "./container-volume/stardog/tmp:/var/opt/tmp"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {% if STARDOG_STUDIO_enable | default(false) %}
  stardog-studio:
    image: stardog/stardog-studio:{{__STARDOG_STUDIO_version}}
    hostname: stardog-studio
    container_name: stardog-studio
    labels:
      com.platys.webui.title: "Stardog Studio UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28170"
    ports:
      - "28170:80"
    {%if use_timezone | default(false) %}
    environment:
      TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  STARDOG_STUDIO_enable #}
{% endif %}   {#  STARDOG_enable #}

{% if INFLUXDB_enable | default(false) %}
  #  ================================== InfluxData InfluxDB ========================================== #
  influxdb:
    image: influxdb:{{__INFLUXDB_version}}
    container_name: influxdb
    hostname: influxdb
    labels:
      com.platys.restapi.title: "InfluxDB Rest API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:8086"
    ports:
      - "8086:8086"
    {%if use_timezone | default(false) %}
    evironment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/influxdata/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf
    {% if INFLUXDB_volume_map_data %}
      - "./container-volume/influxdata/influxdb:/var/lib/influxdb"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  influxdb-ui:
    image: timeseriesadmin/timeseriesadmin:{{__INFLUXDB_UI_version}}
    container_name: influxdb-ui
    hostname: influxdb-ui
    labels:
      com.platys.webui.title: "InfluxDB UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28128"
    ports:
      - "28128:80"
    {%if use_timezone | default(false) %}
    evironment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    restart: {{container_restart_policy}}
{% endif %}   {#  INFLUXDB_enable #}

{% if INFLUXDB_CHRONOGRAF_enable | default(false) %}
  #  ================================== InfluxData Chronograf ========================================== #
  chronograf:
    image: chronograf:{{__CHRONOGRAF_version}}
    hostname: chronograf
    container_name: chronograf
    labels:
      com.platys.webui.title: "Chronograf UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28129"
    depends_on:
      - influxdb
    ports:
      - "28129:8888"
    environment:
      RESOURCES_PATH: "/usr/share/chronograf/resources"
      PORT: 8888
      HOST: chronograf
      INFLUXDB_URL: "http://influxdb:8086"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if INFLUXDB_CHRONOGRAF_volume_map_data %}
      - "./container-volume/influxdata/chronograf:/var/lib/chronograf"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  INFLUXDB_CHRONOGRAF_enable #}

{% if INFLUXDB_KAPACITOR_enable | default(false) %}
  #  ================================== InfluxData Kapacitor ========================================== #
  kapacitor:
    image: kapacitor:{{__KAPACITOR_version}}
    hostname: kapacitor
    container_name: kapacitor
    labels:
      com.platys.restapi.title: "Kapacitor REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28130/kapacitor/v1"
    ports:
      - "28130:9092"
    environment:
      KAPACITOR_HOSTNAME: kapacitor
      KAPACITOR_DATA_DIR: "var/lib/kapacitor"
      KAPACITOR_LOGGING_LEVEL: INFO
      KAPACITOR_INFLUXDB_0_URLS_0: http://influxdb:8086
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if INFLUXDB_KAPACITOR_volume_map_data %}
      - "./container-volume/influxdata/kapacitor:/var/lib/kapacitor"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# INFLUXDB_KAPACITOR_enable #}

{% if INFLUXDB_TELEGRAF_enable | default(false) %}
  #  ================================== InfluxData Telegraf ========================================== #
  telegraf:
    image: telegraf:{{__TELEGRAF_version}}
    container_name: telegraf
    hostname: telegraf
    environment:
      HOSTNAME: telegraf
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/influxdata/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
      # Mount for Docker API access
      - /var/run/docker.sock:/var/run/docker.sock
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  INFLUXDB_CHRONOGRAF_enable #}

{% if INFLUXDB2_enable | default(false) %}
  #  ================================== InfluxDB 2 ========================================== #
  influxdb2:
    image: quay.io/influxdb/influxdb:{{__INFLUXDB2_version}}
    hostname: influxdb2
    container_name: influxdb2
    labels:
      com.platys.webui.title: "InfluxDB 2.0 UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9999"
      com.platys.restapi.title: "InfluxDB 2.0 Rest API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:9999/api/v2"
    ports:
      - "9999:9999"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if INFLUXDB2_volume_map_data %}
      - "./container-volume/influxdb2:/var/lib/influxdb"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: "--reporting-disabled"
    restart: {{container_restart_policy}}
{% endif %}   {# INFLUXDB2_enable #}

{% if KUDU_enable | default(false) %}
  kudu-master-1:
    image: apache/kudu:{{__KUDU_version}}
    hostname: kudu-master-1
    container_name: kudu-master-1
    ports:
      - "7051:7051"
      - "8051:8051"
    command: ["master"]
    environment:
      - KUDU_MASTERS=kudu-master-1,kudu-master-2,kudu-master-3
    restart: {{container_restart_policy}}
  kudu-master-2:
    image: apache/kudu:{{__KUDU_version}}
    hostname: kudu-master-2
    container_name: kudu-master-2
    ports:
      - "7051"
      - "8051"
    command: ["master"]
    environment:
      - KUDU_MASTERS=kudu-master-1,kudu-master-2,kudu-master-3
    restart: {{container_restart_policy}}
  kudu-master-3:
    image: apache/kudu:{{__KUDU_version}}
    hostname: kudu-master-3
    container_name: kudu-master-3
    ports:
      - "7051"
      - "8051"
    command: ["master"]
    environment:
      - KUDU_MASTERS=kudu-master-1,kudu-master-2,kudu-master-3
    restart: {{container_restart_policy}}
  kudu-tserver-1:
    image: apache/kudu:latest
    hostname: kudu-tserver-1
    container_name: kudu-tserver-1
    depends_on:
      - kudu-master-1
      - kudu-master-2
      - kudu-master-3
    ports:
      - "7050:7050"
      - "8050:8050"
    command: ["tserver"]
    environment:
      - KUDU_MASTERS=kudu-master-1,kudu-master-2,kudu-master-3
{% endif %}   {# KUDU_enable #}

{% if DRUID_enable | default(false) %}
  #  ================================== InfluxDB 2 ========================================== #
  {% if (DRUID_edition| lower) == 'oss-sandbox' | default(false) %}
  druid-sandbox:
    image: fokkodriesprong/docker-druid:{{__DRUID_version}}
    hostname: druid-sandbox
    container_name: druid-sandbox
    labels:
      com.platys.webui.title: "Druid Console UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28150"
    ports:
      - "28150:8888"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {# DRUID_edition #}

  {% if (DRUID_edition| lower) == 'oss-cluster' | default(false) %}
  druid-coordinator:
    image: apache/druid:{{__DRUID_version}}
    hostname: druid-coordinator
    container_name: druid-coordinator
    depends_on:
      - zookeeper-1
      - druid-postgres
    ports:
      - "28146:8081"
    env_file:
      - ./conf/druid/druid.env
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/druid/storage:/opt/data
#      - coordinator_var:/opt/druid/var
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - coordinator
    restart: {{container_restart_policy}}

  druid-broker-1:
    image: apache/druid:{{__DRUID_version}}
    hostname: druid-broker-1
    container_name: druid-broker-1
    depends_on:
      - zookeeper-1
      - druid-postgres
      - druid-coordinator
    ports:
      - "28147:8082"
    env_file:
      - ./conf/druid/druid.env
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - broker
    restart: {{container_restart_policy}}

  druid-historical-1:
    image: apache/druid:{{__DRUID_version}}
    hostname: druid-historical-1
    container_name: druid-historical-1
    volumes:
      - ./container-volume/druid/storage:/opt/data
#      - historical_var:/opt/druid/var
    depends_on:
      - zookeeper-1
      - druid-postgres
      - druid-coordinator
    ports:
      - "28148:8083"
    env_file:
      - ./conf/druid/druid.env
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - historical
    restart: {{container_restart_policy}}

  druid-middlemanager:
    image: apache/druid:{{__DRUID_version}}
    container_name: druid-middlemanager
    volumes:
      - ./container-volume/druid/storage:/opt/data
#      - middle_var:/opt/druid/var
    depends_on:
      - zookeeper-1
      - druid-postgres
      - druid-coordinator
    ports:
      - "28149:8091"
    env_file:
      - ./conf/druid/druid.env
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - middleManager
    restart: {{container_restart_policy}}

  druid-router:
    image: apache/druid:{{__DRUID_version}}
    container_name: druid-router
    labels:
      com.platys.webui.title: "Druid Console UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28150/graph"
    depends_on:
      - zookeeper-1
      - druid-postgres
      - druid-coordinator
    ports:
      - "28150:8888"
    env_file:
      - ./conf/druid/druid.env
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command:
      - router
    restart: {{container_restart_policy}}

  druid-postgres:
    image: postgres:latest
    hostname: druid-postgres
    container_name: druid-postgres
    environment:
      - POSTGRES_PASSWORD=abc123!
      - POSTGRES_USER=druid
      - POSTGRES_DB=druid
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./container-volume/druid/postgresql:/var/lib/postgresql/data
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {# DRUID_edition #}
{% endif %}   {# DRUID_enable #}

{% if PROMETHEUS_enable | default(false) %}
  #  ================================== Prometheus ========================================== #
  prometheus-1:
    image: prom/prometheus:{{__PROMETHEUS_version}}
    container_name: prometheus-1
    hostname: prometheus-1
    labels:
      com.platys.webui.title: "Prometheus UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9090/graph"
      com.platys.restapi.title: "Prometheus Rest API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:9090/api/v1"
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    {% if PROMETHEUS_volume_map_data %}
      - "./container-volume/prometheus:/prometheus"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {% if PROMETHEUS_PUSHGATEWAY_enable | default(false) %}
  prometheus-pushgateway:
    image: prom/pushgateway:{{__PROMETHEUS_PUSHGATEWAY_version}}
    container_name: prometheus-pushgateway
    hostname: prometheus-pushgateway
    labels:
      com.platys.restapi.title: "Pushgateway API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:9091"
    expose:
      - 9091
    ports:
      - "9091:9091"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  PROMETHEUS_PUSHGATEWAY_enable #}

{% endif %}   {#  PROMETHEUS_enable #}

{% if TILE38_enable | default(false) %}
  #  ================================== Tile38 ========================================== #
  tile38:
    image: tile38/tile38:{{__TILE38_version}}
    container_name: tile38
    hostname: tile38
    labels:
      com.platys.webui.title: "Tile38 UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9851"
    ports:
      - "9851:9851"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  TILE38_enable #}

{% if IGNITE_enable | default(false) %}
  #  ================================== Apache Ignite ========================================== #
  ignite-1:
    image: apacheignite/ignite:{{__IGNITE_version}}
    container_name: ignite-1
    hostname: ignite-1
    ports:
     - "11211:11211"
     - "47500-47509:47500-47509"
    environment:
      CONFIG_URI: file:/config/ignite-config.xml
      IGNITE_QUIET: "false"
      OPTION_LIBS: ignite-rest-http,ignite-cassandra-store,ignite-cassandra-serializers,ignite-kubernetes
      JVM_OPTS: "-server -Xms1g  -Xmx1g -XX:NewSize=512m -XX:SurvivorRatio=6 -XX:+AlwaysPreTouch
              -XX:+UseG1GC -XX:MaxGCPauseMillis=2000 -XX:GCTimeRatio=4 -XX:InitiatingHeapOccupancyPercent=30
              -XX:G1HeapRegionSize=8M -XX:ConcGCThreads=2 -XX:G1HeapWastePercent=10 -XX:+UseTLAB
              -XX:+ScavengeBeforeFullGC -XX:+DisableExplicitGC"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./config:/config:ro
    restart: {{container_restart_policy}}
{% endif %}   {#  IGNITE_enable #}

{% if YUGABYTE_enable | default(false) %}
  #  ================================== Yugabyte ========================================== #
  yb-master:
    image: yugabytedb/yugabyte:{{__YUGABYTE_version}}
    container_name: yb-master
    hostname: yb-master
    command: [ "/home/yugabyte/bin/yb-master",
                "--fs_data_dirs=/mnt/master",
                "--master_addresses=yb-master:7100",
                "--rpc_bind_addresses=yb-master:7100",
                "--replication_factor=1"]
    ports:
      - "7000:7000"
    environment:
      SERVICE_7000_NAME: yb-master
#    volumes:
#      - yb-master-data-1:/mnt/master
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  yb-tserver-1:
    image: yugabytedb/yugabyte:{{__YUGABYTE_version}}
    container_name: yb-tserver-1
    hostname: yb-tserver-1
    depends_on:
      - yb-master
    ports:
      - "19042:9042"
      - "16379:6379"
      - "15433:5433"
      - "19000:9000"
    environment:
      SERVICE_5433_NAME: ysql
      SERVICE_9042_NAME: ycql
      SERVICE_6379_NAME: yedis
      SERVICE_9000_NAME: yb-tserver-1
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
#    volumes:
#      - yb-tserver-data-1:/mnt/tserver
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: [ "/home/yugabyte/bin/yb-tserver",
                "--fs_data_dirs=/mnt/tserver",
                "--start_pgsql_proxy",
                "--rpc_bind_addresses=yb-tserver-1:9100",
                "--tserver_master_addrs=yb-master:7100",
                "--replication_factor=1"]
    restart: {{container_restart_policy}}

{% endif %}   {#  YUGABYTE_enable #}

{% if ORACLE_enable | default(false) %}
  #  ================================== Oracle ========================================== #
  {% if (ORACLE_edition | lower) == 'xe' | default(true) %}
  oracledb:
    image: {{private_docker_repository_name}}/ora_db:{{__ORACLE_XE_version}}
    container_name: oracledb
    hostname: oracledb
    labels:
      com.platys.webui.title: "Oracle UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28152"
    ports:
      - "1521:1521"
      - "28152:8080"
      - "5500:5500"
    environment:
      ORACLE_PWD: abc123!
      ORACLE_CHARACTERSET: AL32UTF8
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if ORACLE_volume_map_data %}
      - ./container-volume/oracle/data:/opt/oracle/oradata:Z
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  ORACLE_edition #}

  {% if (ORACLE_edition | lower) == 'ee' | default(false) %}
  oracledb:
    image: {{private_docker_repository_name}}/ora_db:{{__ORACLE_EE_version}}
    container_name: oracledb
    hostname: oracledb
    labels:
      com.platys.webui.title: "Oracle UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28152"
    ports:
      - "1521:1521"
      - "28152:8080"
      - "5500:5500"
    environment:
      CONTAINER: 'TRUE'
      ORACLE_SID: ORCLCDB
      ORACLE_PDB: ORCLPDB1
      ORACLE_PWD: abc123!
      ORACLE_CHARACTERSET: AL32UTF8
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if ORACLE_volume_map_data %}
      - ./container-volume/oracle/data:/opt/oracle/oradata:Z
    {% endif %}
      - ./init/oracle/startup:/opt/oracle/scripts/startup
      - ./init/oracle/setup:/opt/oracle/scripts/setup
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
  {% endif %}   {#  ORACLE_edition #}

  {% if ORACLE_REST_DATA_SERVICE_enable | default(false) %}
  oracle-rest-1:
    image: {{private_docker_repository_name}}/restdataservices:{{__ORACLE_REST_DATA_SERVICE_version}}
    container_name: oracle-rest-1
    hostname: oracle-rest-1
    labels:
      com.platys.restapi.title: "ORDS Rest API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28153"
    ports:
      - "28153:8888"
    environment:
      ORACLE_HOST: oracledb
      ORACLE_PORT: 1521
      ORACLE_SERVICE: ORCLCDB
      ORACLE_PWD: abc123!
      ORDS_PWD: abc123!
    restart: always
  {% endif %}   {#  ORACLE_REST_DATA_SERVICE_enable #}
{% endif %}   {#  ORACLE_enable #}

{% if MYSQL_enable | default(false) %}
  #  ================================== MySQL ========================================== #
  mysql:
    image: mysql:{{__MYSQL_version}}
    container_name: mysql
    ports:
      - 3306:3306
    environment:
      - MYSQL_DATABASE=sample
      - MYSQL_USER=sample
      - MYSQL_PASSWORD=sample
      - MYSQL_ROOT_PASSWORD=manager
      - MYSQL_LOG_CONSOLE=true
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MYSQL_enable #}

{% if SQLSERVER_enable | default(false) %}
  #  ================================== SQL Server ========================================== #
  sqlserver:
    image: mcr.microsoft.com/mssql/server:{{__SQLSERVER_version}}
    hostname: sqlserver
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "SqlServerAdmin123!"
      MSSQL_PID: "Express"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SQLSERVER_enable #}

{% if POSTGRESQL_enable | default(false) %}
  #  ================================== PostgreSQL ========================================== #
  postgresql:
    image: postgres:{{__POSTGRESQL_version}}
    container_name: postgresql
    hostname: postgresql
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD={{POSTGRESQL_password | default('abc123!') }}
      - POSTGRES_USER={{POSTGRESQL_user | default('demo') }}
      - POSTGRES_DB={{POSTGRESQL_database | default('demodb') }}
      - PGDATA=/var/lib/postgresql/data/pgdata
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./init/postgresql:/docker-entrypoint-initdb.d/
    {% if POSTGRESQL_volume_map_data %}
      - ./container-volume/postgresql/data:/var/lib/postgresql/data/pgdata:Z
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  POSTGRESQL_enable #}

{% if TIMESCALEDB_enable | default(false) %}
  #  ================================== Timescale DB ========================================== #
  timescaledb:
    image: timescale/timescaledb:{{__timescaledb_version}}
    container_name: timescaledb
    hostname: timescaledb
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: "6AXL3g7}+2G2Kc;"
      POSTGRES_USER: "timescaledb"
      POSTGRES_DB: "timescaledb"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if TIMESCALEDB_volume_map_data %}
      - /container-volume/timescaledb/data:/var/lib/postgresql/data:Z
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: always
{% endif %}   {#  TIMESCALEDB_enable #}

{% if ADMINER_enable | default(false) %}
  #  ================================== Adminer ========================================== #
  adminer:
    image: adminer:{{__ADMINER_version}}
    container_name: adminer
    hostname: adminer
    labels:
      com.platys.webui.title: "Adminer UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28131"
    ports:
      - 28131:8080
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ADMINER_enable #}

{% if CLOUDBEAVER_enable | default(false) %}
  #  ================================== Cloudbeaver ========================================== #
  cloudbeaver:
    image: trivadis/cloudbeaver:{{__CLOUDBEAVER_version}}
    container_name: cloudbeaver
    hostname: cloudbeaver
    labels:
      com.platys.webui.title: "Cloudbeaver UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8978"
    ports:
      - "8978:8978"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CLOUDBEAVER_enable #}

{% if SQLPAD_enable | default(false) %}
  #  ================================== SQLPad ========================================== #
  sqlpad:
    image: sqlpad/sqlpad:{{__SQLPAD_version}}
    container_name: sqlpad
    hostname: sqlpad
    labels:
      com.platys.webui.title: "SQLPad UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28194"
    ports:
      - "28194:3000"
    environment:
      SQLPAD_ADMIN: 'admin@sqlpad.com'
      SQLPAD_ADMIN_PASSWORD: 'admin'
      SQLPAD_APP_LOG_LEVEL: debug
      SQLPAD_WEB_LOG_LEVEL: warn
      SQLPAD_SEED_DATA_PATH: /etc/sqlpad/seed-data
      SQLPAD_CONNECTIONS__pgdemo__name: Postgres demo
      SQLPAD_CONNECTIONS__pgdemo__driver: postgres
      SQLPAD_CONNECTIONS__pgdemo__host: postgres
      SQLPAD_CONNECTIONS__pgdemo__database: demodb
      SQLPAD_CONNECTIONS__pgdemo__username: demo
      SQLPAD_CONNECTIONS__pgdemo__password: abc123!
      SQLPAD_CONNECTIONS__pgdemo__multiStatementTransactionEnabled: 'true'
      SQLPAD_CONNECTIONS__pgdemo__idleTimeoutSeconds: 86400
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  SQLPAD_enable #}

{% if QUIX_enable | default(false) %}
  #  ================================== Quix ========================================== #
  quix-backend:
    image: wixquix/quix-backend:{{__QUIX_version}}
    container_name: quix-backend
    hostname: quix-backend
    labels:
      com.platys.restapi.title: "Quix REST API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28159"
    ports:
      - "28159:8081"
    environment:
      MODULES: presto
      MODULES_PRESTO_ENGINE: presto
      MODULES_PRESTO_API: http://presto-1:8080/v1
      MODULES_PRESTO_CATALOG: system
      MODULES_PRESTO_SCHEMA: runtime
      MODULES_PRESTO_SOURCE: quix
      MODULES_PRESTO_DB_EMPTY_TIMEOUT: 60000
      MODULES_PRESTO_DB_REQUEST_TIMEOUT: 10000
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  quix-frontend:
    image: wixquix/quix-frontend:{{__QUIX_version}}
    container_name: quix-frontend
    hostname: quix-frontend
    labels:
      com.platys.webui.title: "Quix UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28160"
    ports:
      - "28160:3000"
    environment:
      BACKEND_INTERNAL_URL: http://quick-backend:8081
      BACKEND_PUBLIC_URL: http://${PUBLIC_IP}:28159
      DB_NAME: quix
      DB_USER: root
      DB_HOST: quix-db
      DB_PORT: 3306
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  quix-db:
    image: "mysql:5.7"
    container_name: quix-db
    hostname: quix-db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "'yes'"
      MYSQL_DATABASE: "quix"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  QUIX_enable #}

{% if AXON_enable | default(false) %}
  #  ================================== Axon Server ========================================== #
  axon-server:
    image: axoniq/axonserver:{{__AXON_version}}
    container_name: axon-server
    hostname: axon-server
    labels:
      com.platys.webui.title: "Axon UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8024"
    ports:
      - 8024:8024
      - 8124:8124
    environment:
      - AXONSERVER_HOSTNAME=axon-server
      - AXONSERVER_EVENTSTORE=/eventstore
      - AXONSERVER_CONTROLDB=/controldb
      - AXONSERVER_HTTP_PORT=8024
      - AXONSERVER_GRPC_PORT=8124
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  AXON_enable #}

{% if PRESTO_enable | default(false) %}
  #  ================================== Presto ========================================== #
  presto-1:
  {% if (PRESTO_edition | lower) == 'starburstdata'  %}
    image: starburstdata/presto:{{__PRESTO_version}}
    {% set presto_etc_dir = '/usr/lib/presto/etc' %}
  {% elif (PRESTO_edition | lower) == 'prestosql' %}
    image: prestosql/presto:{{__PRESTO_version}}
    {% set presto_etc_dir = '/usr/lib/presto/default/etc' %}
  {% elif (PRESTO_edition | lower) == 'prestodb' %}
    image: trivadis/prestodb:{{__PRESTO_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% elif (PRESTO_edition | lower) == 'ahana' %}
    image: ahanaio/prestodb:{{__PRESTO_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% endif -%}   {#  PRESTO_edition #}
    hostname: presto-1
    container_name: presto-1
    labels:
      com.platys.webui.title: "Presto UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28081"
    ports:
      - '28081:8080'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
  {% if (PRESTO_install | lower) == 'cluster'  %}
      - ./conf/presto/cluster/coordinator.config.properties:{{presto_etc_dir}}/config.properties
  {% else %}
      - ./conf/presto/single/config.properties:{{presto_etc_dir}}/config.properties
  {% endif %}
      - ./conf/presto/cluster/node.properties:{{presto_etc_dir}}/node.properties
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      - './conf/presto/catalog/minio.properties:{{presto_etc_dir}}/catalog/minio.properties'
  {% endif %}
  {% if POSTGRESQL_enable | default(false) %}
      - './conf/presto/catalog/postgresql.properties:/usr/lib/presto/etc/catalog/postgresql.properties'
  {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  {% if (PRESTO_install | lower) == 'cluster'  %}
    {% for num in range(PRESTO_workers | default(1) ) %}
  presto-worker-{{loop.index}}:
  {% if (PRESTO_edition | lower) == 'starburstdata'  %}
    image: starburstdata/presto:{{__PRESTO_version}}
    {% set presto_etc_dir = '/usr/lib/presto/etc' %}
  {% elif (PRESTO_edition | lower) == 'prestosql' %}
    image: prestosql/presto:{{__PRESTO_version}}
    {% set presto_etc_dir = '/usr/lib/presto/default/etc' %}
  {% elif (PRESTO_edition | lower) == 'prestodb' %}
    image: trivadis/prestodb:{{__PRESTO_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% elif (PRESTO_edition | lower) == 'ahana' %}
    image: ahanaio/prestodb:{{__PRESTO_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% endif -%}   {#  PRESTO_edition #}
    hostname: presto-worker-{{loop.index}}
    container_name: presto-worker-{{loop.index}}
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/presto/cluster/worker.config.properties:{{presto_etc_dir}}/config.properties
      - ./conf/presto/cluster/node.properties:{{presto_etc_dir}}/node.properties
  {%if MINIO_enable or external['S3_enable'] | default(false) %}
      - './conf/presto/catalog/minio.properties:{{presto_etc_dir}}/catalog/minio.properties'
  {% endif %}
  {% if POSTGRESQL_enable | default(false) %}
      - './conf/presto/catalog/postgresql.properties:/usr/lib/presto/etc/catalog/postgresql.properties'
  {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
    {% endfor %}
  {% endif -%}   {#  PRESTO_install #}

  {% if PRESTO_CLI_enable | default(false) %}
  presto-cli:
  {% if (PRESTO_edition | lower) == 'starburstdata'  %}
    image: trivadis/prestosql-cli:{{__PRESTO_CLI_version}}
  {% elif (PRESTO_edition | lower) == 'prestosql' %}
    image: trivadis/prestosql-cli:{{__PRESTO_CLI_version}}
  {% elif (PRESTO_edition | lower) == 'prestodb' %}
    image: ahanaio/prestodb-cli:{{__PRESTO_CLI_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% elif (PRESTO_edition | lower) == 'ahana' %}
    image: ahanaio/prestodb-cli:{{__PRESTO_CLI_version}}
    {% set presto_etc_dir = '/opt/presto/default/etc' %}
  {% endif -%}   {#  PRESTO_edition #}
    hostname: presto-cli
    container_name: presto-cli
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    tty: true
    restart: {{container_restart_policy}}
  {% endif %}   {#  PRESTO_CLI_enable #}

{% endif %}   {#  PRESTO_enable #}

{% if DREMIO_enable | default(false) %}
  #  ================================== Presto ========================================== #
  dremio-1:
    image: dremio/dremio-oss:{{__DREMIO_version}}
    container_name: dremio-1
    hostname: dremio-1
    labels:
      com.platys.webui.title: "Dremio UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9047"
    ports:
      - '9047:9047'
      - '31010:31010'
      - '45678:45678'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  DREMIO_enable #}

{% if DRILL_enable | default(false) %}
  #  ================================== Presto ========================================== #
  drill-1:
    image: smizy/apache-drill:{{__DRILL_version}}
    container_name: drill-1
    hostname: drill-1
    labels:
      com.platys.webui.title: "Drill UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8047"
    ports:
      - '8047:8047'
    environment:
      - SERVICE_8047_NAME=drillbit
      - DRILL_HEAP=512M
      - DRILL_MAX_DIRECT_MEMORY=1G
      - DRILL_ZOOKEEPER_QUORUM=zookeeper-1:2181
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  DREMIO_enable #}

{% if HASURA_enable | default(false) %}
  #  ================================== Hasura ========================================== #
  hasura:
    image: hasura/graphql-engine:{{__HASURA_version}}
    container_name: hasura
    hostname: hasura
    labels:
      com.platys.webui.title: "Hasura UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28177"
    ports:
      - '28177:8080'
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://demo:abc123!@postgresql:5432/demodb
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL: 1000
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  HASURA_enable #}

{% if MINIO_enable | default(false) %}
  #  ================================== Minio ========================================== #
  {% for num in range(MINIO_nodes | default(1) ) %}
    {% set port = 9000 + loop.index - 1 %}
    {% set serviceName = "minio-" ~ loop.index %}
  {{serviceName}}:
    image: minio/minio:{{__MINIO_version}}
    container_name: {{serviceName}}
    hostname: {{serviceName}}
    labels:
      com.platys.webui.title: "MinIO UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:9000"
    ports:
      - '{{port}}:9000'
    environment:
      MINIO_ACCESS_KEY: {{MINIO_access_key}}
      MINIO_SECRET_KEY: {{MINIO_secret_key}}
      MINIO_REGION_NAME: {{s3DefaultRegion if s3DefaultRegion is defined and s3DefaultRegion else omit}}
      MINIO_BROWSER: "{{MINIO_browser_enable | default(true) }}"
      #MINIO_DEFAULT_BUCKETS: 'admin-bucket,{{MINIO_default_buckets}}'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if MINIO_volume_map_data %}
      - "./container-volume/minio:/data/"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {% if MINIO_volume_map_data %}
    user: "{{uid | default(1000)}}"
    {% endif %}
    command: server /data
    restart: {{container_restart_policy}}
  {% endfor %}

  #  ================================== Minio MC ========================================== #
  minio-mc:
    image: minio/mc:{{__MINIO_MC_version}}
    container_name: minio-mc
    hostname: minio-mc
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/minio/config.json:/root/.mc/config.json
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    entrypoint:
      - /bin/sh
      - -c
      - |
        sleep 10
        mc mb --ignore-existing minio-1/admin-bucket
        for i in $$(echo "{{MINIO_default_buckets}}" | sed "s/,/ /g")
        do
          mc mb --ignore-existing minio-1/$$i
        done
        #
        while [ 1 -eq 1 ];do sleep 60;done
    restart: {{container_restart_policy}}
{% endif %}   {#  MINIO_enable #}

{% if MINIO_CONSOLE_enable | default(false) %}
  #  ================================== Minio Console ========================================== #
  minio-console:
    image: minio/console:{{__MINIO_CONSOLE_version}}
    container_name: minio-console
    hostname: minio-console
    labels:
      com.platys.webui.title: "Minio Console UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28193"
    ports:
      - "28193:9090"
    environment:
      CONSOLE_MINIO_SERVER: "http://minio-1:9090"
      CONSOLE_PBKDF_PASSPHRASE: abc123!
      CONSOLE_PBKDF_SALT: abc123!
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: server
    restart: {{container_restart_policy}}
{% endif %}   {#  MINIO_CONSOLE_enable #}

{% if ADMINIO_UI_enable | default(false) %}
  #  ================================== Adminio UI ========================================== #
  adminio-ui:
    image: rzrbld/adminio-ui:{{__ADMINIO_UI_version}}
    container_name: adminio-ui
    hostname: adminio-ui
    labels:
      com.platys.webui.title: "Adminio UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28190"
    ports:
      - "28190:80"
    environment:
      API_BASE_URL: "http://${PUBLIC_IP}:28191"
      ADMINIO_MULTI_BACKEND: "false"
      ADMINIO_BACKENDS: '[{"name":"myminio","url":"http://${PUBLIC_IP}:28191"}]'
      NGX_ROOT_PATH: "/"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  adminio-api:
    image: rzrbld/adminio-api:{{__ADMINIO_API_version}}
    container_name: adminio-api
    hostname: adminio-api
    labels:
      com.platys.restapi.title: "Adminio API"
      com.platys.restapi.url: "http://${PUBLIC_IP}:28191"
    ports:
      - "28191:8080"
    environment:
      MINIO_ACCESS: {{MINIO_access_key}}
      MINIO_SECRET: {{MINIO_secret_key}}
      MINIO_HOST_PORT: minio-1:9000
      #MINIO_SSE_MASTER_KEY: 1:da2f4cfa32bed76507dcd44b42872328a8e14f25cd2a1ec0fb85d299a192a447
      ADMINIO_HOST_PORT: ":8080"
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ADMINIO_UI_enable #}


{% if FILESTASH_enable | default(false) %}
  #  ================================== Filestash ========================================== #
  filestash:
    image: machines/filestash:{{__FILESTASH_version}}
    container_name: filestash
    hostname: filestash
    labels:
      com.platys.webui.title: "Filestash UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28193"
    ports:
      - 28193:8334
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  FILESTASH_enable #}

{% if S3MANAGER_enable | default(false) %}
  #  ================================== S3 Manager ========================================== #
  s3manager:
    image: mastertinner/s3manager:{{__S3MANAGER_version}}
    container_name: s3manager
    hostname: s3manager
    labels:
      com.platys.webui.title: "S3 Manager UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28176"
    ports:
      - 28176:8080
    environment:
      ENDPOINT: {{ (s3Endpoint | replace('http://','')) if s3Endpoint is defined and s3Endpoint else omit}}
      ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      SECRET_ACCESS_KEY: ${PLATYS_AWS_SECRET_ACCESS_KEY:-{{MINIO_secret_key}}}
      USE_SSL: 'false'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  S3MANAGER_enable #}

{% if AWSCLI_enable | default(false) %}
  #  ================================== Awscli ========================================== #
  awscli:
    image: trivadis/awscli-s3cmd:{{__AWSCLI_version}}
    container_name: awscli
    hostname: awscli
    environment:
      AWS_ACCESS_KEY_ID: {{s3AccessKey | mandatory('s3AccessKey must be defined, if using minIO use the MINIO_access_key in config.yml') }}
      AWS_SECRET_ACCESS_KEY: ${PLATYS_AWS_SECRET_ACCESS_KEY:-{{MINIO_secret_key}}}
      AWS_ENDPOINT: {{ (s3Endpoint | replace('http://','')) if s3Endpoint is defined and s3Endpoint else omit}}
      AWS_DEFAULT_REGION: {{s3DefaultRegion if s3DefaultRegion is defined and s3DefaultRegion else omit}}
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - './conf/s3cfg:/root/.s3cfg.template'
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: tail -f /dev/null
    restart: {{container_restart_policy}}
{% endif %}   {#  AWSCLI_enable #}

{% if MOSQUITTO_enable | default(false) %}
  #  ================================== Mosquitto ========================================== #
    {% for num in range(MOSQUITTO_nodes | default(1) ) %}
      {% set external_port_1 = 1883 + loop.index - 1 %}
      {% set external_port_2 = 9001 + loop.index -1 %}
  mosquitto-{{loop.index}}:
    image: eclipse-mosquitto:{{__MOSQUITTO_version}}
    hostname: mosquitto-{{loop.index}}
    container_name: mosquitto-{{loop.index}}
    ports:
      - "{{external_port_1}}:1883"
      - "{{external_port_2}}:9001"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    {% if MOSQUITTO_volume_map_data %}
      - "./container-volume/mosquitto-{{loop.index}}:/mosquitto/data/"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
    {% endfor %}
{% endif %}   {#  MOSQUITTO_enable #}

{% if HIVEMQ3_enable | default(false) %}
  #  ================================== HiveMQ v3 ========================================== #
  hivemq3-1:
    image: hivemq/hivemq3:{{__HIVEMQ3_version}}
    hostname: hivemq3-1
    container_name: hivemq3-1
    ports:
      - "1886:1883"
      - "28132:8080"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  HIVEMQ3_enable #}

{% if HIVEMQ4_enable | default(false) %}
  #  ================================== HiveMQ v4 ========================================== #
  hivemq4-1:
    image: hivemq/hivemq4:{{__HIVEMQ4_version}}
    hostname: hivemq4-1
    container_name: hivemq4-1
    ports:
      - "1888:1883"
      - "28134:8080"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  HIVEMQ4_enable #}

{% if MQTT_UI_enable | default(false) %}
  #  ================================== MQTT UI ========================================== #
  mqtt-ui:
    image: vergissberlin/hivemq-mqtt-web-client:{{__HIVEMQ_MQTT_WEB_CLIENT_version}}
    container_name: mqtt-ui
    hostname: mqtt-ui
    labels:
      com.platys.webui.title: "HiveMQ UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28136"
    ports:
      - '28136:80'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  MQTT_UI_enable #}

{% if CEDALO_MANAGEMENT_CENTER_enable | default(false) %}
  cedalo-management-center:
    image: cedalo/management-center:{{__CEDALO_MANAGEMENT_CENTER_version}}
    container_name: cedalo-management-center
    hostname: cedala-management-center
    labels:
      com.platys.webui.title: "Cedalo Management Center UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28175"
    expose:
      - 8088
    ports:
      - 28175:8088
    environment:
      CEDALO_MC_BROKER_ID: mosquitto-2.0
      CEDALO_MC_BROKER_NAME: Mosquitto 2.0
      CEDALO_MC_BROKER_URL: mqtt://mosquitto-1:1883
      CEDALO_MC_BROKER_USERNAME: cedalo
      CEDALO_MC_BROKER_PASSWORD: eAkX29UnAs
      CEDALO_MC_PROXY_CONFIG_DIR: /management-center/config/config.json
    volumes:
#     - ./config:/management-center/backend/config
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  CEDALO_MANAGEMENT_CENTER_enable #}

{% if ACTIVEMQ_enable | default(false) %}
  #  ================================== Active MQ ========================================== #
  activemq:
    image: rmohr/activemq:{{__ACTIVEMQ_version}}
    container_name: activemq
    labels:
      com.platys.webui.title: "ActiveMQ UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8161"
    ports:
      # mqtt
      - "1890:1883"
      # amqp
      - "5672:5672"
      # ui
      - "8161:8161"
      # stomp
      - "61613:61613"
      # ws
      - "61614:61614"
      # jms
      - "61616:61616"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if ACTIVEMQ_volume_map_data %}
      - ./container-volume/activemq/data:/opt/activemq/data
    {% endif -%}   {#  ACTIVEMQ_volume_map_data #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  ACTIVEMQ_enable #}

{% if RABBITMQ_enable | default(false) %}
  #  ================================== Active MQ ========================================== #
  rabbitmq:
    image: rabbitmq:{{__RABBITMQ_version}}
    container_name: rabbitmq
    hostname: rabbitmq
    labels:
      com.platys.webui.title: "RabbitMQ UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:15672"
    ports:
      - 5673:5672
      - 15672:15672
    environment:
      RABBITMQ_ERLANG_COOKIE: "62cd4092-dbb3-4e7a-ac6d-ffd7cee850ee"
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: abc123!
    volumes:
      - ./data-transfer:/data-transfer
    {% if RABBITMQ_volume_map_data %}
      - ./container-volume/rabbitmq/data:/var/lib/rabbitmq/
    {% endif -%}   {#  RABBITMQ_volume_map_data #}
    {% if RABBITMQ_volume_map_logs %}
      - ./container-volume/rabbitmq/logs/:/var/log/rabbitmq/
    {% endif -%}   {#  RABBITMQ_volume_map_logs #}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
{% endif %}   {#  RABBITMQ_enable #}

{% if FTP_enable | default(false) %}
  #  ================================== FTP Server ========================================== #
  ftp:
    image: stilliard/pure-ftpd:{{__FTP_PUREFTPD_version}}
    container_name: ftp
    hostname: ftp
    environment:
#      - PUBLICHOST="192.168.73.86"
      - PUBLICHOST=ftp
      - FTP_USER_NAME=orderproc
      - FTP_USER_PASS=orderproc
      - FTP_USER_HOME=/home/ftp-data
      - FTP_MAX_CLIENTS=9
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}

  #  ================================== Filezilla ========================================== #
  filezilla:
    image: jlesage/filezilla:{{__FTP_FILEZILLA_version}}
    container_name: filezilla
    hostname: filezilla
    labels:
      com.platys.webui.title: "Filezilla UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:5800"
    ports:
      - "5800:5800"
      - "5900:5900"
    environment:
      - VNC_PASSWORD=admin123
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
#    volumes:
#      - "/docker/appdata/filezilla:/config:rw"
#      - "/files:/storage:rw"
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  FTP_enable #}

{% if PENTHAO_enable | default(false) %}
  #  ================================== Penthao Webspoon ========================================== #
  penthao:
    image: hiromuhota/webspoon:{{__PENTHAO_version}}
    container_name: penthao
    hostname: penthao
    ports:
      - '28154:8080'
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {#  PENTHAO_enable #}

{% if CODE_SERVER_enable | default(false) %}
  #  ================================== Code-Server IDE (VS Code in Browser) ================= #
  code-server:
    image: trivadis/code-server:{{__CODE_SERVER_version}}
    container_name: code-server
    hostname: code-server
    labels:
      com.platys.webui.title: "Code-Server UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28140"
    user: 0:0
    ports:
      - 28140:8080
    environment:
      PASSWORD: 'abc123!'
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/home/coder/data-transfer
    {% if CODE_SERVER_volume_map_platform_root %}
      - ../:/home/coder/platform-root:Z
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: unless-stopped
{% endif %}   {# CODE_SERVER_enable #}

{% if FILE_BROWSER_enable | default(false) %}
  #  ================================== File Browser ================= #
  file-browser:
    image: filebrowser/filebrowser:{{__FILE_BROWSER_version}}
    container_name: file-browser
    hostname: file-browser
    labels:
      com.platys.webui.title: "File Browser UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28178"
    ports:
      - 28178:80
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/srv
      - ./conf/filebrowser/filebrowser.json:/.filebrowser.json
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: unless-stopped
{% endif %}   {# FILE_BROWSER_enable #}

{% if VAULT_enable | default(false) %}
  #  ================================== Vault ================= #
  vault:
    image: vault:{{__VAULT_version}}
    container_name: vault
    hostname: vault
    labels:
      com.platys.webui.title: "Vault UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:8200"
    ports:
      - 8200:8200
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_ADDRESS=http://0.0.0.0:8200
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_DEV_ROOT_TOKEN_ID=abc123!
    {%if use_timezone | default(false) %}
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - ./conf/vault/config:/vault/config
      - ./conf/vault/policies:/vault/policies
    {% if VAULT_volume_map_data %}
      - "./container-volume/vault/data:/vault/data"
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    cap_add:
      - IPC_LOCK
    command: vault server -config=/vault/config/vault.json
{% endif %}   {#  VAULT_enable #}

{% if SWAGGER_EDITOR_enable | default(false) %}
  #  ================================== Swagger Editor ================= #
  swagger-editor:
    image: swaggerapi/swagger-editor:{{__SWAGGER_EDITOR_version}}
    container_name: swagger-editor
    hostname: swagger-editor
    labels:
      com.platys.webui.title: "Swagger Editor UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28156"
    ports:
      - 28156:8080
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
{% endif %}   {#  SWAGGER_EDITOR_enable #}

{% if SWAGGER_UI_enable | default(false) %}
  #  ================================== Swagger UI ================= #
  swagger-ui:
    image: swaggerapi/swagger-ui:{{__SWAGGER_EDITOR_version}}
    container_name: swagger-ui
    hostname: swagger-ui
    labels:
      com.platys.webui.title: "Swagger UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28157"
    ports:
      - 28157:8080
    {%if use_timezone | default(false) %}
    environment:
      - TZ={{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
{% endif %}   {#  SWAGGER_UI_enable #}

{% if PORTAINER_enable | default(false) %}
  #  ================================== Portainer ========================================== #
  portainer:
    image: portainer/portainer-ce:{{__PORTAINER_version}}
    container_name: portainer
    hostname: portainer
    labels:
      com.platys.webui.title: "Portainer UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28137"
    ports:
      - 28137:9000
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - /var/run/docker.sock:/var/run/docker.sock
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    command: --admin-password '$$2y$$05$$NrPTXkUOIHTTbdHUqdAZVuSbncaZ9frWZYXDbA4v/WYqY0nAY1Sui'
    restart: {{container_restart_policy}}
{% endif %}   {# PORTAINER_enable #}

{% if CADVISOR_enable | default(false) %}
  #  ================================== cAdvisor ========================================== #
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:{{__CADVISOR_version}}
    container_name: cadvisor
    hostname: cadvisor
    labels:
      com.platys.webui.title: "cAdvisor UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:28138"
    ports:
      - 28138:8080
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    devices:
      - "/dev/kmsg"
    tty: true
    privileged: true
    restart: {{container_restart_policy}}
{% endif %}   {# CADVISOR_enable #}

{% if HAWTIO_enable | default(false) %}
  #  ================================== cAdvisor ========================================== #
  hawtio:
    image: erikwramner/hawtio:{{__HAWTIO_version}}
    container_name: hawtio
    hostname: hawtio
    ports:
      - "28155:8080"
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# HAWTIO_enable #}

{% if WETTY_enable | default(false) %}
  #  ================================== cAdvisor ========================================== #
  wetty:
    image: svenihoney/wetty:{{__WETTY_version}}
    container_name: wetty
    hostname: wetty
    labels:
      com.platys.webui.title: "WeTTY UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:3001"
    ports:
      - "3001:3000"
    environment:
      - REMOTE_SSH_SERVER=${DOCKER_HOST_IP}
      - REMOTE_SSH_PORT=22
      - REMOTE_SSH_USER=
      - WETTY_PORT=3000
    {%if use_timezone | default(false) %}
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    restart: {{container_restart_policy}}
{% endif %}   {# WETTY_enable #}

{% if PYTHON_enable | default(false) %}
  #  ================================== python ========================================== #
  python:
    image: python:{{__PYTHON_VERSION}}
    container_name: python
    hostname: python
    {%if use_timezone | default(false) %}
    environment:
      TZ: {{use_timezone}}
    {% endif -%}   {#  use_timezone #}
    volumes:
      - ./data-transfer:/data-transfer
    {% if PYTHON_script_folder is defined and PYTHON_script_folder|length %}
      - {{PYTHON_script_folder}}:/tmp:ro
    {% endif %}
    {%if use_timezone | default(false) %}
      - "./etc/timezone:/etc/timezone:ro"
      - "./etc/localtime:/etc/localtime:ro"
    {% endif -%}   {#  use_timezone #}
    {% if PYTHON_script is defined and PYTHON_script|length %}
    command: ['python3', '/tmp/{{PYTHON_script}}']
    {% endif %}
    restart: {{container_restart_policy}}
{% endif %}   {# PYTHON_enable #}

{% if MARKDOWN_VIEWER_enable | default(false) %}
  #  ================================== markdown-viewer ========================================== #
  markdown-viewer:
    image: minimum/markdown-web:{{__MARKDOWN_VIEWER_VERSION}}
    container_name: markdown-viewer
    hostname: markdown-viewer
    labels:
      com.platys.webui.title: "Markdown Viewer UI"
      com.platys.webui.url: "http://${PUBLIC_IP}:{{80 if (MARKDOWN_VIEWER_use_port_80 | default(true) )  else 8000 }}"
    ports:
      - "{{80 if (MARKDOWN_VIEWER_use_port_80 | default(true) )  else 8000 }}:80"
    volumes:
      - ./documentation:/home/python/markdown
      - ./data-transfer:/data-transfer
    restart: {{container_restart_policy}}

  markdown-renderer:
    image: trivadis/jinja2-renderer:latest
    container_name: markdown-renderer
    hostname: markdown-renderer
    environment:
      USE_PUBLIC_IP: "{{MARKDOWN_VIEWER_use_public_ip | default(true) }}"
      PUBLIC_IP: '${PUBLIC_IP}'
      DOCKER_HOST_IP: '${DOCKER_HOST_IP}'
      DATAPLATFORM_HOME: '${DATAPLATFORM_HOME}'
    volumes:
      - ./documentation/templates:/templates
      - ./documentation/templates:/scripts
      - .:/variables
      - ./documentation:/output
      - ./data-transfer:/data-transfer
{% endif %}   {# MARKDOWN_VIEWER_enable #}

{% if WATCHTOWER_enable | default(false) %}
  #  ================================== watchtower ========================================== #
  watchtower:
    image: containrrr/watchtower:{{__WATCHTOWER_VERSION}}
    container_name: watchtower
    hostname: watchtower
    volumes:
      - ./data-transfer:/data-transfer
      - ${HOME}/.docker/config.json:/config.json
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --label-enable --interval 60 --trace --debug
    restart: {{container_restart_policy}}
{% endif %}   {# WATCHTOWER_enable #}

{% if PROVISIONING_DATA_enable | default(false) %}
  #  ================================== data-provisioning ========================================== #
  data-provisioning:
    image: trivadis/platys-modern-data-platform-data:latest
    container_name: data-provisioning
    hostname: data-provisioning
    volumes:
      - ./data-transfer:/data-transfer
{% endif %}   {# PROVISIONING_DATA_enable #}
