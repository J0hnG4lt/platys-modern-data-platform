# =====================================================
# This is the {{ stack_name }} stack
# =====================================================
version: "{{ DOCKER_COMPOSE_VERSION |default(3.0) }}"

{% set __confluent_platform_version = confluent_platform_version | default('latest') -%}
{% set __zoonavigator_version = zoonavigator_version | default('latest') -%}
{% set __zoonavigator_api_version = zoonavigator_api_version | default('latest') -%}
{% set __ksql_db_version = ksql_db_version | default('latest') -%}
{% set __schema_registry_ui_version = schema_registry_ui_version | default('latest') -%}

{% set __kafka_connect_ui_version = kafka_connect_ui_version | default('latest') -%}
{% set __kafka_manager_version = kafka_manager_version | default('latest') -%}
{% set __kafka_kafdrop_version = kafka_kafdrop_version | default('latest') -%}
{% set __kafka_kadmin_version = kafka_kadmin_version | default('latest') -%}
{% set __kafka_kafkahq_version = kafka_kafkahq_version | default('latest') -%}
{% set __kafka_burrow_version = kafka_burrow_version | default('latest') -%}
{% set __kafka_burrow_ui_version = kafka_burrow_ui_version | default('latest') -%}
{% set __kafka_burrow_dashboard_version = kafka_burrow_dashboard_version | default('latest') -%}

{% set __hadoop_version = hadoop_version | default('latest') -%}

{% set __spark_version = spark_version | default('latest') -%}

{% set __livy_version = livy_version | default('latest') -%}

{% set __hive_version = hive_version | default('latest') -%}

{% set __atlas_verion = atlas_verion | default('latest') -%}

{% set __cassandra_version = cassandra_version | default('latest') -%}

{% set __elasticsearch_version = elasticsearch_version | default('latest') -%}
{% set __dejavu_version = dejavu_version | default('latest') -%}
{% set __cerebro_version = cerebro_version | default('latest') -%}
{% set __elasticsearchhq_version = elasticsearchhq_version | default('latest') -%}

{% set __amundsen_frontend_version = amundsen_frontend_version | default('latest') -%}
{% set __amundsen_search_version = amundsen_search_version | default('latest') -%}
{% set __amundsen_metadata_version = amundsen_metadata_version | default('latest') -%}

{% set __hue_version = hue_version | default('latest') -%}
{% set __hue_postgres_version = hue_postgres_version | default('latest') -%}

{% set __streamsets_version = streamsets_version | default('latest') -%}
{% set __streamsets_transformer_version = streamsets_transforer_version | default('latest') -%}
{% set __streamsets_edge_version = streamsets_edge_version | default('3.12.0') -%}

{% set __nifi_version = nifi_version | default('latest') -%}

{% set __zeppelin_version = zeppelin_version | default('latest') -%}

{% set __jupyter_minimal_version = jupyter_minimal_version | default('latest') -%}
{% set __jupyter_r_version = jupyter_r_version | default('latest') -%}
{% set __jupyter_scipy_version = jupyter_scipy_version | default('latest') -%}
{% set __jupyter_datascience_version = jupyter_datascience_version | default('latest') -%}
{% set __jupyter_tensorflow_version = jupyter_tensorflow_version | default('latest') -%}
{% set __jupyter_all_spark_version = jupyter_all_spark_version | default('latest') -%}

{% set __graphana_version = graphana_version | default('latest') -%}

{% set __kibana_version = kibana_version | default('latest') -%}

{% set __redis_version = redis_version | default('latest') -%}
{% set __redis_commander_version = redis_commander_version | default('latest') -%}

{% set __mongodb_version = mongodb_version | default('latest') -%}
{% set __mongo_express_version = mongo_express_version | default('latest') -%}
{% set __mongo_admin_version = mongo_admin_version | default('latest') -%}

{% set __solr_version = solr_version | default('latest') -%}

{% set __neo4j_version = neo4j_version | default('latest') -%}

{% set __influxdb_version = influxdb_version | default('latest') -%}
{% set __telegraf_version = telegraf_version | default('latest') -%}
{% set __chronograf_version = chronograf_version | default('latest') -%}
{% set __kapacitor_version = kapacitor_version | default('latest') -%}
{% set __influxdb2_version = influxdb2_version | default('2.2.0-alpha') -%}
{% set __influxdb_ui_version = influxdb_ui_version | default('latest') -%}

{% set __prometheus_version = prometheus_version | default('latest') -%}
{% set __prometheus_pushgateway_version = prometheus_pushgateway_version | default('latest') -%}

{% set __tile38_version = tile38_version | default('latest') -%}

{% set __mysql_version = mysql_version | default('latest') -%}
{% set __postgres_version = postgres_version | default('latest') -%}
{% set __timescaledb_version = timescale_version | default('latest') -%}
{% set __sqlserver_version = sqlserver_version | default('latest') -%}
{% set __adminer_version = adminer_version | default('latest') -%}

{% set __axon_version = axon_version | default('latest') -%}

{% set __mosquitto_version = mosquitto_version | default('latest') -%}
{% set __hivemq3_version = hivemq3_version | default('latest') -%}
{% set __hivemq4_version = hivemq4_version | default('latest') -%}
{% set __hivemq_mqtt_web_client_version = hivemq_mqtt_web_client_version | default('latest') -%}
{% set __activemq_version = activemq_version | default('latest') -%}

{% set __ftp_pureftpd_version = ftp_pureftpd_version | default('latest') -%}
{% set __ftp_filezilla_version = ftp_filezilla_version | default('latest') -%}

{% set __minio_version = minio_version | default('latest') -%}
{% set __awscli_version = awscli_version | default('latest') -%}
{% set __portainer_version = portainer_version | default('latest') -%}
{% set __cadvisor_version = cadvisor_version | default('latest') -%}
{% set __stack_type = stack_type | default('INTEL') -%}


{% if KAFKA_kadmin_enable or ATLAS_enable -%}
# enforce some dependencies
  {% set ZOOKEEPER_enable = true -%}
{% endif -%}   {# PLATFORM_ARM_enable #}





{% if __stack_type == 'ARM' -%}
# if we use stack type ARM, then disable some containers which do not support ARM
  {% set ZOOKEEPER_enable = false -%}
  {% set KAFKA_enable = false -%}
  {% set HADOOP_enable = false -%}
  {% set SPARK_enable = false -%}
  {% set HIVE_enable = false -%}
  {% set ATLAS_enable = false -%}
  {% set HUE_enable = false -%}
  {% set STREAMSETS_enable = false -%}
  {% set STREAMSETS_TRANSFORMER_enable = false -%}
  {% set NIFI_enable = false -%}
  {% set ZEPPELIN_enable = false -%}
  {% set JUPYTER_enable = false -%}
  {% set ELASTICSEARCH_enable = false -%}
  {% set KIBANA_enable = false -%}
  {% set INFLUXDB2_enable = false -%}
  {% set NEO4J_enable = false -%}
  {% set TILE38_enable = false -%}
  {% set MYSQL_enable = false -%}
  {% set SQLSERVER_enable = false -%}
  {% set TIMESCALEDB_enable = false -%}
  {% set ADMINER_enable = false -%}
  {% set AXON_enable = false -%}
  {% set HIVEMQ3_enable = false -%}
  {% set HIVEMQ4_enable = false -%}
  {% set MQTT_UI_enable = false -%}
  {% set ACTIVEMQ_enable = false -%}
  {% set FTP_enable = false -%}
  {% set MINIO_enable = false -%}
  {% set AWSCLI_enable = false -%}
  {% set CADVISOR_enable = false -%}
{% endif %}   {# PLATFORM_ARM_enable #}

services:

{% if ZOOKEEPER_enable or KAFKA_enable or ATLAS_enable | default(false) %}
  #  ================================== Zookeeper ========================================== #}
  {% for num in range(ZOOKEEPER_nodes | default('1') ) %}
  {% set port = 2180 + loop.index %}
  zookeeper-{{loop.index}}:
    image: confluentinc/cp-zookeeper:{{__confluent_platform_version}}
    container_name: zookeeper-{{loop.index}}
    hostname: zookeeper-{{loop.index}}
    ports:
      - "{{port}}:{{port}}"
    {% if ZOOKEEPER_volume_map_data %}
    volumes:
      - "./container-volume/zookeeper-{{loop.index}}:/var/lib/zookeeper/data"
    {% endif %}
    environment:
      ZOOKEEPER_SERVER_ID: {{loop.index}}
      ZOOKEEPER_CLIENT_PORT: {{port}}
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
    {% if ZOOKEEPER_nodes == 3 %}
      ZOOKEEPER_SERVERS: zookeeper-1:22888:23888;zookeeper-2:32888:33888;zookeeper-3:42888:43888
    {% endif %}
    restart: {{container_restart_policy}}
  {% endfor %}

  {% if ZOOKEEPER_navigator_enable | default(false) %}
  zoonavigator:
    image: elkozmon/zoonavigator-web:{{__zoonavigator_version}}
    container_name: zoonavigator
    hostname: zoonavigator
    labels:
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28047"
    ports:
     - "28047:8010"
    environment:
      WEB_HTTP_PORT: 8010
      API_HOST: "zoonavigator-api"
      API_PORT: 9010
    depends_on:
     - zoonavigator-api
    restart: {{container_restart_policy}}

  zoonavigator-api:
    image: elkozmon/zoonavigator-api:{{__zoonavigator_api_version}}
    container_name: zoonavigator-api
    labels:
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:28048"
    ports:
     - "28048:9010"
    environment:
      API_HTTP_PORT: 9010
    restart: {{container_restart_policy}}
  {% endif %}   {# ZOOKEEPER_navigator_enable #}

{% endif %}   {# zookeeper_enable or KAFKA_enable or ATLAS_enable #}


{% if (KAFKA_enable or KAFKA_entreprise_enable) | default(false) %}
  #  ================================== Kafka ========================================== #}
  {% for num in range(KAFKA_broker_nodes | default(1) ) %}
  {% set port = 9091 + loop.index %}
  kafka-{{loop.index}}:
    image: confluentinc/{{ 'cp-enterprise-kafka' if KAFKA_entreprise_enable else 'cp-kafka' }}:{{__confluent_platform_version}}
    container_name: kafka-{{loop.index}}
    hostname: kafka-{{loop.index}}
    depends_on:
      - zookeeper-1
    ports:
      - "{{port}}:{{port}}"
      - "2{{port}}:2{{port}}"
    {% if KAFKA_volume_map_data %}
    volumes:
      - "./container-volume/kafka-{{loop.index}}:/var/lib/kafka/data"
    {% endif %}
    environment:
      KAFKA_BROKER_ID: {{loop.index}}
      KAFKA_BROKER_RACK: 'r{{loop.index}}'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-1:2181'
      KAFKA_LISTENERS: 'LISTENER_INTERNAL://kafka-{{loop.index}}:1{{port}},LISTENER_DOCKERHOST://kafka-{{loop.index}}:2{{port}},LISTENER_EXTERNAL://kafka-{{loop.index}}:{{port}}'
      KAFKA_ADVERTISED_LISTENERS: 'LISTENER_INTERNAL://kafka-{{loop.index}}:1{{port}},LISTENER_DOCKERHOST://localhost:2{{port}},LISTENER_EXTERNAL://${PUBLIC_IP:-127.0.0.1}:{{port}}'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'LISTENER_INTERNAL:PLAINTEXT,LISTENER_DOCKERHOST:PLAINTEXT,LISTENER_EXTERNAL:PLAINTEXT'
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERNAL
      {% if KAFKA_CCC_enable | default(false) %}
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: 'kafka-1:19092'
      {% endif %}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DELETE_TOPIC_ENABLE: '{{ KAFKA_delete_topic_enable | default(omit) }}'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: '{{ KAFKA_auto_create_topics_enable | default(omit) }}'
      KAFKA_JMX_PORT: {{9093 + loop.index}}
      KAFKA_JMX_OPTS: '-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port={{9093 + loop.index}}'
      KAFKA_JMX_HOSTNAME: 'kafka-{{loop.index}}'
    restart: {{container_restart_policy}}

  {% endfor %}

{% endif %} {# KAFKA_enable #}

{% if ( KAFKA_enable and KAFKA_schema_registry_enable ) | default(false) %}
  #  ================================== Schema Registry ========================================== #}
  {% for num in range(KAFKA_schema_registry_nodes | default(1) ) %}
    {% set external_port = 28030 + loop.index - 1 %}
    {% set port = 8081 + loop.index - 1 %}
  schema-registry-{{loop.index}}:
    image: confluentinc/cp-schema-registry:{{__confluent_platform_version}}
    hostname: schema-registry-{{loop.index}}
    container_name: schema-registry-{{loop.index}}
    labels:
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
    depends_on:
      - zookeeper-1
      - kafka-1
    ports:
      - "{{external_port}}:{{port}}"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry-{{loop.index}}
    {% if KAFKA_schema_registry_use_zookeeper_election %}
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper-1:2181'
    {% endif %}
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka-1:19092'
      SCHEMA_REGISTRY_MASTER_ELIGIBILITY: "true"
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: {{KAFKA_schema_registry_replication_factor}}
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: 'GET,POST,PUT,OPTIONS'
    restart: {{container_restart_policy}}
  {% endfor %}
{% endif %}   {# KAFKA_enable and KAFKA_schema_registry_enable #}

{% if ( KAFKA_enable and KAFKA_connect_enable ) | default(false) %}
  #  ================================== Kafka Connect ========================================== #}
  {% for num in range(KAFKA_connect_nodes | default(1) ) %}
    {% set external_port = 28013 + loop.index - 1 %}
    {% set port = 8083 + loop.index - 1 %}
  connect-{{loop.index}} :
    image: confluentinc/cp-kafka-connect:{{__confluent_platform_version}}
    container_name: connect-{{loop.index}}
    labels:
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
    depends_on:
      - zookeeper-1
      - kafka-1
      - schema-registry-1
    ports:
      - "{{external_port}}:{{port}}"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka-1:19092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect-{{loop.index}}
      CONNECT_REST_PORT: {{port}}
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry-1:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry-1:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper-1:2181'
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/custom-plugins"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-4.0.0.jar
      AWS_ACCESS_KEY_ID: V42FCGRVMK24JJ8DHUYG
      AWS_SECRET_ACCESS_KEY: bKhWxVF3kQoLY9kFmt91l+tDrEoZjqnWXzY9Eza
    volumes:
      - ./plugins/kafka-connect:/etc/kafka-connect/custom-plugins
    restart: {{container_restart_policy}}

  {% endfor %}
{% endif %}   {# KAFKA_enable and KAFKA_connect_enable  #}

{% if (KAFKA_enable and KAFKA_ksqldb_enable )| default(false) %}
  #  ================================== ksqlDB ========================================== #}
  {% for num in range(KAFKA_ksqldb_nodes | default(1) ) %}
    {% set external_port = 28034 + loop.index - 1 %}
    {% set port = 8088 + loop.index - 1 %}
  ksqldb-server-{{loop.index}} :
    image: confluentinc/ksqldb-server:{{__ksql_db_version}}
    hostname: ksqldb-server-{{loop.index}}
    container_name: ksqldb-server-{{loop.index}}
    labels:
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:{{external_port}}"
    ports:
      - "{{external_port}}:{{port}}"
    depends_on:
      - kafka-1
      - schema-registry-1
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: "kafka-1:19092"
      KSQL_HOST_NAME: ksqldb-server-{{loop.index}}
      KSQL_APPLICATION_ID: "kafka-demo"
      KSQL_LISTENERS: http://0.0.0.0:{{port}}
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"
      KSQL_KSQL_SERVICE_ID: "kafka-demo"
    volumes:
      - ./plugins/ksql:/etc/ksql/ext
    restart: {{container_restart_policy}}
  {% endfor %}

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:{{__ksql_db_version}}
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server-1
    entrypoint: /bin/sh
    tty: true
{% endif %}   {# KAFKA_broker_enable and KAFKA_ksqldb_enable #}

{% if (KAFKA_enable and KAFKA_restproxy_enable) | default(false) %}
  #  ================================== Confluent REST Proxy ========================================== #}
  kafka-rest-1:
    image: confluentinc/cp-kafka-rest:{{__confluent_platform_version}}
    container_name: kafka-rest-1
    hostname: kafka-rest-1
    labels:
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:28012"
    depends_on:
      - kafka-1
      - schema-registry-1
    ports:
      - "28012:8086"
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: '${DOCKER_HOST_IP}:2181'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8086'
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry-1:8081'
      KAFKA_REST_HOST_NAME: 'rest-proxy'
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_ksqldb_enable #}

{% if (KAFKA_enable and KAFKA_mqttproxy_enable) | default(false) %}
  #  ================================== Confluent MQTT Proxy ========================================== #}
  kafka-mqtt-1:
    image: confluentinc/cp-kafka-mqtt:{{__confluent_platform_version}}
    container_name: kafka-mqtt-1
    hostname: mqtt-proxy
    ports:
      - "28001:1882"
    environment:
      KAFKA_MQTT_TOPIC_REGEX_LIST: 'truck_position:.*position,truck_engine:.*engine'
      KAFKA_MQTT_LISTENERS: 0.0.0.0:1882
      KAFKA_MQTT_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-1:19092
      KAFKA_MQTT_CONFLUENT_TOPIC_REPLICATIN_FACTOR: 1
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_mqttproxy_enable #}

{% if (KAFKA_entreprise_enable and KAFKA_CCC_enable) | default(false) %}
  control-center:
    image: confluentinc/cp-enterprise-control-center:{{__confluent_platform_version}}
    hostname: control-center
    container_name: control-center
    labels:
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28046"
    depends_on:
      - zookeeper-1
      - kafka-1
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka-1:9092'
      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper-1:2181'
  {% if ( KAFKA_connect_enable ) | default(false) %}
      CONTROL_CENTER_CONNECT_CLUSTER: 'connect-1:8083'
  {% endif %}
  {% if ( KAFKA_ksqldb_enable ) | default(false) %}
      CONTROL_CENTER_KSQL_URL: "http://ksql-server-1:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://${PUBLIC_IP}:28035"
  {% endif %}
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry-1:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_CCC_enable #}

{% if (KAFKA_enable and KAFKA_schema_registry_ui_enable) | default(false) %}
  #  ================================== Schema Registry UI ========================================== #}
  schema-registry-ui:
    image: landoop/schema-registry-ui:{{__schema_registry_ui_version}}
    container_name: schema-registry-ui
    hostanme: schema-registry-ui
    labels:
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28039"
    depends_on:
      - kafka-1
      - schema-registry-1
    ports:
      - "28039:8000"
    environment:
      SCHEMAREGISTRY_URL: 'http://${PUBLIC_IP}:28030'
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_schema_registry_ui_enable #}

{% if (KAFKA_enable and KAFKA_connect_enable and KAFKA_connect_ui_enable) | default(false) %}
  kafka-connect-ui:
    image: landoop/kafka-connect-ui:{{__kafka_connect_ui_version}}
    container_name: kafka-connect-ui
    hostname: kafka-connect-ui
    labels:
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28038"
    ports:
      - "28038:8000"
    environment:
      CONNECT_URL: "http://${PUBLIC_IP}:28013/,http://${PUBLIC_IP}:28014/"
      PROXY: "true"
    depends_on:
      - connect-1
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_connect_ui_enable #}

{% if (KAFKA_enable and KAFKA_manager_enable) | default(false) %}
  kafka-manager:
    image: trivadis/kafka-manager:{{__kafka_manager_version}}
    container_name: kafka-manager
    hostname: kafka-manager
    labels:
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28038"
    depends_on:
      - zookeeper-1
      - kafka-1
    ports:
      - "28044:9000"
    environment:
      ZK_HOSTS: 'zookeeper-1:2181'
      APPLICATION_SECRET: 'abc123!'
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_manager_enable #}


{% if (KAFKA_enable and KAFKA_kafdrop_enable) | default(false) %}
  kafdrop:
    image: thomsch98/kafdrop:{{__kafka_kafdrop_version}}
    container_name: kafdrop
    hostname: kafdrop
    labels:
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28045"
    ports:
      - "28045:9020"
    environment:
      ZK_HOSTS: zookeeper-1:2181
      LISTEN: 9020
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_kafdrop_enable #}

{% if (KAFKA_enable and KAFKA_kadmin_enable) | default(false) %}
  kadmin:
    image: hasnat/kadmin:{{__kafka_kadmin_version}}
    container_name: kadmin
    hostname: kadmin
    labels:
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28040"
    ports:
      - "28040:8080"
    environment:
      ZOOKEEPER_HOST: zookeeper-1:2181
      KAFKA_HOST: kafka-1:19092
      #SECURITY_PROTOCOL: SSL
      TRUST_STORE_LOCATION: ssl/client.truststore.jks
      TRUST_STORE_PASSWORD: password
      KEY_STORE_LOCATION: ssl/server.keystore.jks
      KEY_STORE_PASSWORD: password
      KEY_PASSWORD: password
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_kadmin_enable #}


{% if (KAFKA_enable and KAFKA_kafkahq_enable) | default(false) %}
  kafkahq:
    image: tchiotludo/kafkahq:{{kafka_kafkahq_version}}
    container_name: kafkahq
    hostname: kafkahq
    labels:
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28042"
    ports:
      - 28042:8080
    environment:
      KAFKAHQ_CONFIGURATION: |
        kafkahq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka-1:19092"
              schema-registry:
                url: "http://schema-registry-1:8081"
              connect:
                url: "http://connect-1:8083"
    depends_on:
      - kafka-1
    restart: {{container_restart_policy}}
{% endif %}   {#  KAFKA_enable and KAFKA_kafkahq_enable #}


{% if (KAFKA_enable and KAFKA_burrow_enable) | default(false) %}
  burrow:
    image: gschmutz/linkedin-burrow:{{__kafka_burrow_version}}
    container_name: burrow
    hostname: burrow
    labels:
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28104"
    volumes:
      - ./conf/burrow:/etc/burrow/
      - ./tmp:/var/tmp/burrow
    ports:
      - 28104:8000
    depends_on:
      - zookeeper-1
      - kafka-1
    restart: {{container_restart_policy}}

  burrow-ui:
    image: generalmills/burrowui:{{__kafka_burrow_ui_version}}
    container_name: burrow-ui
    hostname: burrow-ui
    labels:
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28104"
    ports:
      - 28104:3000
    environment:
      - BURROW_HOME="http://${PUBLIC_IP}:28104/v3/kafka"
    depends_on:
      - zookeeper-1
      - kafka-1
    restart: {{container_restart_policy}}
  burrow-dashboard:
    image: joway/burrow-dashboard:{{__kafka_burrow_dashboard_version}}
    container_name: burrow-dashboard
    hostname: burrow-dashboard
    ports:
      - 28103:80
    environment:
      - BURROW_BACKEND="http://${PUBLIC_IP}:28104"
    depends_on:
      - zookeeper-1
      - kafka-1
    restart: {{container_restart_policy}}
{% endif %}   {# KAFKA_enable and KAFKA_burrow_enable #}

{% if HADOOP_enable | default(false) %}

  #  ================================== Apache Hadoop ========================================== #
  namenode:
    image: trivadis/apache-hadoop-namenode:{{__hadoop_version}}
    container_name: namenode
    hostname: namenode
    labels:
      com.mdps.service.webui.name: "Hadoop NameNode UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28084"
    volumes:
      - ./container-volume/namenode:/hadoop/dfs/name
      - ./data-transfer:/tmp/data-transfer
    ports:
      - "28084:9870"
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./conf/hadoop.env
    restart: {{container_restart_policy}}

  {% for num in range(HADOOP_datanodes| default(1) ) %}
    {% set external_port = 28085 + loop.index - 1 %}

  datanode-{{loop.index}}:
    image: trivadis/apache-hadoop-datanode:{{__hadoop_version}}
    container_name: datanode-{{loop.index}}
    labels:
      com.mdps.service.webui.name: "Hadoop DataNode-{{loop.index}} UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:{{external_port}}"
    volumes:
      - ./container-volume/datanode-{{loop.index}}:/hadoop/dfs/data
    ports:
      - "{{external_port}}:9864"
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./conf/hadoop.env
    restart: {{container_restart_policy}}
  {% endfor %}

  resourcemanager:
    image: trivadis/apache-hadoop-resourcemanager:{{__hadoop_version}}
    container_name: resourcemanager
    hostname: resourcemanager
    labels:
      com.mdps.service.webui.name: "YARN RessourceManager UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:8088"
    ports:
      - "8088:8088"
    depends_on:
      - namenode
      - datanode-1
    env_file:
      - ./conf/hadoop.env
    environment:
      - YARN_CONF_yarn_resourcemanager_webapp_address=${PUBLIC_IP}:8088
      - YARN_CONF_yarn_nodemanager_webapp_address=${PUBLIC_IP}:8042
      - YARN_CONF_yarn_timeline___service_webapp_address=${PUBLIC_IP}:28020
      - YARN_CONF_yarn_log_server_url=${PUBLIC_IP}:28020
    restart: {{container_restart_policy}}

  nodemanager:
    image: trivadis/apache-hadoop-nodemanager:{{__hadoop_version}}
    container_name: nodemanager
    hostname: nodemanager
    labels:
      com.mdps.service.webui.name: "YARN NodeManager UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:8042"
    ports:
      - "8042:8042"
    depends_on:
      - namenode
      - datanode-1
      - datanode-2
    env_file:
      - ./conf/hadoop.env
    environment:
      - YARN_CONF_yarn_resourcemanager_webapp_address=${PUBLIC_IP}:8088
      - YARN_CONF_yarn_nodemanager_webapp_address=${PUBLIC_IP}:8042
      - YARN_CONF_yarn_timeline___service_webapp_address=${PUBLIC_IP}:28020
      - YARN_CONF_yarn_log_server_url=${PUBLIC_IP}:28020
    restart: {{container_restart_policy}}

  historyserver:
    image: trivadis/apache-hadoop-historyserver:{{__hadoop_version}}
    container_name: historyserver
    hostname: historyserver
    labels:
      com.mdps.service.webui.name: "YARN History Server"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28020"
    ports:
      - "28020:8188"
    depends_on:
      - namenode
      - datanode-1
    env_file:
      - ./conf/hadoop.env
    environment:
      SERVICE_PRECONDITION: "namenode:9870 datanode-1:9864 datanode-2:9864 resourcemanager:8088"
    restart: {{container_restart_policy}}

  hadoop-client:
    image: trivadis/apache-hadoop-client:{{__hadoop_version}}
    container_name: hadoop-client
    hostname: hadoop-client
    env_file:
      - ./conf/hadoop.env
    command: tail -f /dev/null
    restart: {{container_restart_policy}}

{% endif %}   {#  HADOOP_enable or SPARK_enable #}


{% if SPARK_enable | default(false) %}
  #  ================================== Apache Spark 2.x ========================================== #
  spark-master:
    image: trivadis/apache-spark-master:{{__spark_version}}
    container_name: spark-master
    hostname: spark-master
    ports:
      - 6066:6066
      - 7077:7077
      - 28076:8080
    env_file:
      - ./conf/hadoop.env
    environment:
      - SPARK_PUBLIC_DNS=${PUBLIC_IP}
      - INIT_DAEMON_STEP=setup_spark
#      - CORE_CONF_fs_defaultFS=hdfs://namenode:8020
    volumes:
      - ./conf/spark/spark-defaults.conf:/spark/conf/spark-defaults.conf
  {% if SPARK_history_enable | default(false) %}
      - ./container-volume/spark/logs/:/var/log/spark/logs
  {% endif -%}   {#  SPARK_history_enable #}
      - ./data-transfer:/data-transfer
    restart: {{container_restart_policy}}

  {% for num in range(SPARK_workers | default(1) ) %}
      {% set external_port = 28077 + loop.index - 1 %}
      {% set webui_port = 28077 + loop.index - 1 %}

  spark-worker-{{loop.index}}:
    image: trivadis/apache-spark-worker:{{__spark_version}}
    container_name: spark-worker-{{loop.index}}
    hostname: spark-worker-{{loop.index}}
    depends_on:
      - spark-master
    ports:
      - "{{external_port}}:{{external_port}}"
    env_file:
      - ./conf/hadoop.env
    environment:
      SPARK_MASTER: "spark://spark-master:7077"
#      SPARK_WORKER_CORES: 2
#      SPARK_WORKER_MEMORY: 1g
      SPARK_WORKER_WEBUI_PORT: "{{webui_port}}"
      SPARK_PUBLIC_DNS: ${PUBLIC_IP}
    volumes:
      - ./conf/spark/spark-defaults.conf:/spark/conf/spark-defaults.conf
  {% if SPARK_history_enable | default(false) %}
      - ./container-volume/spark/logs/:/var/log/spark/logs
  {% endif -%}   {#  SPARK_history_enable #}
      - ./data-transfer:/data-transfer
    restart: {{container_restart_policy}}

  {% endfor %}

  {% if SPARK_history_enable | default(false) %}
  spark-history:
    image: trivadis/apache-spark-worker:{{__spark_version}}
    command: /spark/bin/spark-class org.apache.spark.deploy.history.HistoryServer
    container_name: spark-history
    hostname: spark-history
    labels:
      com.mdps.service.webui.name: "Spark History Server"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28072"
    expose:
      - 18080
    ports:
      - 28072:18080
    volumes:
      - ./conf/spark/spark-defaults.conf:/spark/conf/spark-defaults.conf
      - ./container-volume/spark/logs/:/var/log/spark/logs
    restart: {{container_restart_policy}}
  {% endif %}   {#  SPARK_history_enable #}

  {% if SPARK_thrift_enable | default(false) %}
  spark-thrift-server:
    image: trivadis/apache-spark-master:{{__spark_version}}
    container_name: spark-thrift-server
    ports:
      - "28073:10000"
    env_file:
      - ./conf/hadoop.env
    volumes:
      - ./conf/hive-site.xml:/spark/conf/hive-site.xml
      - ./conf/spark/spark-defaults.conf:/spark/conf/spark/spark-defaults.conf
    command: bash -c "sleep 2m && /spark/sbin/start-thriftserver.sh && tail -f /spark/logs/spark--org.apache.spark.sql.hive.thriftserver.HiveThriftServer2-*.out"
  {% endif %}   {#  SPARK_thrift_enable #}

{% endif %}   {#  SPARK_enable #}

{% if SPARK_enable and LIVY_enable | default(false) %}
  #  ================================== Apache Livy ========================================== #
  livy:
    image: trivadis/apache-livy:{{livy_version}}
    container_name: livy
    hostname: livy
    labels:
      com.mdps.service.webui.name: "Livy Server UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28021/ui#"
      com.mdps.service.restapi.name: "Livy API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:28021/"
    env_file:
      - ./conf/hadoop.env
    volumes:
      - ./conf/spark/spark-defaults.conf:/spark/conf/spark-defaults.conf
    ports:
      - "28021:8998"
    environment:
      - SPARK_MASTER=yarn
      - DEPLOY_MODE=cluster
    restart: always
{% endif %}   {#  SPARK_livy_enable #}

{% if HIVE_enable | default(false) %}
  #  ================================== Apache Hive ========================================== #
  hive-server:
    image: johannestang/hive:{{__hive_version}}
    container_name: hive-server
    hostname: hive-server
    ports:
      - "28027:10000"
      - "28028:10002"
    env_file:
      - ./conf/hadoop.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
#      HDFS_CONF_fs_s3a_access_key: ${MINIO_ACCESS_KEY}
#      HDFS_CONF_fs_s3a_secret_key: ${MINIO_SECRET_KEY}
    restart: {{container_restart_policy}}

  hive-metastore:
    image: johannestang/hive:{{__hive_version}}
    container_name: hive-metastore
    hostname: hive-metastore
    ports:
      - "28026:9083"
    env_file:
      - ./conf/hadoop.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      - "SERVICE_PRECONDITION=namenode:9870 datanode-1:9864 hive-metastore-db:5432"
    restart: {{container_restart_policy}}

  hive-metastore-db:
    container_name: hive-metastore-db
    hostname: hive-metastore-db
    image: bde2020/hive-metastore-postgresql:2.3.0
    restart: {{container_restart_policy}}
{% endif %}   {#  HIVE_enable #}


{% if ATLAS_enable  | default(false) %}
  #  ================================== Apache Atlas ========================================== #
  atlas:
    image: trivadis/apache-atlas:{{__atlas_verion}}
    container_name: atlas
    hostname: atlas
    labels:
      com.mdps.service.webui.name: "Atlas UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28105"
    ports:
      - 28105:21000
    environment:
      - ATLAS_PROVISION_EXAMPLES=true
    volumes:
      - ./conf/atlas/atlas-application.properties:/opt/atlas/conf/atlas-application.properties
      - ./conf/atlas/users-credentials.properties:/opt/atlas/conf/users-credentials.properties
      - ./conf/atlas/credentials:/tmp/credentials
    depends_on:
      - zookeeper-1
      - kafka-1
      - atlas-kafka-setup
      - cassandra-atlas
    restart: {{container_restart_policy}}

  {% if KAFKA_enable  | default(false) %}
  atlas-kafka-setup:
    image: confluentinc/cp-kafka:{{__confluent_platform_version}}
    hostname: atlas-kafka-setup
    container_name: atlas-kafka-setup
    depends_on:
      - kafka-1
      - zookeeper-1
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka-1:19092 1 120 && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper-1:2181 --partitions 1 --replication-factor 1 --topic ATLAS_HOOK && \
                       kafka-topics --create --if-not-exists --zookeeper zookeeper-1:2181 --partitions 1 --replication-factor 1 --topic ATLAS_ENTITIES'"
    environment:
      # The following settings are listed here only to satisfy the image's requirements.
      # We override the image's `command` anyways, hence this container will not start a broker.
      KAFKA_BROKER_ID: ignored
      KAFKA_ZOOKEEPER_CONNECT: ignored
  {% endif %} {#  KAFKA_enable #}

  cassandra-atlas:
    image: cassandra:{{__cassandra_version}}
    container_name: cassandra-atlas
    hostname: cassandra-atlas
    ports:
      - "28062:9042"
      - "28064:9160"
    environment:
      - CASSANDRA_START_RPC=true
    restart: {{container_restart_policy}}

  elasticsearch-atlas:
    image: docker.elastic.co/elasticsearch/elasticsearch:{{elasticsearch_version}}
    container_name: elasticsearch-atlas
    hostname: elasticsearch-atlas
    environment:
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "http.host=0.0.0.0"
      - "network.host=0.0.0.0"
      - "transport.host=127.0.0.1"
      - "cluster.name=docker-cluster"
      - "xpack.security.enable=false"
      - "discovery.zen.minimum_master_nodes=1"
    ports:
      - "28065:9200"
    restart: {{container_restart_policy}}

 {% if AMUNDSEN_enable  | default(false) %}
  #  ================================== Amundsen ========================================== #
  amundsenfrontend:
    image: amundsendev/amundsen-frontend:{{__amundsen_frontend_version}}
    container_name: amundsenfrontend
    hostname: amundsenfrontend
    labels:
      com.mdps.service.webui.name: "Amundsen UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28105"
    depends_on:
      - amundsenmetadata
      - amundsensearch
    ports:
      - 28003:5000
    environment:
      - METADATASERVICE_BASE=http://amundsenmetadata:5000
      - SEARCHSERVICE_BASE=http://amundsensearch:5000
    restart: {{container_restart_policy}}

  amundsensearch:
    image: amundsendev/amundsen-search:{{__amundsen_search_version}}
    container_name: amundsensearch
    labels:
      com.mdps.service.restapi.name: "Amundsensearch REST API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:28004"
    ports:
      - 28004:5000
    depends_on:
      - elasticsearch
    environment:
      - CREDENTIALS_PROXY_USER=admin
      - CREDENTIALS_PROXY_PASSWORD=abc123!
      - PROXY_ENDPOINT=atlas:21000
      - PROXY_CLIENT=ATLAS
    restart: {{container_restart_policy}}

  amundsenmetadata:
    image: amundsendev/amundsen-metadata:{{__amundsen_metadata_version}}
    container_name: amundsenmetadata
    hostname: amundsenmetadata
    labels:
      com.mdps.service.restapi.name: "Amundsensearch REST API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:28005"
    depends_on:
      - atlas
    ports:
      - 28005:5000
    environment:
      - CREDENTIALS_PROXY_USER=admin
      - CREDENTIALS_PROXY_PASSWORD=abc123!
      - PROXY_HOST=atlas
      - PROXY_PORT=21000
      - PROXY_CLIENT=ATLAS
    restart: {{container_restart_policy}}
  {% endif %}   {#  AMUNDSEN_enable #}
{% endif %}   {#  ATLAS_enable #}

{% if (HUE_enable and SOLR_enable)  | default(false) %}
  #  ================================== Apache Hue ========================================== #
  hue:
    image: gethue/hue:{{__hue_version}}
    container_name: hue
    hostname: hue
    dns: 8.8.8.8
    ports:
      - "28043:8888"
    volumes:
      - ./conf/hue.ini:/usr/share/hue/desktop/conf/hue.ini
    depends_on:
      - hue-db
      - solr
    restart: {{container_restart_policy}}

  hue-db:
    image: postgres:{{__hue_postgres_version}}
    container_name: hue-db
    hostname: hue-db
    environment:
      POSTGRES_DB: hue
      POSTGRES_PASSWORD: hue
      POSTGRES_USER: hue
    restart: {{container_restart_policy}}

{% endif %}   {#  HUE_enable and SOLR_enable #}

{%if STREAMSETS_enable | default(false) %}
  #  ================================== StreamSets DataCollector ========================================== #}
  streamsets-1:
    image: trivadis/streamsets-kafka-hadoop-aws:{{__streamsets_version}}
    container_name: streamsets-1
    hostname: streamsets-1
    labels:
      com.mdps.service.webui.name: "StreamSets Data Collector UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28029"
      com.mdps.service.restapi.name: "StreamSets Data Collector REST API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:28110/collector/restapi"
    ports:
      - "28029:18630"
    environment:
      SDC_OFFSET_DIRECTORY: /data/custom-offset-el
      SDC_JAVA_OPTS: "-Xmx2g -Xms2g"
      SDC_JAVA8_OPTS: "-XX:+UseG1GC"
      SDC_CONF_MONITOR_MEMORY: "true"
      SDC_CONF_PIPELINE_MAX_RUNNERS_COUNT: 50
    volumes:
      - ./data-transfer:/data-transfer
    {% if STREAMSETS_volume_map_data %}
      - ./container-volume/streamsets-1:/data:Z
    {% endif %}
#      - ./container-volume/streamsets/data:/data:Z
#      - ./streamsets-extras/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/postgresql-42.2.6.jar:/opt/streamsets-datacollector-{{__streamsets_version}}/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/postgresql-42.2.6.jar:Z
#      - ./streamsets-extras/libs-common-lib:/opt/streamsets-datacollector-{{__streamsets_version}}/libs-common-lib:Z
#      - ./streamsets-extras/user-libs:/opt/streamsets-datacollector-user-libs:Z
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSETS_enable  #}

{%if STREAMSETS_TRANSFORMER_enable | default(false) %}
  #  ================================== StreamSets Transformer ========================================== #}
  streamsets-transformer-1:
    image: streamsets/transformer:{{__streamsets_transformer_version}}
    container_name: streamsets-transformer-1
    hostname: streamsets-transformer-1
    labels:
      com.mdps.service.webui.name: "StreamSets Transformer UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28148"
      com.mdps.service.restapi.name: "StreamSets Transformer REST API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:28148/collector/restapi"
    ports:
      - "28148:19630"
    volumes:
      - ./data-transfer:/data-transfer
    {% if STREAMSETS_TRANSFORMER_volume_map_data %}
      - ./container-volume/streamsets-transformer-1:/data:Z
    {% endif %}
#      - ./container-volume/streamsets-transformer/data:/data:Z
#      - ./streamsets-extras/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/postgresql-42.2.6.jar:/opt/streamsets-datacollector-{{__streamsets_version}}/streamsets-libs-extras/streamsets-datacollector-jdbc-lib/lib/postgresql-42.2.6.jar:Z
#      - ./streamsets-extras/libs-common-lib:/opt/streamsets-datacollector-{{__streamsets_version}}/libs-common-lib:Z
#      - ./streamsets-extras/user-libs:/opt/streamsets-datacollector-user-libs:Z
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSETS_TRANSFORMER_enable  #}

{%if STREAMSETS_EDGE_enable | default(false) %}
  #  ================================== StreamSets DataCollector Edge ========================================== #}
  streamsets-edge:
    image: streamsets/datacollector-edge:{{__streamsets_edge_version}}
    container_name: streamsets-edge
    hostname: streamsets-edge
    labels:
      com.mdps.service.restapi.name: "StreamSets Data Collector Edge REST API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:28110"
    ports:
      - "28110:18633"
    restart: {{container_restart_policy}}
{% endif %}   {#  STREAMSETS_enable  #}

{%if NIFI_enable | default(false) %}
  #  ================================== NiFi ========================================== #}
  nifi:
    image: apache/nifi:{{__nifi_version}}
    container_name: nifi
    hostname: nifi
    labels:
      com.mdps.service.webui.name: "Apache NiFi UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28054/nifi"
    ports:
      - "28054:8080"
    restart: {{container_restart_policy}}

{% endif %}   {#  NIFI_enable  #}

{%if NODERED_enable | default(false) %}
  #  ================================== Node-RED ========================================== #}
  nodered:
    image: nodered/node-red:{{__nifi_version}}
    container_name: nodered
    hostname: nodered
    labels:
      com.mdps.service.webui.name: "Node-RED UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:1880"
      com.mdps.service.restapi.name: "Node-RED REST API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:1880"
    ports:
      - "1880:1880"
    environment:
      - TZ=Europe/Amsterdam
    volumes:
#      - ./conf/nodered/settings.js:/usr/src/node-red/node_modules/node-red/settings.js
      - ./data-transfer:/data-transfer
    {% if NODERED_volume_map_data %}
      - ./container-volume/nodered:/data:Z
    {% endif %}
      - /dev/i2c-1:/dev/i2c-1

    restart: {{container_restart_policy}}

{% endif %}   {#  NODERED_enable  #}

{%if ZEPPELIN_enable | default(false) %}
  #  ================================== Zeppelin ========================================== #}
  zeppelin:
    image: trivadis/apache-zeppelin:{{__zeppelin_version}}
    container_name: zeppelin
    hostname: zeppelin
    labels:
      com.mdps.service.webui.name: "Apache Zeppelin UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28055"
    ports:
      - "28055:8080"
#      - "4040:4040"
#      - "42331:42331"
    env_file:
      - ./conf/hadoop.env
    environment:
      # AWS Credentials
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}

      ZEPPELIN_ADDR: "0.0.0.0"
      ZEPPELIN_PORT: "8080"
      ZEPPELIN_INTERPRETER_CONNECT_TIMEOUT: 120000
      SPARK_MASTER: "spark://spark-master:7077"

      # set spark-master for Zeppelin interpreter
      MASTER: "spark://spark-master:7077"
      SPARK_DRIVER_HOST: zeppelin
      SPARK_DRIVER_BINDADDRESS: "0.0.0.0"
      PYSPARK_PYTHON: "python3"
# no longer necessary with 0.8.2 of Zepplin
#      - SPARK_SUBMIT_OPTIONS="--packages org.apache.commons:commons-lang3:3.5"
      # enableV4 to make it work with AWS Frankfurt region
      SPARK_SUBMIT_OPTIONS: "--conf spark.driver.extraJavaOptions=-Dcom.amazonaws.services.s3.enableV4 --conf spark.executor.extraJavaOptions=-Dcom.amazonaws.services.s3.enableV4"
    volumes:
      - ./conf/spark/spark-defaults.conf:/spark/conf/spark/spark-defaults.conf
      - './conf/s3cfg:/root/.s3cfg'
      - ./conf/zeppelin/shiro.ini:/opt/zeppelin/conf/shiro.ini
      - ./conf/zeppelin/interpreter-setting.json:/opt/zeppelin/interpreter/spark/interpreter-setting.json
      - ./data-transfer:/data-transfer
    restart: {{container_restart_policy}}
{% endif %}   {#  ZEPPELIN_enable  #}

{# #}
{# #}
{%if JUPYTER_enable | default(false) %}
  {%if jupyter_minimal_enable | default(false) %}
  #  ================================== Jupyter ========================================== #}
  jupyter:
    image: jupyter/r-notebook:{{__jupyter_minimal_version}}
    container_name: jupyter
    hostname: jupyter
    labels:
      com.mdps.service.webui.name: "Jupyter UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28060"
    ports:
      - "28060:8888"
    environment:
      JUPYTER_ENABLE_LAB: "true"
      JUPYTER_TOKEN: "{{admin_password}}"
      GRANT_SUDO: "true"
      TINI_SUBREAPER: "true"
    {% if JUPYTER_volume_map_data %}
    volumes:
      - "./container-volume/jupyter/work:/home/jovyan/work"
    {% endif %}
    restart: {{container_restart_policy}}
  {% endif %}   {#  jupyter_minimal_enable  #}

  {%if jupyter_r_enable | default(false) %}
  jupyter:
    image: jupyter/r-notebook:{{__jupyter_r_version}}
    container_name: jupyter
    hostname: jupyter
    labels:
      com.mdps.service.webui.name: "Jupyter UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28060"
    ports:
      - "28060:8888"
    environment:
      JUPYTER_ENABLE_LAB: "true"
      JUPYTER_TOKEN: "{{admin_password}}"
      GRANT_SUDO: "true"
      TINI_SUBREAPER: "true"
    {% if JUPYTER_volume_map_data %}
    volumes:
      - "./container-volume/jupyter/work:/home/jovyan/work"
    {% endif %}
    restart: {{container_restart_policy}}
  {% endif %}   {#  jupyter_r_enable  #}

  {%if jupyter_scipy_enable | default(false) %}
  jupyter:
    image: jupyter/scipy-notebook:{{__jupyter_scipy_version}}
    container_name: jupyter
    hostname: jupyter
    labels:
      com.mdps.service.webui.name: "Jupyter UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28060"
    ports:
      - "28060:8888"
    environment:
      JUPYTER_ENABLE_LAB: "true"
      JUPYTER_TOKEN: "{{admin_password}}"
      GRANT_SUDO: "true"
      TINI_SUBREAPER: "true"
    {% if JUPYTER_volume_map_data %}
    volumes:
      - "./container-volume/jupyter/work:/home/jovyan/work"
    {% endif %}
    restart: {{container_restart_policy}}
  {% endif %}   {#  jupyter_scipy_enable  #}

  {%if JUPYTER_tensorflow_enable | default(false) %}
  jupyter:
    image: jupyter/tensorflow-notebook:{{__jupyter_tensorflow_version}}
    container_name: jupyter
    hostname: jupyter
    labels:
      com.mdps.service.webui.name: "Jupyter UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28060"
    ports:
      - "28060:8888"
    environment:
      JUPYTER_ENABLE_LAB: "true"
      JUPYTER_TOKEN: "{{admin_password}}"
      GRANT_SUDO: "true"
      TINI_SUBREAPER: "true"
    {% if JUPYTER_volume_map_data %}
    volumes:
      - "./container-volume/jupyter/work:/home/jovyan/work"
    {% endif %}
    restart: {{container_restart_policy}}
  {% endif %}   {#  JUPYTER_tensorflow_enable  #}

  {%if JUPYTER_datascience_enable | default(false) %}
  jupyter:
    image: jupyter/datascience-notebook:{{__jupyter_datascience_version}}
    container_name: jupyter
    hostname: jupyter
    labels:
      com.mdps.service.webui.name: "Jupyter UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28060"
    ports:
      - "28060:8888"
    environment:
      JUPYTER_ENABLE_LAB: "true"
      JUPYTER_TOKEN: "{{admin_password}}"
      GRANT_SUDO: "true"
      TINI_SUBREAPER: "true"
    {% if JUPYTER_volume_map_data %}
    volumes:
      - "./container-volume/jupyter/work:/home/jovyan/work"
    {% endif %}
    restart: {{container_restart_policy}}
  {% endif %}   {#  JUPYTER_datascience_enable  #}

  {%if JUPYTER_all_spark_enable | default(false) %}
  jupyter:
    image: jupyter/all-spark-notebook:{{__jupyter_all_spark_version}}
    container_name: jupyter
    hostname: jupyter
    labels:
      com.mdps.service.webui.name: "Jupyter UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28060"
    ports:
      - "28060:8888"
    environment:
      JUPYTER_ENABLE_LAB: "true"
      JUPYTER_TOKEN: "{{admin_password}}"
      GRANT_SUDO: "true"
      TINI_SUBREAPER: "true"
    {% if JUPYTER_volume_map_data %}
    volumes:
      - "./container-volume/jupyter/work:/home/jovyan/work"
    {% endif %}
    restart: {{container_restart_policy}}
  {% endif %}   {#  JUPYTER_all_spark_enable  #}
{% endif %}   {#  JUPYTER_enable  #}

{% if GRAFANA_enable | default(false) %}
  #  ================================== Grafana ========================================== #}
  grafana:
    image: grafana/grafana:{{__graphana_version}}
    hostname: grafana
    container_name: grafana
    labels:
      com.mdps.service.webui.name: "Grafana UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28099"
    expose:
      - 3000
    ports:
      - "28099:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD={{admin_password}}
    volumes:
      - ./plugins/grafana:/etc/grafana/provisioning
    restart: {{container_restart_policy}}
{% endif %}   {#  GRAFANA_enable #}


{% if REDIS_enable | default(false) %}
  #  ================================== Redis ========================================== #}
  redis:
    container_name: redis
    hostname: redis:{{__redis_version}}
    image: redis
    ports:
      - 6379:6379
    restart: {{container_restart_policy}}

  redis-commander:
    image: rediscommander/redis-commander:{{__redis_commander_version}}
    container_name: redis-commander
    hostname: redis-commander
    labels:
      com.mdps.service.webui.name: "Redis Commander UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28057"
    ports:
      - "28057:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    restart: {{container_restart_policy}}
{% endif %}   {#  REDIS_enable #}

{% if CASSANDRA_enable | default(false) %}
  #  ================================== Cassandra ========================================== #}
  cassandra-1:
    image: cassandra:{{__cassandra_version}}
    container_name: cassandra-1
    hostname: cassandra-1
    ports:
      - 28090:9042
      - 7199:7199
      - 9160:9160
    environment:
      - CASSANDRA_SEEDS=cassandra-1
      - CASSANDRA_CLUSTER_NAME="Test Cluster"
      - CASSANDRA_DC=se1
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
    restart: {{container_restart_policy}}

  cassandra-web:
    image: trivadis/cassandra-web
    container_name: cassandra-web
    hostname: cassandra-web
    labels:
      com.mdps.service.webui.name: "Cassandra Web UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28053"
    ports:
      - "28053:3000"
    environment:
      - CASSANDRA_HOSTNAME=cassandra-1
      - CASSANDRA_PORT=9042
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
    restart: {{container_restart_policy}}
{% endif %}   {#  CASSANDRA_enable #}

{% if MONGODB_enable | default(false) %}
  #  ================================== MongoDB ========================================== #}
  mongodb:
    image: mongo:{{__mongodb_version}}
    container_name: mongodb
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_DATABASE=sample
      - MONGO_INITDB_USERNAME=admin
      - MONGO_INITDB_PASSWORD=admin
    volumes:
      # seeding scripts
      - ./conf/mongo-entrypoint:/docker-entrypoint-initdb.d
    restart: {{container_restart_policy}}

  mongo-express:
    image: mongo-express:{{__mongo_express_version}}
    container_name: mongo-express
    hostname: mongo-express
    labels:
      com.mdps.service.webui.name: "Cassandra Web UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28056"
    ports:
      - 28056:8081
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
    restart: {{container_restart_policy}}

  admin-mongo:
    image: adicom/admin-mongo:{{__mongo_admin_version}}
    container_name: admin-mongo
    hostname: admin-mongo
    labels:
      com.mdps.service.webui.name: "Admin Mongo UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28051"
    ports:
      - 28051:1234
    restart: {{container_restart_policy}}
{% endif %}   {#  MONGODB_enable #}

{% if SOLR_enable | default(false) %}
  #  ================================== SolR ========================================== #}
  solr:
    image: solr:{{__solr_version}}
    container_name: solr
    hostname: solr
    labels:
      com.mdps.service.webui.name: "SolR UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28081"
    ports:
      - "28081:8983"
    restart: {{container_restart_policy}}
{% endif %}   {#  SOLR_enable #}

{% if ELASTICSEARCH_enable | default(false) %}
  #  ================================== Elasticsearch ========================================== #}
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:{{__elasticsearch_version}}
    hostname: elasticsearch
    container_name: elasticsearch
    labels:
      com.mdps.service.restapi.name: "Elasticsearch REST API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:9200"
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      XPACK_SECURITY_enable: "false"
      xpack.monitoring.enable: "false"
    restart: {{container_restart_policy}}

  dejavu:
    image: appbaseio/dejavu:{{__dejavu_version}}
    container_name: dejavu
    hostname: dejuvu
    labels:
      com.mdps.service.webui.name: "Elasticsearch Dejavu UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28000"
    ports:
      - "28000:1358"
    restart: {{container_restart_policy}}

  cerebro:
    image: lmenezes/cerebro:{{__cerebro_version}}
    container_name: cerebro
    hostname: cerebro
    labels:
      com.mdps.service.webui.name: "Elasticsearch Cerbero UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28000"
    ports:
      - "28061:9000"
    restart: {{container_restart_policy}}

  elastichq:
    image: elastichq/elasticsearch-hq:{{__elasticsearchhq_version}}
    container_name: elastichq
    hostname: elatichq
    labels:
      com.mdps.service.webui.name: "ElasticHQ UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28052"
    ports:
      - "28052:5000"

  {% if KIBANA_enable | default(false) %}
  #  ================================== Kibana ========================================== #}
  kibana:
    image: docker.elastic.co/kibana/kibana:{{__kibana_version}}
    hostname: kibana
    container_name: kibana
    labels:
      com.mdps.service.webui.name: "Kibana UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28006"
    depends_on:
      - elasticsearch
    ports:
      - "28006:5601"
    environment:
      xpack.monitoring.enable: "false"
      discovery.type: "single-node"
      elasticsearch.url: http://elasticsearch:9200
      server.host: "0.0.0.0"
      SERVER_HOST: "0.0.0.0"
      server.name: "kibana"
      SERVER_NAME: "kibana"
      XPACK_GRAPH_enable: "false"
      XPACK_MONITORING_enable: "false"
      XPACK_REPORTING_enable: "false"
      XPACK_SECURITY_enable: "false"
    command: [ "/bin/bash", "-c", "/usr/share/kibana/bin/kibana-plugin remove x-pack; /usr/local/bin/kibana-docker" ]
    restart: {{container_restart_policy}}
  {% endif %}   {#  KIBANA_enable #}
{% endif %}   {#  ELASTICSEARCH_enable #}
{# #}
{# #}
{% if NEO4J_enable | default(false) %}
  #  ================================== Neo4J ========================================== #}
  neo4j:
    image: neo4j:{{__neo4j_version}}
    hostname: neo4j
    container_name: neo4j
    labels:
      com.mdps.service.webui.name: "Kibana UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28080"
    ports:
      - "28080:7474"
      - "7687:7687"
    environment:
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_HEAP_MEMORY=2048
      - NEO4J_CACHE_MEMORY=1G
      - NEO4J_AUTH=neo4j/{{admin_password}}
    volumes:
#      - "./conf/neo4j/neo4j.conf:/conf/neo4j.conf"
      - "./plugins/neo4j/:/plugins"
    {% if NEO4J_volume_map_data %}
      - "./container-volume/neo4j/data:/data"
    {% endif %}
    {% if NEO4J_volume_map_logs %}
      - "./container-volume/neo4j/logs:/logs"
    {% endif %}
    restart: {{container_restart_policy}}
{% endif %}   {#  NEO4J_enable #}

{% if INFLUXDB_enable | default(false) %}
  #  ================================== InfluxData InfluxDB ========================================== #}
  influxdb:
    image: influxdb:{{__influxdb_version}}
    container_name: influxdb
    hostname: influxdb
    labels:
      com.mdps.service.restapi.name: "InfluxDB Rest API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:28150"
    ports:
      - "28150:8086"
    volumes:
      - ./conf/influxdata/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf
    {% if INFLUXDB_volume_map_data %}
      - "./container-volume/influxdata/influxdb:/var/lib/influxdb"
    {% endif %}
    restart: {{container_restart_policy}}

  influxdb-ui:
    image: timeseriesadmin/timeseriesadmin:{{__influxdb_ui_version}}
    container_name: influxdb-ui
    hostname: influxdb-ui
    labels:
      com.mdps.service.webui.name: "InfluxDB UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28152"
    ports:
      - "28151:80"
    restart: {{container_restart_policy}}
{% endif %}   {#  INFLUXDB_enable #}

{% if INFLUXDB_telegraf_enable | default(false) %}
  #  ================================== InfluxData Telegraf ========================================== #}
  telegraf:
    image: telegraf:{{__telegraf_version}}
    container_name: telegraf
    hostname: telegraf
    environment:
      HOSTNAME: telegraf
    volumes:
      - ./conf/influxdata/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
      # Mount for Docker API access
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - influxdb
    restart: {{container_restart_policy}}
{% endif %}   {#  INFLUXDB_chronograf_enable #}

{% if INFLUXDB_chronograf_enable | default(false) %}
  #  ================================== InfluxData Chronograf ========================================== #}
  chronograf:
    image: chronograf:{{__chronograf_version}}
    hostname: chronograf
    container_name: chronograf
    labels:
      com.mdps.service.webui.name: "Chronograf UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28151"
    ports:
      - "28152:8888"
    environment:
      RESOURCES_PATH: "/usr/share/chronograf/resources"
      PORT: 8888
      HOST: chronograf
      INFLUXDB_URL: "http://influxdb:8086"
    {% if INFLUXDB_CHRONOGRAF_volume_map_data %}
    volumes:
      - "./container-volume/influxdata/chronograf:/var/lib/chronograf"
    {% endif %}
    depends_on:
      - influxdb
    restart: {{container_restart_policy}}
{% endif %}   {#  INFLUXDB_chronograf_enable #}

{% if INFLUXDB_kapacitor_enable | default(false) %}
  #  ================================== InfluxData Kapacitor ========================================== #}
  kapacitor:
    image: kapacitor:{{__kapacitor_version}}
    hostname: kapacitor
    container_name: kapacitor
    labels:
      com.mdps.service.restapi.name: "Kapacitor UI"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:28152/kapacitor/v1"
    ports:
      - "28153:9092"
    environment:
      KAPACITOR_HOSTNAME: kapacitor
      KAPACITOR_DATA_DIR: "var/lib/kapacitor"
      KAPACITOR_LOGGING_LEVEL: INFO
      KAPACITOR_INFLUXDB_0_URLS_0: http://influxdb:8086
    {% if INFLUXDB_KAPACITOR_volume_map_data %}
    volumes:
      - "./container-volume/influxdata/kapacitor:/var/lib/kapacitor"
    {% endif %}
    restart: {{container_restart_policy}}
{% endif %}   {# INFLUXDB_kapacitor_enable #}

{% if INFLUXDB2_enable | default(false) %}
  #  ================================== InfluxDB 2 ========================================== #}
  influxdb2:
    image: quay.io/influxdb/influxdb:{{__influxdb2_version}}
    hostname: influxdb2
    container_name: influxdb2
    labels:
      com.mdps.service.webui.name: "InfluxDB 2.0 UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:9999"
      com.mdps.service.restapi.name: "InfluxDB 2.0 Rest API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:9999/api/v2"
    command: "--reporting-disabled"
    ports:
      - "9999:9999"
    {% if INFLUXDB2_volume_map_data %}
    volumes:
      - "./container-volume/influxdb2:/var/lib/influxdb"
    {% endif %}
    restart: {{container_restart_policy}}
{% endif %}   {# INFLUXDB2_enable #}

{% if PROMETHEUS_enable | default(false) %}
  #  ================================== Prometheus ========================================== #}
  prometheus:
    image: prom/prometheus:{{__prometheus_version}}
    container_name: prometheus
    hostname: prometheus
    labels:
      com.mdps.service.webui.name: "Prometheus UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:9090/graph"
      com.mdps.service.restapi.name: "Prometheus Rest API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:9090/api/v1"
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"
    volumes:
      - ./conf/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    {% if PROMETHEUS_volume_map_data %}
      - "./container-volume/prometheus:/prometheus"
    {% endif %}
    restart: {{container_restart_policy}}

  {% if PROMETHEUS_PUSHGATEWAY_enable | default(false) %}
  pushgateway:
    image: prom/pushgateway:{{__prometheus_pushgateway_version}}
    container_name: pushgateway
    hostname: pushgateway
    labels:
      com.mdps.service.restapi.name: "Pushgateway API"
      com.mdps.service.restapi.url: "http://${PUBLIC_IP}:9091"
    expose:
      - 9091
    ports:
      - "9091:9091"
    restart: {{container_restart_policy}}
  {% endif %}   {#  PROMETHEUS_PUSHGATEWAY_enable #}

{% endif %}   {#  PROMETHEUS_enable #}

{% if TILE38_enable | default(false) %}
  #  ================================== Tile38 ========================================== #}
  tile38:
    image: tile38/tile38:{{__tile38_version}}
    container_name: tile38
    labels:
      com.mdps.service.webui.name: "Tile38 UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:9851"
    ports:
      - "9851:9851"
    restart: {{container_restart_policy}}
{% endif %}   {#  TILE38_enable #}

{% if MYSQL_enable | default(false) %}
  #  ================================== MySQL ========================================== #}
  mysql:
    image: mysql:{{__mysql_version}}
    container_name: mysql
    ports:
      - 3306:3306
    environment:
      - MYSQL_DATABASE=sample
      - MYSQL_USER=sample
      - MYSQL_PASSWORD=sample
      - MYSQL_ROOT_PASSWORD=manager
      - MYSQL_LOG_CONSOLE=true
    restart: {{container_restart_policy}}
{% endif %}   {#  MYSQL_enable #}

{% if SQLSERVER_enable | default(false) %}
  #  ================================== SQL Server ========================================== #}
  sqlserver:
    image: mcr.microsoft.com/mssql/server:{{__sqlserver_version}}
    hostname: sqlserver
    container_name: sqlserver
    ports:
      - "1433:1433"
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: "SqlServerAdmin123!"
      MSSQL_PID: "Express"
    restart: {{container_restart_policy}}
{% endif %}   {#  SQLSERVER_enable #}

{% if POSTGRESQL_enable | default(false) %}
  #  ================================== PostgreSQL ========================================== #}
  postgresql:
    image: postgres:{{__postgres_version}}
    container_name: postgresql
    hostname: postgresql
    environment:
      - POSTGRES_PASSWORD=sample
      - POSTGRES_USER=sample
      - POSTGRES_DB=sample
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - ./init/postgresql:/docker-entrypoint-initdb.d/
    {% if POSTGRESQL_volume_map_data %}
      - ./container-volume/postgresql/data:/var/lib/postgresql/data/pgdata:Z
    {% endif %}
    restart: {{container_restart_policy}}
{% endif %}   {#  POSTGRESQL_enable #}

{% if TIMESCALEDB_enable | default(false) %}
  #  ================================== Timescale DB ========================================== #}
  timescaledb:
    image: timescale/timescaledb:{{__timescaledb_version}}
    container_name: timescaledb
    hostname: timescaledb
    environment:
      POSTGRES_PASSWORD: "6AXL3g7}+2G2Kc;"
      POSTGRES_USER: "timescaledb"
      POSTGRES_DB: "timescaledb"
    ports:
      - "5433:5432"
    {% if TIMESCALEDB_volume_map_data %}
    volumes:
      - /container-volume/timescaledb/data:/var/lib/postgresql/data:Z
    {% endif %}
    restart: always
{% endif %}   {#  TIMESCALEDB_enable #}

{% if ADMINER_enable | default(false) %}
  #  ================================== Adminer ========================================== #}
  adminer:
    image: adminer:{{__adminer_version}}
    container_name: adminer
    hostname: adminer
    labels:
      com.mdps.service.webui.name: "Adminer UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28041"
    ports:
      - 28041:8080
    restart: {{container_restart_policy}}
{% endif %}   {#  ADMINER_enable #}

{% if AXON_enable | default(false) %}
  #  ================================== Axon Server ========================================== #}
  axon-server:
    image: axoniq/axonserver:{{__axon_version}}
    container_name: axon-server
    hostname: axon-server
    labels:
      com.mdps.service.webui.name: "Axon UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28010"
    ports:
      - 28010:8024
      - 28018:8124
    environment:
      - AXONSERVER_HOSTNAME=axon-server
      - AXONSERVER_EVENTSTORE=/eventstore
      - AXONSERVER_CONTROLDB=/controldb
      - AXONSERVER_HTTP_PORT=8024
      - AXONSERVER_GRPC_PORT=8124
    restart: {{container_restart_policy}}
{% endif %}   {#  AXON_enable #}

{% if MQTT_enable | default(false) %}
  #  ================================== Mosquitto ========================================== #}
  {% if MOSQUITTO_enable | default(false) %}
    {% for num in range(MOSQUITTO_nodes | default(1) ) %}
      {% set external_port_1 = 28100 + loop.index - 1 %}
      {% set external_port_2 = 28023 + loop.index %}
  mosquitto-{{loop.index}}:
    image: eclipse-mosquitto:{{__mosquitto_version}}
    hostname: mosquitto-{{loop.index}}
    container_name: mosquitto-{{loop.index}}
    ports:
      - "{{external_port_1}}:1883"
      - "{{external_port_2}}:9001"
    volumes:
      - ./conf/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    {% if MOSQUITTO_volume_map_data %}
      - "./container-volume/mosquitto-{{loop.index}}:/mosquitto/data/"
    {% endif %}
    restart: {{container_restart_policy}}
    {% endfor %}
  {% endif %}   {#  MOSQUITTO_enable #}

  {% if HIVEMQ3_enable | default(false) %}
  hivemq3-1:
    image: hivemq/hivemq3:{{__hivemq3_version}}
    hostname: hivemq3-1
    container_name: hivemq3-1
    ports:
      - "28101:1883"
      - "28024:8080"
    restart: {{container_restart_policy}}
  {% endif %}   {#  HIVEMQ3_enable #}

  {% if HIVEMQ4_enable | default(false) %}
  hivemq4-1:
    image: hivemq/hivemq3:{{__hivemq4_version}}
    hostname: hivemq4-1
    container_name: hivemq4-1
    ports:
      - "28101:1883"
      - "28024:8080"
    restart: {{container_restart_policy}}
  {% endif %}   {#  HIVEMQ4_enable #}

  {% if MQTT_UI_enable | default(false) %}
  #  ================================== MQTT UI ========================================== #}
  mqtt-ui:
    image: vergissberlin/hivemq-mqtt-web-client:{{__hivemq_mqtt_web_client_version}}
    container_name: mqtt-ui
    hostname: mqtt-ui
    labels:
      com.mdps.service.webui.name: "HiveMQ UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28082"
    ports:
      - '28082:80'
    restart: {{container_restart_policy}}
  {% endif %}   {#  MQTT_UI_enable #}
{% endif %}   {#  MQTT_enable #}

{% if ACTIVEMQ_enable | default(false) %}
  #  ================================== Active MQ ========================================== #}
  activemq:
    image: rmohr/activemq:{{__activemq_version}}
    container_name: activemq
    ports:
      # mqtt
      - "1883:1883"
      # amqp
      - "28007:5672"
      # ui
      - "28019:8161"
      # stomp
      - "28068:61613"
      # ws
      - "28069:61614"
      # jms
      - "28070:61616"
    volumes:
      - ./container-volume/activemq/data:/opt/activemq/data
    restart: {{container_restart_policy}}
{% endif %}   {#  ACTIVEMQ_enable #}

{% if FTP_enable | default(false) %}
  #  ================================== FTP Server ========================================== #}
  ftp:
    image: stilliard/pure-ftpd:{{__ftp_pureftpd_version}}
    container_name: ftp
    hostname: ftp
    environment:
#      - PUBLICHOST="192.168.73.86"
      - PUBLICHOST=ftp
      - FTP_USER_NAME=orderproc
      - FTP_USER_PASS=orderproc
      - FTP_USER_HOME=/home/ftp-data
      - FTP_MAX_CLIENTS=9
    ports:
      - "21:21"
      - "30000-30009:30000-30009"
    restart: {{container_restart_policy}}

  #  ================================== Filezilla ========================================== #}
  filezilla:
    image: jlesage/filezilla:{{__ftp_filezilla_version}}
    container_name: filezilla
    hostname: filezilla
    labels:
      com.mdps.service.webui.name: "Filezilla UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28008"
    ports:
      - "28008:5800"
      - "28009:5900"
    volumes:
      - ./data-transfer:/data-transfer
    environment:
      - VNC_PASSWORD=admin123
#    volumes:
#      - "/docker/appdata/filezilla:/config:rw"
#      - "/files:/storage:rw"
    restart: {{container_restart_policy}}
{% endif %}   {#  FTP_enable #}


{% if MINIO_enable | default(false) %}
  #  ================================== Minio ========================================== #}
  minio:
    image: minio/minio:{{__minio_version}}
    container_name: minio
    hostname: minio
    labels:
      com.mdps.service.webui.name: "MinIO UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28083"
    ports:
      - '28083:9000'
    {% if MINIO_volume_map_data %}
    volumes:
      - "./container-volume/minio:/data/"
    {% endif %}
    environment:
      MINIO_ACCESS_KEY: V42FCGRVMK24JJ8DHUYG
      MINIO_SECRET_KEY: bKhWxVF3kQoLY9kFmt91l+tDrEoZjqnWXzY9Eza
    command: server /data
    restart: {{container_restart_policy}}
{% endif %}   {#  MINIO_enable #}

{% if AWSCLI_enable | default(false) %}
  #  ================================== Awscli ========================================== #}
  awscli:
    image: xueshanf/awscli:{{__awscli_version}}
    container_name: awscli
    hostname: awscli
    volumes:
      - './conf/s3cfg:/root/.s3cfg'
      - './data-transfer:/tmp/data-transfer'
#      - './minio/config:/root/.minio'
    environment:
      AWS_ACCESS_KEY_ID: V42FCGRVMK24JJ8DHUYG
      AWS_SECRET_ACCESS_KEY: bKhWxVF3kQoLY9kFmt91l+tDrEoZjqnWXzY9Eza
    command: tail -f /dev/null
    restart: {{container_restart_policy}}
{% endif %}   {#  AWSCLI_enable #}


{% if PORTAINER_enable | default(false) %}
  #  ================================== Portainer ========================================== #}
  portainer:
    image: portainer/portainer:{{__portainer_version}}
    container_name: portainer
    hostname: portainer
    labels:
      com.mdps.service.webui.name: "Portainer UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28071"
    command: --admin-password '$$2y$$05$$NrPTXkUOIHTTbdHUqdAZVuSbncaZ9frWZYXDbA4v/WYqY0nAY1Sui'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
#      - data_portainer:/data
#    environment:
#      - VIRTUAL_HOST=monitor.bioatlas.se
#      - VIRTUAL_PORT=9000
    ports:
      - 28071:9000
    restart: {{container_restart_policy}}
{% endif %}   {# PORTAINER_enable #}

  #  ================================== cAdvisor ========================================== #}
  cadvisor:
    image: google/cadvisor:{{__cadvisor_version}}
    container_name: cadvisor
    hostname: cadvisor
    labels:
      com.mdps.service.webui.name: "cAdvisor UI"
      com.mdps.service.webui.url: "http://${PUBLIC_IP}:28160"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 28160:8080
    restart: {{container_restart_policy}}
